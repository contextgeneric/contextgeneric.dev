window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}},"1":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":3,"0":{"docs":{},"df":0,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{},"df":0,"8":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"3":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1,"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"6":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1},"8":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"6":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"7":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"~":{"docs":{},"df":0,"2":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":4,"0":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"1":{"docs":{},"df":0,"2":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"2":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1},"5":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}},"5":{"docs":{},"df":0,"6":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"3":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6,"0":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1},"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"9":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}},"4":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5,"0":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1},"4":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1},"o":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}},"5":{"docs":{},"df":0,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"0":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"3":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"4":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"6":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"8":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"2":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"6":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"8":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"9":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"2":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"4":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1},"5":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"7":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"9":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"4":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"5":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"7":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"_":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}},"a":{"docs":{},"df":0,".":{"docs":{},"df":0,"k":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}},"b":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9}},"o":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":2},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/overview/":{"tf":3.872983346207417}},"df":11}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8}},"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.1622776601683795}},"df":3}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":2}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":2}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":8}}}},"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}},"v":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":3}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9}}}}},"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":13,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":7}}},"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":5,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":13,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":9}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":8}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":8},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1},"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":6}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":5,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544}},"df":1}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5}},"l":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":5,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":3}},"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1},"g":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":2},"w":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.744562646538029},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":15}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":8,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":4}}}}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":7}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":8}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":6}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":2}}}},"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}},"'":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":4},"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":1}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":3}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}},"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":4}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":2}}}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"z":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951}},"df":1}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":8},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":7}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951}},"df":6,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":4,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":4}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":6},"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":7,".":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.872983346207417}},"df":1,"'":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1},"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"b":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907}},"df":1},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":2}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2},"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":13,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"/":{"docs":{},"df":0,"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":4}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":12}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}}}}},"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}},"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":2,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.830951894845301},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795}},"df":1}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":6}},"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"[":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{},"df":0,"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":2}}}}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":9}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":2},"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":5,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":1}}}}}},"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":6}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":7}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":5}}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772}},"df":5,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":13}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":11}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}},"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6},"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}}}},"b":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979}},"df":2}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":2}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"z":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.656854249492381},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0}},"df":9,"6":{"docs":{},"df":0,"4":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6}}}},"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":2}},"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":12}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":11}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":10,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":4,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":10}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":6}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":2}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":7}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":5}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0}},"df":2},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"+":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":4}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":11,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":2}}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":4}},"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"—":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"g":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10},"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":6}},"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9}}}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903}},"df":4}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12},"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}}}}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":3}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3}},"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"j":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1,"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.830951894845301},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":13,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907}},"df":2}}}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.123105625617661}},"df":2}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":10.583005244258363},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.855654600401044},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.3166247903554}},"df":6,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}}}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":5,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903}},"df":1}}}},"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0}},"df":1}}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":5}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":4}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285}},"df":2,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"u":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.916079783099616},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":11,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979}},"df":1,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.6457513110645907}},"df":3}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}},"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.123105625617661}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0}},"df":2}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":1}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979}},"df":2}}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9}},"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}},"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":9.746794344808963},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":9.486832980505138},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.928203230275509},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":6.244997998398398},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.708203932499369},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":13.527749258468683},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":6.708203932499369},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":5.830951894845301},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":6.928203230275509},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/contribute/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/overview/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/resources/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.1622776601683795}},"df":17,"'":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":9},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":7}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}},"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907}},"df":5}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":3}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":4}}},"n":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":2}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.23606797749979}},"df":3}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.449489742783178}},"df":2}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":4}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1}}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":4,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":10}}}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3},"g":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.449489742783178}},"df":12,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.872983346207417}},"df":1}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.082762530298219}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":1,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":7}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":3}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.58257569495584}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}},"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0}},"df":1}},"m":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0}},"df":1},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":4}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":6},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}},"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":7}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.47213595499958}},"df":2,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":3}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":4}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":3}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":7.54983443527075},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":16,"'":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":7}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}}},"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":7,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":8},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.830951894845301}},"df":2,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":10,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":5}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":2.23606797749979}},"df":8}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":8}},"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":4},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":11,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":10},"x":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":11}},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":7.0710678118654755},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/contribute/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.1622776601683795}},"df":15,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"b":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":8,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":5}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":6}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":8.48528137423857},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.47213595499958}},"df":6,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0}},"df":1,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178}},"df":1}}}}}}},"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.5677643628300215},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":4,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989}},"df":1}}}}}}}}}}}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8}}},"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":6}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.477225575051661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"—":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":5}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}},"j":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":4}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":5,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":5.5677643628300215},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":10}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":7.54983443527075},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":5.830951894845301},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":15,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.605551275463989}},"df":1,"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/overview/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":10,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":13,"s":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":7}},"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":8.06225774829855},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":8.06225774829855},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":10.723805294763608},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.1622776601683795}},"df":17,"'":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3},".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903}},"df":1}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}}}}}}}}}}},"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":12}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":2.23606797749979}},"df":7,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":4}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7},"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":7}},"y":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":3},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":10,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":5}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":4}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2}}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":5}},"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":12,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/resources/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":14}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":12,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":5}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}},"w":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5}}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"v":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":3}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9,"i":{"docs":{},"df":0,"z":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903}},"df":7,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7}}}},"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":2,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"c":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"9":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}},"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772}},"df":1}}}}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4},"p":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.0}},"df":5}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":6}}}},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10}}},"e":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":8}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":5.477225575051661},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.557438524302},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.744562646538029},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.48074069840786},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":9.899494936611665},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.0}},"df":16,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":13}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":12}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":7,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"v":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":5}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.4031242374328485},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":2}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907}},"df":2}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":5}}}}}}}}},"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":2}}}}}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.7416573867739413}},"df":5,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}},"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":14}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":5}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":4}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":11,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":5,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/contribute/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":15}}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":1}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}}}},"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":8,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":8,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}},"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":4}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":9}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.744562646538029},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.082762530298219},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":10,"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":5}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11,"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":10}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":4}},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":6}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":5}},"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":5},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989}},"df":2,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}}}}}},"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}},"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}},"n":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1,"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":3}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":9.539392014169456},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":8}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":4}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9}}},"y":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":2,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178}},"df":5}}}},"z":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}}}}}},"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":2}}},".":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}},"1":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.656854249492381},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":11}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":9,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":10}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979}},"df":9},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":5}}}}}}}},"d":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":3},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":11}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":6,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}}},"v":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}},"m":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979}},"df":2,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}}}}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":7}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":6}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":14}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":5}}}}},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":7,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":10}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":12,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":6.708203932499369},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":7.681145747868608},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":9,"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":4,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}},"q":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":8}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":7}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795}},"df":2,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":7.54983443527075},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":3.0},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951}},"df":11,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":6}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795}},"df":1,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0}},"df":1}}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0}},"df":1}}}}}}}},"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":7.54983443527075},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":4}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979}},"df":13,"t":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6}}},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":5}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2},"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"v":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":5}}}},"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":5}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":6}},"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.557438524302},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":8.06225774829855},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":14}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}},"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":6}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":14}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":10},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10}},"n":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8}},"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":7}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":6}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":3}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":8.888194417315589},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":11}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":12,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":6.4031242374328485},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.4031242374328485},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":8.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":13,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":8,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":7.3484692283495345},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":5,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907}},"df":1}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}},"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}},"f":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1},"1":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2},"6":{"docs":{},"df":0,"4":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":2}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":5,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":4,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":6}}}}},"o":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":2}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":15}}}},"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}},"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.744562646538029},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":11.045361017187261},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.324555320336759},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":12,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}}}}}}},"'":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795}},"df":1}}}}}}}}}}}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":8,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":2}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903}},"df":1}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554}},"df":1,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}},"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6},"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979}},"df":2}}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.744562646538029},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772}},"df":1}},"x":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":7}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2},"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":9}}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}},"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":2}},"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1},"b":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.477225575051661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.744562646538029},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":14}}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3},"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772}},"df":6}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":6}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":14,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0}},"df":1}}}}}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":13,"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":4}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":10,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}}}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6}},"m":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":9.16515138991168},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.0}},"df":17,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":6,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":4}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":9}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":7,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":11}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":4}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951}},"df":2}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":6,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6}},"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3},"n":{"docs":{},"df":0,"ç":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}}},"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":2}}}}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":3}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":2,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.7416573867739413}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":3}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.8284271247461903}},"df":3}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}}},"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":4}},"w":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}},"—":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":8,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":14,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0}},"df":1}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.164414002968976},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":8.246211251235321},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903}},"df":7,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903}},"df":1}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":2}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.5677643628300215}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}},"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":5,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":4}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903}},"df":1}}}}},"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.1622776601683795}},"df":2}}}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544}},"df":1,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795}},"df":1}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":9,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}},"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":2}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":2}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":1}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6,"l":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.1622776601683795}},"df":4}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}},"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}},"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1},"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}},"v":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":3}}},"y":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":5}},"p":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":15,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903}},"df":4}}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":3},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":4}},"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":3}},"x":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}}}}}},"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":12}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5},"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":6},"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":4}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":5},"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":7,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":4}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}},"t":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":12.12435565298214},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":7,"l":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.69041575982343}},"df":1},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.196152422706632}},"df":1,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0}},"df":1}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.358898943540674}},"df":1,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1},"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3},"v":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}},".":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4},"/":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}},"6":{"docs":{},"df":0,"4":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":2}},"b":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":7,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9}}}}}}},"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":5,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}},"n":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":11.704699910719626},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.324555320336759},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":8.366600265340756},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":9.433981132056603},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":12.806248474865697},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":15.132745950421556},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":5.477225575051661},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":6.928203230275509},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":6.164414002968976},"https://www.contextgeneric.dev/overview/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":4.58257569495584}},"df":15,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":2,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":13,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5}}}}}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":7,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":13}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":13},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}},"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}}}}}},"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":5}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":4}}}},"x":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"0":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":4}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5}}}}}},"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":3}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979}},"df":5}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":8,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.082762530298219},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.605551275463989}},"df":8,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544}},"df":2}}},".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178}},"df":2}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178}},"df":8},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":14},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":12}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979}},"df":7}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":9},"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":3}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}}}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":14,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":11,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}}}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":5}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5},"l":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"h":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":2}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":3,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2},"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":3,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}},"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6},"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3},"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":5,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}},"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":8}}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979}},"df":3}},"’":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772}},"df":1}},"e":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}}}},"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1},"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":7}},"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}},"y":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"b":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5}}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":3}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":11}}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":3,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":10},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772}},"df":2}}}},"y":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5}}},"z":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":6},"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1},"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":11}},"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}},"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3},"f":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":6}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"z":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":2,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5,"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584}},"df":2},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178}},"df":4}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.082762530298219},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.855654600401044},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":15},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":9}}}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":4,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":10},"y":{"docs":{},"df":0,"’":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":6}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":5}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":3}}}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":10}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6},"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":5}},"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.477225575051661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.358898943540674}},"df":1,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":10,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":3,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":4}}},"l":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":2,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":3}},"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":4}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":3},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":3}}},"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.5677643628300215},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.5677643628300215},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178}},"df":9}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":8}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979}},"df":9,"u":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":5}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}},"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}}},"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}},"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":5}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.855654600401044},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":6.324555320336759},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.1622776601683795}},"df":15,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951}},"df":9,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":8}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":15}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}},"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":2}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10}}}},"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":9,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}},"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0}},"df":1,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":2}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":2}}}},"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.744562646538029},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.196152422706632}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1}}},"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.291502622129181}},"df":1}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951}},"df":1}}},"y":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":11}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2,"u":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":2}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2},"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":5.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.0}},"df":5}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":6,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":2}}}}}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":2}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2}}}},"w":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":12}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951}},"df":5}},"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951}},"df":6}}}},"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7},"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":9,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.324555320336759},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":12,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.123105625617661}},"df":3}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.8284271247461903}},"df":4}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":7.14142842854285},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":17,"o":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":4}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":7}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}},"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2,"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":12}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":3}}}}},"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.656854249492381}},"df":1,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.0}},"df":1}}}}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":2}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.0}},"df":12,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0}},"df":5}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}},"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":11,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.4031242374328485},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.6457513110645907}},"df":13}},"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":5}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":4}}}}}}}}}},"w":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.708203932499369},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":16,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":1}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":9}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":7,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":3}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}},"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}},"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2},"m":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}}},"w":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":13}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":5}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":6}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":4}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":2}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":4}}}}},"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":5}}},"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":12,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}}},"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9},"g":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":3}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979}},"df":3}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.656854249492381},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.5677643628300215},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":11,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979}},"df":1}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":3}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907}},"df":8,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":5}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"z":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10}}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":7}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":4,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1},"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":8,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":10}}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}}}}}}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":1,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0}},"df":3}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":5}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":11,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":5}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979}},"df":2,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.4031242374328485},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.708203932499369},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0}},"df":1}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413}},"df":1}}}}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":6,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":8,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}},"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":15}}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":4}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.605551275463989}},"df":7,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":3,"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":2,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6},"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}}},"y":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}},"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.0}},"df":2,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}},"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":7}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":5}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1},"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":13}}}},"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":12,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":12}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":11}}}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772}},"df":1}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":4}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0}},"df":1}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}},"i":{"docs":{},"df":0,"x":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":3}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":9}},"r":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":4}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":7.280109889280518},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.8284271247461903}},"df":5,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.0}},"df":2}}}}}}}},"a":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"b":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"c":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}},"o":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0}},"df":10}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":2}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":10,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":2,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":2}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":11,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":7}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":5.916079783099616},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":11.874342087037917},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":14,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1},"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.7320508075688772}},"df":15,"'":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":4}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}},"o":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":8.602325267042627},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.324555320336759},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":7.280109889280518},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":8.54400374531753},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":11.575836902790225},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":3.3166247903554}},"df":17,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"—":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"{":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"}":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"x":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907}},"df":2}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2},"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":2.0}},"df":4}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":6,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":6}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}},"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1},"z":{"docs":{},"df":0,"z":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":4}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}}},"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2}}}}}}}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":2}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":4},"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":3}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":2}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951}},"df":5,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6},"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":8}},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5}},"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":11,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"z":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10}}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2},"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":3}},"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2}}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":7.280109889280518},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.7416573867739413}},"df":8}},"v":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178}},"df":4}}}},"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.6332495807108},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":7}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":5,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":8,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":2}}}}}}}},"y":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":13}},"v":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":7}},"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":10,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":11,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.928203230275509}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}},".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1},"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":2}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":5}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":9,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":4}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":14}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":2}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}},"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":8}},"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":2.0}},"df":4}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":5}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772}},"df":1,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":10,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1},"2":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":5}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":1}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.656854249492381},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":11,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":7}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":5}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":2,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}}}}}}},"f":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}},"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}},"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}},"w":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0}},"df":4}},"t":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.1622776601683795}},"df":2}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":7}},"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.656854249492381},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":3.605551275463989}},"df":11}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":7.810249675906654},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":3.0},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":17,"#":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}},"'":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/overview/":{"tf":2.6457513110645907}},"df":5},"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":3}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6}}}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.0}},"df":9,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.6457513110645907}},"df":10}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":6}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":4}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":6}}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":8}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":3}}}}},"d":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":3}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7}}}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":7},"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}},"f":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":2}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":5.0}},"df":4,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772}},"df":3},"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":8.18535277187245},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.242640687119285}},"df":4,"e":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}},"_":{"docs":{},"df":0,"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903}},"df":1,"'":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":10.04987562112089},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0}},"df":1}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178}},"df":1}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903}},"df":1}}}}}}}}}}},"f":{"docs":{},"df":0,"c":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"9":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907}},"df":1}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":3,"s":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}},"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":7}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":11}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"2":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1,"5":{"docs":{},"df":0,"6":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":7.416198487095663},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":6,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.0}},"df":2}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":2.0}},"df":9}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":5}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}},"n":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":7,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":2},"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":3}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":9}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0}},"df":7,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":9,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":11}}}}}}}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":10,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.744562646538029}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795}},"df":1,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":8},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":7,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":4},"f":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1},"z":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":5}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"w":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}}}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3},"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}},"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4},"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}},"r":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"p":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0}},"df":1}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":10}},"f":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.23606797749979}},"df":11,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":11}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":3}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.7320508075688772}},"df":4,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":2.0}},"df":2}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3}}}}},"q":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.872983346207417}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":2}},"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":4}},"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}},"g":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":5}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0}},"df":8}}}}},"r":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3},"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":12,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":5,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":8,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":4}},"y":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}},"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1},"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":13}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":2}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":8}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":4}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":4}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":8,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.324555320336759},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":12,"u":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":8}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":3}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":2}},"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":2},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178}},"df":1}}}},"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903}},"df":1,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}}}}}},"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.8284271247461903}},"df":14}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":6}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}},"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661}},"df":2,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.196152422706632},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":15}},"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":7}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":2},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":3}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":3}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178}},"df":1}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":7,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"!":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}}}}}},"c":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178}},"df":4,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":2}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"x":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":8.18535277187245},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":10,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":5.477225575051661},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772}},"df":6}},"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2}}},"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.0}},"df":3,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":10,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}},"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":2}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":7}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951}},"df":1}},"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":5},"q":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":10}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":4,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10}},"t":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":4}},"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":4},"b":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":3}}},"y":{"docs":{},"df":0,"'":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3},"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":5}},"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":3}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":10}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":5,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":4}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":14,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":3}}}}}}}},"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":3,"m":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":4,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":4}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/contribute/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":13,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1,"a":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":6}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907}},"df":1}}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951}},"df":2,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178}},"df":2}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0}},"df":1}}}},"m":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":3}},"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":7,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6,"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951}},"df":5}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6}}}},"y":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":3},"k":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":2,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":6,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1},"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":8.246211251235321},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":6.708203932499369},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":8.831760866327848},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":9.433981132056603},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":9.433981132056603},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":5.830951894845301},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":8.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":5.830951894845301},"https://www.contextgeneric.dev/overview/":{"tf":5.830951894845301},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":4.0}},"df":15,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":3}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":5}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0}},"df":1}},"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178}},"df":2,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":6}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3},"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}},"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":7}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":9}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":4.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":9}},"y":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772}},"df":1,"p":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":9.055385138137417},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":6.4031242374328485},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":9.848857801796104},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":10.583005244258363},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":11.832159566199232},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":11.874342087037917},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":4.898979485566356},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/overview/":{"tf":5.0},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.6457513110645907}},"df":16,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.7320508075688772}},"df":1}},"}":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":9}}}}},"u":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"4":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}},"8":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":8}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.872983346207417},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/resources/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":13}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}},"q":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178}},"df":4}},"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":4},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}},"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":2}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":7}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":1}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":2}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":7}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903}},"df":1}}}}},"p":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":12,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":4}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":15,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.6457513110645907}},"df":1}}}}}}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":2}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":2}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":2}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1},"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903}},"df":1}},"s":{"docs":{"https://www.contextgeneric.dev/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":9.38083151964686},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":5.0990195135927845},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":7.810249675906654},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":7.937253933193772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":7.681145747868608},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":10.908712114635714},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":13.152946437965905},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":7.745966692414834},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/contribute/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/resources/":{"tf":2.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":4.358898943540674}},"df":17,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}},"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":5}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":2}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"h":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":13},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":4}}},"—":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":5}}},"x":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}},"v":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951}},"df":2}}},"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0}},"df":1},"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}},"5":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}},"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.4641016151377544}},"df":2}}}}},"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":7}},"u":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":7.211102550927978},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.69041575982343},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.58257569495584},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":6.244997998398398},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":8.717797887081348},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.656854249492381},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":6.324555320336759},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.0}},"df":12,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}},"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.23606797749979}},"df":3}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.7416573867739413}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":3}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}},"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":13.601470508735444},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178}},"df":9,"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"u":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":12}}}}},"e":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":3,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":6}}},"i":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772}},"df":9,"f":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":5}}},"s":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":4.358898943540674},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951}},"df":10}}},"u":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":9},"b":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":3}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":5.291502622129181},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":5.5677643628300215},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.1622776601683795}},"df":6}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.4641016151377544}},"df":1}}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":5,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":7,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.4641016151377544},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":10}},"r":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"y":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":4.123105625617661},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":2.23606797749979}},"df":12}},"e":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":2}},"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.3166247903554}},"df":1},"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.0}},"df":4}},"b":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903}},"df":2,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4}}}},"e":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}},"l":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":8}},"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}}},"’":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951}},"df":3}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3},"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":5}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"'":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1},"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":2}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":11}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}},"’":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":3,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.782329983125268},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":2.449489742783178}},"df":14}},"s":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1},"h":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951}},"df":4}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":5.385164807134504},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/contribute/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772}},"df":11}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":3.7416573867739413},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.795831523312719},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/contribute/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/overview/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.4142135623730951}},"df":16}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979}},"df":1,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"!":{"docs":{},"df":0,"[":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":5},"k":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":4.47213595499958},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":6.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":6.244997998398398},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/contribute/":{"tf":2.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":15,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":3}}}}}},"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/resources/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.7320508075688772}},"df":13}},"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.0}},"df":3}},"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":4}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772}},"df":1}},"’":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":2.0}},"df":10,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":3.3166247903554},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":7}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":3.605551275463989},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":3.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":2.6457513110645907},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":3.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":4.242640687119285},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":2.449489742783178},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/contribute/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/overview/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":14},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.23606797749979},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":10}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":3}}}}},"y":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":2.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.7320508075688772},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":5}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":2.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":5}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":3.1622776601683795}},"df":1}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":2.8284271247461903},"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":4},"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}},"’":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":3}},"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951}},"df":2},"v":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}}}},"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0},"https://www.contextgeneric.dev/overview/":{"tf":1.4142135623730951}},"df":4}}}}}},"title":{"root":{"docs":{},"df":0,"1":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1},"2":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1},"3":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1},"4":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}},"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":10}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/contribute/":{"tf":1.0}},"df":1}}}}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":6}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":2}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":3}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":4}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/overview/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://www.contextgeneric.dev/":{"tf":1.0},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":6}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://www.contextgeneric.dev/resources/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"n":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":5}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.4142135623730951},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://www.contextgeneric.dev/tutorials/":{"tf":1.0},"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":2}}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"tf":1.0},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0},"https://www.contextgeneric.dev/blog/hypershell-release/":{"tf":1.0}},"df":5}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"tf":1.0}},"df":1},"1":{"docs":{"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"tf":1.0}},"df":1}}}}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://www.contextgeneric.dev/tutorials/hello/":{"tf":1.0}},"df":1}}}}}}}},"documentStore":{"save":true,"docs":{"https://www.contextgeneric.dev/":{"body":"Announcement\nI am excited to announce the release of cgp-serde, a modular serialization library for Serde that leverages the power of Context-Generic Programming.\nRead the announcement blog post to find out more.\n\nQuick Introduction\nContext-Generic Programming (CGP) is a modular programming paradigm that enables you to bypass the coherence restrictions in Rust traits, allowing for overlapping and orphan implementations of any CGP trait.\nYou can adapt almost any existing Rust trait to use CGP today by applying the #[cgp_component] macro to the trait definition. After this annotation, you can write named implementations of the trait using #[cgp_impl], which can be defined without being constrained by the coherence rules. You can then selectively enable and reuse the named implementation for your type using the delegate_components! macro.\nFor instance, we can, in principle, annotate the standard library’s Hash trait with #[cgp_component] like this:\n\nThis change does not affect existing code that uses or implements Hash, but it allows for new, potentially overlapping implementations, such as one that works for any type that also implements Display:\n\nYou can then apply and reuse this implementation on any type by using the delegate_components! macro:\n\nIn this example, MyData implements the Hash trait by using delegate_components! to delegate its implementation to the HashWithDisplay provider, identified by the key HashProviderComponent. Because MyData already implements Display, the Hash trait is now automatically implemented through CGP via this delegation.\n\nCurrent Status\nAs of 2025, it is important to note that CGP remains in its formative, early stages of active development. While the potential is genuinely promising, it still has several inevitable rough edges, particularly in key areas such as comprehensive documentation, mature tooling, streamlined debugging techniques, robust community support, and overall ecosystem maturity.\nConsequently, embracing CGP for your mission-critical, serious projects comes with inherent challenges, and you should be advised to proceed at your own discretion and risk. The primary risk you face is not strictly technical, but rather stems from the current limited support available when you inevitably encounter difficulties while learning or attempting to apply CGP in production.\nAt this pioneering stage, CGP is an ideal fit for early adopters and enthusiastic potential contributors  who are eager to experiment with the paradigm and actively help to shape its powerful future.\n\nGetting Started\nEven though the CGP project is officially still less than one year old, some of the initial documentation and resources you might find have already become slightly outdated, or they have been gracefully superseded by more intuitive and modern patterns. Nevertheless, this section is an attempt to provide you with the very best and most current guidance on how you can effectively begin to learn more about CGP.\nBlog Posts\nThe most accurate and up-to-date resources concerning CGP are currently available in the form of our insightful blog posts. Specifically, we recommend that the blog posts starting from the v0.6.0 release onward  will give you a significantly more concise and modern explanation of precisely what CGP is all about.\nHello World Tutorial\nThe hands-on Hello World Tutorial provides a high-level and clear walkthrough of various fundamental CGP features by using a familiar, simple hello-world style example.\nBook\nIf your preference is to rigorously understand CGP from its first principles, without relying on the specific implementations within the cgp crate, your best approach is to dive into our comprehensive book, Context-Generic Programming Patterns. This resource provides a deep, thorough guide to understanding the complex inner workings of CGP.\nPlease note that this book has not been updated for a while, and you might consider skipping the book entirely if your primary goal is to start using CGP quickly with the absolute minimal learning curve!\nResources\nMake sure to check out the dedicated Resources page, which contains more supplementary materials and various learning tools to help you get up to speed with CGP.\n","id":"https://www.contextgeneric.dev/","title":"Context-Generic Programming"},"https://www.contextgeneric.dev/blog/":{"body":"Blog\n","id":"https://www.contextgeneric.dev/blog/","title":"Blog"},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"body":"Preface\nThis is a companion blog post for my RustLab presentation titled How to Stop Fighting with Coherence and Start Writing Context-Generic Trait Impls.\nOverview\nI am excited to announce the release of cgp-serde, a modular serialization library for Serde that leverages the power of Context-Generic Programming (CGP).\nIn short, cgp-serde extends Serde’s original Serialize and Deserialize traits with CGP, making it possible to write overlapping or orphaned implementations of these traits and thus bypass the standard Rust coherence restrictions.\nFurthermore, cgp-serde allows us to leverage the powerful context and capabilities concepts in stable Rust today. This unlocks the ability to write context-dependent implementations of Deserialize, such as one that uses an arena allocator to deserialize a 'a T value, a concept detailed in the proposal article.\nQuick intro to Context-Generic Programming\nFor those readers new to the project, here is a quick introduction: Context-Generic Programming (CGP) is a modular programming paradigm that enables you to bypass the coherence restrictions in Rust traits, allowing for overlapping and orphan implementations of any CGP trait.\nYou can adapt almost any existing Rust trait to use CGP today by applying the #[cgp_component] macro to the trait definition. After this annotation, you can write named implementations of the trait using #[cgp_impl], which can be defined without being constrained by the coherence rules. You can then selectively enable and reuse the named implementation for your type using the delegate_components! macro.\nFor instance, we can, in principle, annotate the standard library’s Hash trait with #[cgp_component] like this:\n\nThis change does not affect existing code that uses or implements Hash, but it allows for new, potentially overlapping implementations, such as one that works for any type that also implements Display:\n\nYou can then apply and reuse this implementation on any type by using the delegate_components! macro:\n\nIn this example, MyData implements the Hash trait by using delegate_components! to delegate its implementation to the HashWithDisplay provider, identified by the key HashProviderComponent. Because MyData already implements Display, the Hash trait is now automatically implemented through CGP via this delegation.\nIf you are eager to learn more about CGP, please check out the project homepage for all the details. For now, let us return to examine the new features introduced in cgp-serde.\n\nContext-Generic Serialization Traits\nThe key highlight of cgp-serde is its introduction of context-generic versions of the Serde traits. First, the Serialize trait is redefined as follows:\n\nCompared to the original Serialize trait, cgp-serde provides the CanSerializeValue CGP trait, which moves the original Self type from Serialize to an explicit generic parameter named Value. The Self type in CanSerializeValue now represents a context type, which can be used for dependency injection. The serialize method also accepts an extra &amp;self value, making it possible to retrieve additional runtime dependencies from this context.\nIn a similar manner, cgp-serde defines a context-generic version of the Deserialize trait as follows:\n\nAnalogous to CanSerializeValue, the CanDeserializeValue trait moves the original Self type in Deserialize to become the Value generic parameter. This deserialize method similarly accepts an additional &amp;self value, which can be utilized to supply runtime dependencies, such as an arena allocator.\nProvider Traits\nIn addition to having the extra Context parameter as the Self type, both CanSerializeValue and CanDeserializeValue are annotated with the #[cgp_component] macro, which is the mechanism that unlocks additional CGP capabilities on these traits.\nThe provider argument to #[cgp_component] automatically generates the provider traits called ValueSerializer and ValueDeserializer. These traits are the ones you will use for implementing named serialization implementations that can bypass the coherence restrictions.\nConversely, in CGP, we refer to the original traits CanSerializeValue and CanDeserializeValue as the consumer traits. The general rule of thumb is that a CGP component is used through its consumer trait but implemented using its provider trait.\nUseDelegate Provider\nOur CGP trait definitions also include a second derive_delegate entry within the #[cgp_component] macro. This entry generates a specialized UseDelegate provider that enables static dispatch of provider implementations based on the specific Value type. The practical application and use of UseDelegate will be explained in greater detail later in this article.\n\nOverlapping Provider Implementations\nCompared to the original Serde definitions of Serialize and Deserialize, the greatest improvement offered by CanSerializeValue and CanDeserializeValue is the ability to define overlapping and orphan implementations of the trait. Let us now examine a few concrete examples of how this crucial feature works.\nSerialize with Serde\nTo maintain full backward compatibility with the existing Serde ecosystem, the most straightforward implementation of ValueSerializer utilizes Serde’s own Serialize trait to perform serialization. This is implemented within cgp-serde as shown below:\n\nFirst, we define a unit struct named UseSerde, which acts as the name for our specific provider implementation. We then define a blanket trait implementation annotated with #[cgp_impl], explicitly setting UseSerde as the provider type.\nFollowing this, we define our implementation on the ValueSerializer provider trait, rather than the CanSerializeValue consumer trait. This implementation is defined to work with any Context and Value types, provided that the target Value implements the original Serialize trait. Inside our serialize implementation, we ignore the &amp;self context and simply call Serialize::serialize on the value.\nWhile this implementation itself is not remarkable, it crucially highlights that cgp-serde is fully compatible with the standard Serde crate. Consequently, if we wish to reuse an existing Serialize implementation for a given value type, we can simply utilize UseSerde to serialize that type through CanSerializeValue.\nAnother important detail to notice is that our blanket implementation for UseSerde works universally for any Context and Value types satisfying the bounds. As we will soon see, we can define more than one such blanket implementation using CGP.\nSerialize with Display\nJust as we can implement ValueSerializer for any Value type that implements Serialize, we can also implement ValueSerializer for any Value type that implements the Display trait. This alternative behavior is implemented by cgp-serde as follows:\n\nIn the very first line, the inclusion of the new keyword in #[cgp_impl] instructs the macro to automatically generate the necessary provider struct definition for us, so that we don't have to define them manually:\n\nOur blanket implementation for SerializeWithDisplay works with any Value type that implements Display. Crucially, this implementation also requires the Context type to implement CanSerializeValue&lt;String&gt;. This means we use the Context to look up the serialization implementation for String and then employ it within our current provider implementation.\nInside the method body, we first use to_string to convert our value into a standard string, and then we call self.serialize to serialize that string value using the context's CanSerializeValue&lt;String&gt; implementation.\nTo appreciate what is enabled by this implementation, consider how this might be implemented directly on Serde's Serialize trait:\n\nIf you have any experience with Rust traits, you will immediately recognize that it is practically impossible to define this blanket Serialize implementation in Serde. More accurately, you are restricted to having at most one such blanket implementation of Serialize. Because of this restriction, it is extremely difficult to justify why this version, which uses the Value: Display bound, should be the chosen global implementation for Serialize.\nIn stark contrast, both UseSerde and SerializeWithDisplay contain overlapping implementations of ValueSerializer across both the Context and Value types. In vanilla Rust, this would be outright rejected, as it is perfectly possible, for instance, to have a Value type that implements both Serialize and Display. However, this overlapping is seamlessly enabled in CGP by utilizing the provider trait ValueSerializer and the powerful #[cgp_impl] macro. We will elaborate on the underlying mechanism in later sections.\nRegarding the specific use case of string serialization, it might not seem remarkable that we must look up how to serialize String from the context, given that Serde already has an efficient Serialize implementation for String. Nevertheless, this successfully demonstrates the potential to replace the serialization implementation of String with a custom one. We will later see how this override capability is highly useful for serializing Vec&lt;u8&gt; bytes.\nSerialize Bytes\nJust as we can serialize any Value that implements Display, we can also define a way to serialize any Value that contains a byte slice directly into bytes. This behavior is implemented by cgp-serde as follows:\n\nOur SerializeBytes provider can successfully work with any Value type that implements AsRef&lt;[u8]&gt;. Crucially, this includes Vec&lt;u8&gt;, which also implements AsRef&lt;[u8]&gt;. This is significant because, unlike the constraints imposed by the standard Serialize trait, we can now potentially override the serialization implementation of Vec&lt;u8&gt; to explicitly use SerializeBytes, ensuring it is serialized as raw bytes instead of a list of u8 values.\nSerialize Iterator\nSimilar to how we implemented SerializeWithDisplay, we can define a SerializeIterator provider that works with any Value type that implements IntoIterator:\n\nOur implementation includes a higher-ranked trait bound (HRTB) for&lt;'a&gt; &amp;'a Value: IntoIterator, which permits us to call into_iter on any reference &amp;Value. Likewise, we introduce a HRTB for Context to implement CanSerializeValue for the associated Item type yielded by the iterator produced from &amp;Value.\nWe have omitted the method body of SerializeIterator for brevity. Behind the scenes, it utilizes serialize_seq to handle the serialization of each item.\nThe key takeaway here is that the serialization of the iterator's Items is performed via the consumer trait CanSerializeValue provided by Context. This grants us the ability to deeply customize how the Item itself is serialized, without being restricted to a fixed Serialize implementation.\nAnother critical observation is that both SerializeBytes and SerializeIterator are inherently overlapping on the Vec&lt;u8&gt; type. This perfectly illustrates how the serialization behavior of Vec&lt;u8&gt; is determined entirely by which specific provider is wired into a particular CGP context. We will examine this topic further in later sections.\n\nModular Serialization Demo\nTo fully demonstrate the modular serialization capabilities provided by cgp-serde, we will set up a practical example involving the serialization of encrypted messages. This is where you see the power of CGP in action.\nSuppose we are developing a naive encrypted messaging library, defining the following core data types:\n\nWe start with an EncryptedMessage struct containing message metadata and encrypted data. These messages are grouped within a MessagesByTopic struct, which also includes an encrypted topic string. Finally, the MessagesArchive struct holds messages grouped by multiple topics, along with a password-protected decryption key.\nThe key technical challenge we aim to solve is how to serialize this message archive into different JSON formats, depending on the specific application consuming the data. Specifically, we need to support the following two formats simultaneously:\n\n\nApplication A: Serializes bytes as hexadecimal strings and dates using the RFC 3339 format.\n\n  Click here for example serialization for App A\n\n\n\n\nApplication B: Serializes bytes as Base64 strings and dates using Unix timestamps.\n\n  Click here for example serialization for App B\n\n\n\n\nIn a real-world scenario, you might have many more applications using your library, and your data types could have numerous fields requiring customization. With the original design of Serde, achieving this deep level of customization across nested data types would be quite challenging. Typically, a type like EncryptedMessage would have a single, fixed Serialize implementation. Even Serde’s powerful remote derive feature would require defining ad-hoc serialization for every data type involved.\nWiring of serializer components\nWith cgp-serde, it is straightforward to define custom application contexts that can deeply customize how each field in our data structures is serialized. For instance, we can define an AppA context for Application A like this:\n\nIn the code above, we use the delegate_components! macro to create effective type-level lookup tables that configure the specific provider implementations used by AppA. The component key, ValueSerializerComponent, tells the compiler that we are configuring the provider for the CanSerializeValue trait within AppA.\nThe value assigned to this entry is UseDelegate, followed by an inner table named SerializerComponentsA. This inner table is used for static dispatch of the provider implementation based on the Value type being serialized. For example, the key Vec&lt;u8&gt; is mapped to the value SerializeHex, indicating that the SerializeHex provider is used whenever Vec&lt;u8&gt; needs to be serialized.\nThe delegate_components! macro also includes shorthands for mapping multiple keys to the same value. For instance, both u64 and String are dispatched to the generic UseSerde provider, which is neatly grouped using an array syntax. We can also set generic keys in the table, such as mapping all &amp;'a T references to the SerializeDeref provider.\nWe will cover more details about the mechanics of this type-level lookup table in later sections. For now, let us look at how we implement AppB to perform the serialization required for Application B:\n\nIf we meticulously compare the delegate_components! entries in both AppA and AppB, we discover that the only substantive differences are in the following entries:\n\nThe serialization for Vec&lt;u8&gt; is handled by SerializeHex in AppA, but is switched to SerializeBase64 in AppB.\nThe serialization for DateTime&lt;Utc&gt; is handled by SerializeRfc3339Date in AppA, but is replaced by SerializeTimestamp in AppB.\nAn additional serialization entry for i64 is included for AppB to specifically handle the serialization of Unix timestamps in i64 format.\n\nAs we can clearly observe, changing the serialization format only required a few lines of configuration changes in the wiring. This dramatically demonstrates the flexibility of CGP to make application implementations highly configurable and easily adaptable.\nIn practice, there are further CGP patterns available for AppA and AppB to share their common delegate_components! entries through a powerful preset mechanism. However, we will omit those details here for brevity.\nSerialization with serde_json\nA key feature of cgp-serde is its continued backward compatibility with the existing Serde ecosystem. This means we can effortlessly reuse established libraries like serde_json to serialize our encrypted message archive payloads into JSON.\nHowever, since serde_json strictly operates on types that implement the original Serialize trait, cgp-serde provides the SerializeWithContext wrapper. This wrapper wraps the value to be serialized together with the application context, providing a context-aware implementation of Serialize. Using it, we can serialize our data to JSON like this:\n\nWe first use SerializeWithContext::new to wrap the application context and the target value together. We then pass this wrapper to serde_json::to_string, which accepts SerializeWithContext because it provides a wrapped Serialize implementation.\nSimilarly, we can generate the entirely different JSON output simply by using AppB as the application context:\n\nAs illustrated, cgp-serde makes it remarkably easy to customize the serialization of any field, regardless of how deeply it is nested within other data types. By merely changing the application context, we are able to generate JSON output in fundamentally different formats with minimal effort.\nDerive-free serialization with #[derive(CgpData)]\nBeyond the deep customization we have just explored, another critical feature to highlight is that there is virtually no need to use derive macros to generate any serialization-specific implementation for custom data types. If you look back at the definition of types like EncryptedMessage, you will notice that it only uses the general #[derive(CgpData)] macro provided by the base CGP library.\nBehind the scenes, #[derive(CgpData)] generates the necessary support traits for extensible data types, which enables our data types to naturally work with CGP traits like CanSerializeValue without requiring library-specific derivation. This is made possible, because CGP enables cgp-serde to implement a generic SerializeFields provider that can work with any struct that derives CgpData, without being restricted by the overlapping constraints.\nThis mechanism shows how cgp-serde fundamentally solves the orphan implementation problem: it avoids requiring library authors to derive library-specific implementations on their data types at all. For instance, our encrypted messaging library does not even need to include cgp-serde or serde as a dependency. As long as the library uses the base cgp crate to derive CgpData, we can serialize its data types using the SerializeFields provider.\nFurthermore, the use of extensible data types applies not only to the traits in cgp-serde. A general derivation of CgpData will automatically enable the library’s data types to work with other CGP traits in the same way they work with cgp-serde. Because of this universal applicability, CGP can shield library authors from endless external requests to apply derive macros for every popular trait on their data types, simply to work around the archaic orphan rules in Rust.\nFull Example\nThe complete working example of this customized serialization is available on GitHub.\n\nCapabilities-Enabled Deserialization Demo\nNow that we have demonstrated how cgp-serde enables highly modular serialization, let us turn our attention to how it unlocks new use cases for deserialization. Specifically, we will show how cgp-serde enables the use case explained in the context and capabilities proposal. We will demonstrate implementing a deserializer for the borrowed type &amp;'a T using an arena allocator that is retrieved via dependency injection from the context itself.\nCoordinate Arena\nTo illustrate the use of an arena deserializer, let us devise an example application: storing a massive quantity of 3D coordinates, perhaps for rendering complex 3D graphics. We can define our basic coordinate structure as follows:\n\nIn this demo, the Coord struct is minimal, but imagine its actual size is much larger. If we were to use Box&lt;Coord&gt; to allocate every coordinate on the heap, the frequent calls to Box::new(coord) could lead to severe memory pressure and fragmentation. Instead, we want to employ an arena allocator to allocate all coordinates into a single, fixed memory region. This setup allows all coordinates to be easily deallocated with a single operation when the function scope exits.\nWhen using arena allocators, our base coordinate value will be &amp;'a Coord, a borrowed type with a specific lifetime. We can then store these borrowed coordinates in other data structures, such as a cluster:\n\nWith our data structures defined, a major challenge emerges: how do we deserialize a cluster of coordinates from a format like JSON and ensure the coordinates are allocated using a custom arena allocator provided by us?\nArena Deserializer\nTo tackle the arena allocator use case, we will utilize the popular typed-arena crate, specifically leveraging its Arena type for memory allocation.\nFirst, we define an auto getter trait to retrieve an Arena from our context:\n\nThe HasArena trait is automatically implemented for any Context type, provided it derives HasField and contains an arena field of the type &amp;'a Arena&lt;T&gt;. The nested reference (&amp;&amp;'a) is required here, since #[cgp_auto_getter] by default returns a reference to a field value in the context, but our field value itself is an explicit reference &amp;'a Arena&lt;T&gt;.\nNext, we leverage HasArena to retrieve the arena allocator from a generic context within our ValueDeserializer implementation:\n\nWe define a new provider, DeserializeAndAllocate, which implements ValueDeserializer specifically for the borrowed &amp;'a Value type. To support this, it requires the Context to implement HasArena&lt;'a, Value&gt; to get the allocator &amp;'a Arena. Additionally, it also requires Context to implement CanDeserializeValue for the owned Value type, to perform the initial deserialization on the stack before moving it into the arena.\nInside the method body, we first use the context to deserialize an owned version of the value on the stack. We then call self.arena() to retrieve the arena allocator and use its alloc method to move and allocate the value onto the arena.\nAs you can see, with the generalized dependency injection capability provided by CGP, we are able to retrieve any necessary value or type from the context during deserialization. This effectively allows us to emulate the with clause in the seminal Context and Capabilities proposal and provide any required capability during the deserialization process.\nDeserialization Context\nUsing cgp-serde, defining a deserializer context that includes an arena allocator is refreshingly straightforward. We begin by defining the context structure as follows:\n\nOur App context is explicitly parameterized by a lifetime 'a. It contains an arena field that holds a reference to an Arena that lives for the duration of 'a, and is specialized for the object type Coord.\nThe explicit lifetime 'a is necessary here because the alloc method returns a &amp;'a Coord value that shares this same lifetime. By being explicit, we accurately inform the Rust compiler that the allocated coordinates will live exactly as long as 'a, which may outlive App itself.\nWe also derive HasField on App, which enables App to automatically implement HasArena&lt;'a, Coord&gt;. This is made possible, because the arena field in App matches the format expected by the blanket implementation generated by #[cgp_auto_getter].\nWith the App context defined, let us examine the component wiring for the ValueDeserializer providers:\n\nSimilar to the serialization lookup tables, here we are configuring the ValueDeserializer providers for App via the ValueDeserializerComponent key and the UseDelegate dispatcher. Notice that this table contains several keys with generic lifetimes, &lt;'a&gt;, reflecting the use of structs with explicit lifetimes.\nAs evident in the table, for the value types Coord and Cluster&lt;'a&gt;, we use a special provider called DeserializeRecordFields to deserialize the structs using the extensible data types facility derived from #[derive(CgpData)]. Crucially, for &amp;'a Coord, we select the DeserializeAndAllocate provider we defined earlier.\nError Handling\nBesides the ValueDeserializerComponent, our App context is also configured with error handling components provided by CGP. This is essential because we plan to use serde_json to deserialize the value, which may naturally return errors.\nFor simplicity, we choose to use the cgp-error-anyhow crate to handle errors using the highly flexible anyhow crate. In the entry for ErrorTypeProviderComponent, we use the UseAnyhowError provider to select the type anyhow::Error as the primary error type for App.\nSubsequently, in the entry for ErrorRaiserComponent, we use RaiseAnyhowError to correctly promote source errors, like serde_json::Error, into anyhow::Error using its standard From implementation.\nThis clearly demonstrates the flexibility afforded by CGP in error handling: the concrete error type is chosen by the application context, and it can also customize how each source error is gracefully handled.\nDeserializing JSON\nNow that the component wiring for App is complete, let us attempt to use serde_json to deserialize a JSON string. First, we create a mock JSON string representing a cluster of coordinates:\n\nNext, we instantiate our arena and the application context:\n\nIn the case of deserialization, there is a minor complication: we cannot directly use the simple serde_json::from_str with our App context. This is because unlike serialization, serde_json::from_str doesn't accept additional parameters that we can use to \"pass\" around the app value. Instead, cgp-serde works with the lower-level Deserializer implementation in serde_json, allowing us to pass serde_json's deserializer directly to the CanDeserializeValue::deserialize method, together with the app context.\nFortunately, these low-level implementation details are neatly abstracted away by cgp-serde, and all we need to do is call the convenient deserialize_json_string method on our App context:\n\nAs we can see, we have successfully utilized the custom arena allocator provided by our App context to perform the deserialization, resulting in a borrowed Cluster where the coordinates live in the arena.\nFull Example\nThe full working example of the arena allocator deserialization is available on GitHub.\n\nImplementation Details\nIn this section, we will delve into the underlying implementation details of CGP that make the impressive level of modularity in cgp-serde possible. For audiences who are new to Context-Generic Programming, this is your chance to quickly grasp the essential concepts of CGP required to confidently use cgp-serde.\nProvider Traits\nWhen the #[cgp_component] macro is applied to a consumer trait, such as CanSerializeValue, it automatically generates a companion provider trait called ValueSerializer. This generated trait looks like the following:\n\nCompared to the consumer trait CanSerializeValue, the provider trait ValueSerializer shifts the original Self type into a new Context generic parameter. Consequently, all references to self and Self are appropriately replaced with context and Context. The Self type in a provider trait is instead used as the provider name, which are the unique, dummy structs - like UseSerde or SerializeHex - that are defined and owned by the library module. This is the core trick: CGP circumvents Rust’s coherence restrictions by guaranteeing that we always own a unique provider type when implementing a provider trait.\nDesugaring of #[cgp_impl]\nThe ability to define overlapping provider implementations, such as UseSerde and SerializeWithDisplay, is achieved through the clever use of the ValueSerializer provider trait. While these implementations look like forbidden blanket implementations, a provider implementation like SerializeWithDisplay is actually desugared by the #[cgp_impl] macro into this form:\n\nAs clearly shown, #[cgp_impl] shifts the Context parameter away from the Self position to become the first generic parameter of ValueSerializer. The Self type for the implementation instead becomes SerializeWithDisplay, the unique dummy struct that we defined. Because the implementing library owns SerializeWithDisplay, the Rust compiler permits the trait implementation even if it is otherwise overlapping on the Context and Value types. This is the central mechanism that allows CGP to define both overlapping and orphan implementations. Next, we will examine how these provider implementations are statically wired to a concrete application context.\nType-Level Lookup Tables\nIn the serialization example for AppA, when the delegate_components! macro is invoked, it is conceptually equivalent to building a type-level lookup table for that context. This table effectively configures the dispatch mechanism at compile time:\nNameValue\nValueSerializerComponentUseDelegate&lt;SerializerComponentsA&gt;\n\nIn the example, the type-level table for AppA only contains one entry, with ValueSerializerComponent as the key. This entry is used by the CanSerializeValue trait to look up for the provider implementation.\nIn the entry value, the use of the new SerializerComponentsA { ... } constructs an inner table, SerializerComponentsA, which holds further mapping of providers based on the serialization value type:\nNameValue\n&amp;'a TSerializeDeref\nu64UseSerde\nStringUseSerde\nVec&lt;u8&gt;SerializeHex\nDateTime&lt;Utc&gt;SerializeRfc3339Date\nVec&lt;EncryptedMessage&gt;SerializeIterator\nVec&lt;MessagesByTopic&gt;SerializeIterator\nMessagesArchiveSerializeFields\nMessagesByTopicSerializeFields\nEncryptedMessageSerializeFields\n\nThis table is passed as the SerializerComponentsA type to UseDelegate, which performs the actual dispatch based on the value type.\nWhen the trait system must look up an implementation, such as for serializing Vec&lt;EncryptedMessage&gt;, it follows a precise, recursive path:\n\nThe system begins by checking if AppA implements CanSerializeValue&lt;Vec&lt;EncryptedMessage&gt;&gt;. This requires looking up the ValueSerializerComponent key in the AppA table.\nAppA's table returns UseDelegate&lt;SerializerComponentsA&gt;. This value must now implement ValueSerializer&lt;AppA, Vec&lt;EncryptedMessage&gt;&gt;.\nUseDelegate implements ValueSerializer by performing a secondary lookup on the SerializerComponentsA table, using Vec&lt;EncryptedMessage&gt; as the key.\nSerializerComponentsA returns the value SerializeIterator. This means SerializeIterator must now implement ValueSerializer&lt;AppA, Vec&lt;EncryptedMessage&gt;&gt;.\nFor SerializeIterator to satisfy this requirement, it requests a new constraint: that AppA must implement CanSerializeValue&lt;EncryptedMessage&gt;.\nThe entire lookup process is repeated from the beginning for the inner type, EncryptedMessage, until it eventually points to the concrete provider SerializeFields.\n\nThis table lookup process, while seem complicated, works conceptually similarly to how vtable lookups are performed for dyn traits in Rust and in object-oriented languages like Java. The fundamental difference, and a major selling point, is that CGP’s lookup tables are fully implemented at the type level. This means the tables are resolved entirely at compile time, resulting in zero runtime overhead.\nImplementation of Lookup Tables\nBehind the scenes, the delegate_components! macro constructs these type-level lookup tables using the DelegateComponent trait, which is defined by the base cgp crate as follows:\n\nIn essence, DelegateComponent allows any type to serve as a table. By implementing the trait, we effectively set a \"value\" (Delegate) for a specific \"key\" (Name) in that table. For instance, the ValueSerializerComponent entry in AppA is set through this implementation:\n\nSimilarly, the Vec&lt;EncryptedMessage&gt; entry in the SerializerComponentsA table is defined through the following implementation:\n\nCGP then generates essential blanket implementations on the consumer and provider traits. These implementations utilize the DelegateComponent entries to resolve the correct provider implementation at compile time.\nFor example, the initial lookup mechanism for the consumer trait CanSerializeValue is implemented via this blanket implementation:\n\nThe consumer trait CanSerializeValue is thus implemented for a context like AppA if AppA contains a lookup table entry where ValueSerializerComponent is the key and the resulting Delegate \"value\" successfully implements ValueSerializer.\nSimilarly, a blanket implementation is generated for ValueSerializer as follows:\n\nThe blanket implementation above looks almost identical as before, except that the delegation lookup is done on the Provider type. This essentially allows a provider to delegate its provider implementation to another provider.\nFollowing that, the special provider UseDelegate has the following blanket implementation:\n\nThis implementation shows that UseDelegate uses the Value type as the lookup \"key\" in a given components table, such as SerializerComponentsA.\nIf we carefully compare the three versions of the blanket implementations, we would observe that the key differences lie in which type is used as the type-level lookup table, and which type is used as the key for the lookup.\n\nFuture Work\nThe initial release of cgp-serde serves as a compelling proof of concept, demonstrating how CGP can be used to solve the coherence problem in Rust. While you can certainly begin experimenting with cgp-serde today for modular serialization in your applications, there are still a few rough edges that need polishing before it reaches the quality level suitable for mission-critical production use.\nThis section highlights the areas we plan to address, and what you might want to wait for before fully committing to cgp-serde for your main projects.\nSerialization providers for extensible variants\nCurrently, cgp-serde has implemented providers like SerializeFields and DeserializeRecordFields to enable datatype-generic serialization for any struct that uses #[derive(CgpData)]. This decoupling of serialization logic from data type definitions is key to reducing the derive bloat caused by orphan rule restrictions.\nHowever, the equivalent providers for Rust enums and extensible variants have not yet been implemented. This means that you cannot currently use the modular serialization features of cgp-serde to serialize enum types in your application. This limitation is purely due to time constraints; I was unable to dedicate enough time to finish the implementation for extensible variants before this initial release.\nHelpers for JSON deserialization\nAt the moment, cgp-serde only provides the deserialize_json_string helper method to deserialize a JSON string using a context. Crucially, I have not yet implemented other common helper methods, such as from_slice and from_value. If you need the functionality equivalent to these methods, you would currently have to study the internals of deserialize_json_string and write your own deserialization wrappers.\nThe need for additional wrappers during deserialization arises because functions like serde_json::from_str do not accept any argument where we can \"pass\" around the deserialization context. Therefore we must explicitly work around this by constructing library-specific deserializers like serde_json::Deserializer and then passing it along with the context to the CanDeserializeValue::deserialize method.\nFortunately, library functions like serde::from_str are generally lightweight wrappers around library-specific deserializers. This makes re-creating similar, easy-to-use helpers for cgp-serde a relatively straightforward task. The challenge here is simply a matter of time: I need to properly survey the common deserialization methods used in the wild and aim to support as many as possible. On the plus side, these wrapper implementations are low-hanging fruit and represent simple tasks for newcomers to contribute to the project. If you are interested in helping, please do submit a pull request!\nHelpers for other serialization formats\nJust as custom deserialization wrappers are required for serde_json, we will likely need similar wrappers for other popular serialization formats, such as toml.\nIn principle, serialization from cgp-serde should work almost immediately. If you use the SerializeWithContext wrapper with any serialization format, it should, theoretically, integrate seamlessly. However, this has not yet been thoroughly tested, so more verification is required. Assuming serialization works out of the box, the main task needed to support other formats will be implementing deserialization wrappers similar to what we have done for serde_json.\nDocumentation\nA significant area for improvement is documentation. Both CGP and cgp-serde are currently severely lacking in comprehensive documentation. To make cgp-serde truly usable for the broader community, we will need to write far more documentation and tutorials explaining how to effectively use it for modular serialization.\nWith my time being extremely limited, I will likely only prioritize documenting cgp-serde over further developing CGP if there is real, demonstrable demand from developers wanting to use it for their applications. While I strongly believe the modular serialization provided by cgp-serde will be incredibly useful, my experience with developing CGP suggests that the community may not yet fully grasp or care about modular serialization as much as I do. Therefore, if the use cases presented by cgp-serde are important to you, please communicate your feedback so I can properly prioritize my development efforts!\nPerformance benchmark\nSince cgp-serde exclusively employs static dispatch, I am highly confident that the serialization performance should align closely with the original serde implementation. However, I have not yet had the time to conduct a proper benchmark, so we currently lack concrete evidence of cgp-serde's performance characteristics.\nIn addition to validation, there are potential optimizations that could further boost cgp-serde's speed. Once proper benchmarking is done, I can apply targeted optimizations if any performance bottlenecks are clearly identified.\nThe primary point of contention in benchmarking will likely be the serialization and deserialization performance of struct fields. This is because cgp-serde uses extensible data types to provide a generic implementation of serialize and deserialize for any struct. In contrast, serde uses derive macros to generate specific implementations of Serialize and Deserialize tailored to each struct. The critical question, then, is whether our generic implementation can run as fast as the macro-generated, highly specific implementations.\nThere are a few reasons why the macro-generated implementation by serde might be faster, particularly during deserialization. serde generates a match statement on string literals to determine which field it needs to deserialize. Conversely, cgp-serde must perform a sequential string comparison of an incoming field key against each field's string tag and then choose the correct branch if a match is found. The Rust compiler can likely generate much more efficient, string-based pattern matching for serde.\nWe can only confirm if this gap exists by conducting a proper benchmark, specifically comparing scenarios like deserializing structs with many fields or fields with similar prefixes, to see if cgp-serde's performance significantly worsens. If the performance difference is substantial, I will dedicate time to optimizing it. But if the difference is negligible, the current implementation is likely good enough.\nOne potential optimization I have considered is building a similar fast string matching table lazily using LazyLock when the first deserialization call occurs. We would need to build this table at runtime because our generic code can only inspect one field at a time, making it impossible to generate the same multi-string-literal match statement as a macro.\nIn any case, if you are interested in benchmarking or optimizing cgp-serde, your contributions to the project are highly welcome!\n\nConclusion\nIn this article, we have provided a comprehensive preview of the powerful modular serialization features unlocked by cgp-serde. The most exciting part of this entire design is that almost nothing in cgp-serde is specifically engineered just for Serde or for serialization. Instead, everything you have learned here — from custom overlapping implementations to capabilities-enabled deserialization — is a direct result of the general design patterns offered by Context-Generic Programming for building any kind of application or library. This means you can easily take the same patterns used in cgp-serde and re-apply them to other traits and challenges within your own projects.\nIf this deep dive has piqued your interest in learning more about the fundamental concepts of CGP, please be sure to check out our project homepage. In particular, we encourage you to read our articles on how CGP can be used to solve the famous Expression Problem and how it enables the use of extensible records and variants in stable Rust. You can also explore how CGP is utilized to implement type-level DSLs, using shell scripting as a practical example domain-specific language.\nCGP is still in the early stages of development, so keep a close eye on the project's updates and progress. We are just getting started on redefining modularity in Rust!\n","id":"https://www.contextgeneric.dev/blog/cgp-serde-release/","title":"Announcing cgp-serde: A modular serialization library for Serde powered by CGP"},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"body":"The Beginning of a New Paradigm\nWelcome everyone! This blog post marks the launch of the context-generic programming (CGP) project,\nto introduce a new modular programming paradigm for Rust.\nA Quick Overview of Context-Generic Programming\nAs its name implied, CGP makes it possible to write context-generic programs that can work\nwith any context type in Rust, i.e. the type that we typically refer to as Self.\nCompared to regular generic programming, CGP supercharges how we can write generic programs,\nby lifting many restrictions imposed by Rust and its trait system. CGP alleviates the needs\nto explicitly specify all generic parameters by position, and allows them to be referenced\nsimilar to named parameters. CGP also makes it possible to specify overlapping and orphaned\ntrait instances, by introducing provider traits replace any reference to Self with\nan explicit Context generic type.\nCompared to object-oriented programming (OOP), CGP makes it possible to write Rust programs\nfollowing popular OOP patterns, such as inheritance and mixins, but in better ways that\nfit Rust's type system. With CGP, one can write highly expressive programs that may look similar\nto dynamic-typed programs, while ensuring that the programs remain type-safe at compile time,\nwithout any sacrifice to runtime performance.\nAs a new programming paradigm, CGP significantly changes how Rust programs can be written.\nBecause of this, CGP programs may look very different from regular Rust programs, and appear\nintimidating to even experienced Rust programmers. CGP introduces new programming concepts\nin the form of Rust macros, which makes it not as elegant as it could have been if we were\nto introduce them as native language constructs in Rust, or with a whole new programming language.\nHence, we can think of the current form of CGP as an experimentation for introducing new\nlanguage concepts into Rust, or for programming languages in the future.\nIt would take too much space of this blog post to give a full picture of how CGP works.\nThat would require dedication of an entire website, and several books to cover the entirety of CGP.\nIf you are new here, you should check out the CGP homepage for a proper introduction of CGP.\nInstead of rehearsing the full introduction, this blog post will cover some background about the\nproject, the current status, and what to expect from here on.\nHow It All Started\nMy name is Soares Chen, a.k.a. MaybeVoid,\nand I am the creator of CGP. Even though this project is still new to the public, it has been ongoing\nfor a while. The work for CGP first started at around July 2022, when I was working on the\nHermes IBC Relayer at Informal Systems.\nI started developing the techniques used in CGP to help writing large-scale generic applications in Rust.\nAt that time, the generic code in our code base all share a large monolithic trait called\nChainHandle,\nwhich contains dozens of methods that are hard to implement and also difficult to evolve. I then started\nexperimenting on using Rust traits with blanket implementations as a form of dependency injection to\nhide the constraints used on the implementation side. This way, a generic code can require the minimal\nsubset of dependencies that it needs, and can be reused by implementations that provide only the given subset\nof dependencies.\nAs time goes on, I developed more and more design patterns to help further modularize the code,\nwhich collectively form the basis for CGP. The work I done on Hermes also slowly gets decoupled\nfrom the main code base, eventually becoming its own project called\nHermes SDK. If you compare both codebases,\nyou may notice that the way context-generic programs are written in Hermes SDK is almost completely\ndifferent than the original Hermes, even though both implement the same functionality.\nCompared to the original version, we are able to extend and customize Hermes SDK much more easily\nto support projects with different very requirements, including host environments, APIs, encodings,\ncryptographic primitives, protocols, concurrency strategy, and many more.\nBut even before my work at Informal Systems, I have spent over 20 years of my programming journey\nexperimenting on various design patterns to enable modular programming. My previous projects include\nthe implementation of a dynamic-typed component system in JavaScript,\nand an extensible\nalgebraic effects library in Haskell using implicit parameters.\nCompared to my previous attempts, I am hopeful that Rust serves as a sweetspot to be a host\nprogramming language for modular design patterns, thanks to its advanced type systems as well as\nits rapidly expanding ecosystem.\nCurrent Status\nThis blog post serves as an early preview announcement, and kickstarts many efforts that are\nstill needed before we can be ready for a full release.\nPreviously, I have demonstrated the technical feasibility of various CGP programming techniques in\nHermes SDK.\nIn this new phase, I will start adding documentation and learning resources to help spread the\nknowledge of CGP.\nFor starter, I have created the project website\nand finished the first section of my first book on CGP.\nHowever, there are still a lot more work needed before I can make CGP accessible enough\nto the mainstream programming community. Nevertheless, I would like to make use of this\nearly announcement to start building an early adopter community to help me continue\ngrowing CGP.\nDepending on my time availability, it may take a year or more before I am ready for an official release\nof CGP. But in the meanwhile, I will start posting regular updates on my development process,\nwhich may be of interest for some of you reading this blog post.\nPlans for 2025\nIn the upcoming new year 2025, I have many plans laid out to prepare for an official release of\nCGP. This section is less about making promises, but more about making you aware of how much work\nis still needed before you should consider using CGP seriously.\nFinish the CGP Book\nThe most important goal I have for CGP is to finish writing my first book,\nContext-Generic Programming Patterns.\nThis book will serve as the minimal knowledge transfer for anyone to fully understand CGP.\nMy hope is that the book will help reduce the bus factor of CGP, so that even if I became\nunavailable to continue working on CGP, someone could still use the book as a basis\nto continue the work.\nImprove Error Diagnostics\nA critical blocker that makes it challenging for me to teach about CGP is the poor error\nreporting returned from the Rust compiler, when there is any error arise from unsatisfied constraints.\nCGP makes heavy use of blanket implementations to facilitate the wiring of components and provide\ndependency injections. But due to its unconventional use of Rust's trait systems, the error case\nis not handled well by the current Rust compiler. This is a major issue, because without proper\nerror reporting, it is very tedious to figure out what went wrong inside the code that use CGP.\nTo improve the error message from Rust, I have taken the initiative to file issue\n#134346, and attempted a preliminary fix\n#134348 that is made of ~30 lines of code.\nCurrently, the fix somewhat works, by at least showing sufficient information to allow\ndebugging to continue. However, it is not yet general enough to not affect general Rust\nprograms that do not use CGP.\nI plan to eventually dive deeper into Rust's error reporting code, and write a better patch\nthat can report CGP-related errors in better ways. But until I have the patch ready and merged,\nany serious use of CGP would require the use of a fork of Rust compiler that applies my temporary patch.\nThe progress on improving the error messages is tracked on CGP's GitHub issue\n#44, and more information on how to use\nthe forked compiler is documented in the\nCGP book.\nDocument the cgp Crate\nI have done quite a bit of writing about CGP on the project website and the book. But if you\nlook at the Cargo documentation for the cgp crate, you would see\nalmost no documentation about any CGP core construct provided by the crate.\nA main reason I haven't focused on documenting the cgp crate is that I wanted to avoid\nexplaining the full CGP concepts inside the crate documentation. Instead, I plan to finish\nthe CGP book first, and then provide links inside the cgp crate for readers to learn\nabout relevant concepts.\nThat said, I do plan to provide at least minimal documentation inside the cgp crate,\nto help onboarding programmers to projects that use the cgp crate.\nPublic Speaking\nAn effective way to spread the awareness of CGP is for me to speak about it at Rust conferences.\nI plan to apply to speak at major Rust conferences located in Europe, and hopefully I will get\naccepted into at least some of them. If you know of a conference that I should speak at, do let\nme know about it.\nAs an alternative, I also consider talking about CGP by sharing video recording on YouTube, or\nby organizing online meetups. However, this would subject to my time availability and interest\nfrom the community, as producing tech videos is not exactly my area of expertise.\nBut in case if you are interested in such content, do let me know what you would like to see produced.\nImprove the CGP Macros\nThe proc macros provided by the cgp crate were written in haste as quick proof of concepts\nto simplify the syntax for writing CGP programs. As a result, they are not that high in quality,\nand do not provide good UX when there are errors in using the macros. In most cases,\nthe macro would just panic, and do not provide much clue to users on what went wrong.\nThe CGP macros are also not comprehensive enough to support all possible ways users may define\nCGP components. For instance, the use of const generics or associated constants may result in\nmacro panics. Other than that, there are known bugs when merging generic parameters coming from\nmultiple sources.\nWhen I have the time, I plan to learn more about how to properly implement the proc macros,\nand implement them correctly with proper test coverage. This is important to provide good\nuser experience, as developers will use the macros all the time when programming in CGP.\nDeveloper Tooling\nFor CGP to gain mainstream adoption, it is not sufficient to just make CGP powerful enough\nto solve difficult programming problems. In addition to that, we also need to make CGP\neasy enough for even beginner programmers to easily pick up. And to move toward that\ngoal, we can slowly make CGP easier by building better tools to assist programming in CGP.\nAlthough CGP makes heavy use of Rust's trait system to power its component system, the\nheavy machinery are not strictly necessary for its users who use CGP to build modular applications.\nIf we were to implement CGP as native language constructs, we could in principle not require\nbeginner programmers to understand anything about traits when they start to learn about CGP.\nBut even if CGP is not native Rust constructs, there are probably ways for us to build tools\nthat provide first class support for CGP.\nOne way we can provide such support is to build analyzers that give special treatment to CGP\ntraits such as DelegateComponent. Our tools can then perform analysis on the component\ndependencies directly, and provide help in performing any necessary wiring.\nIdeally, I would like to implement IDE features similar to Rust Analyzer, so that most of\nthe cognitive burden of wiring CGP components can be automated by the IDE. But it may take\nmuch longer than one year for me to implement such features. In the meanwhile, I will probably\nexplore on simpler options, such as building simple CLI tools for CGP.\nImplement Advanced CGP features\nAside from improving CGP macros, there are a few more advanced core constructs that I need to\nimplement in the cgp crate to enable CGP to solve more use cases.\nIn particular, I plan to introduce constructs for context-generic construction of struct fields\n(product types), and context-generic matching of enum variants (sum types).\nThese constructs are commonly needed in complex applications, and currently they are commonly\nsolved using OOP patterns such as factories and visitors.\nCGP offers better alternatives than the existing OOP design patterns, but I have yet able to\nfind the time to implement and document them.\nIn case if you have interest in topics such as row polymorphism, datatype-generic programming,\nand category theory, you might be interested to follow my progress on how I make use of these\nadvanced concepts in CGP.\nMore Documentation\nIt would be a big milestone if I am able to finish the first CGP book and document the cgp\ncrate by the end of 2025. But I also hope to write more documentation in other forms, to\nexplain CGP in different ways to different audiences.\nIt would be helpful if I can write some tutorial series for teaching CGP to beginners, or\nfor programmers coming from imperative programming background. But it may be challenging to\nwrite such tutorials, without first improving the toolings and error handling for CGP.\nAlternatively, I may focus on writing use-case oriented series to explain how to use CGP\nto solve real world problems, such as building web applications, training AI models,\nor programming microcontrollers.\nOn one hand, I would like to avoid giving the impression that CGP is specifically\ndesigned to solve a specific application domain. On the other hand, it is a bit tough\nto demonstrate on my own how CGP can be used for all kinds of problem domains, while\nI myself is clearly not an expert in all of them.\nPerhaps the best way for me to approach this is for the community to guide me on\nwhat kind of content I should produce for CGP. If you have a specific programming\nproblem that you think CGP may help solving, I would love to hear more about it.\nThis can help inform me what kind of topics is popular, and allows me to better\nprepared to produce content for those topics.\nHow You Can Help\nIf you have read till the end of this blog post, thank you for taking your time!\nIf you are interested in CGP, the project homepage lists many ways\nyou can help me continue my development on CGP.\nI look forward to see you again in the future updates for CGP!\nFollowing are some links to the discussions on this blog post:\n\nReddit\nLobsters\nHacker News\n\n","id":"https://www.contextgeneric.dev/blog/early-preview-announcement/","title":"Announcing Context-Generic Programming (Early Preview)"},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"body":"Discuss on Reddit, Lobsters, Hacker News, GitHub, or Discord.\nOverview\nI’m excited to announce the release of CGP v0.4.2, a major milestone that significantly expands the expressive power of generic programming in Rust. With this release, CGP introduces full support for extensible records and variants, unlocking a range of new capabilities for developers working with highly modular and reusable code.\nExtensible records and variants allow developers to write code that operates on any struct containing specific fields or any enum containing specific variants, without needing their concrete definition. This makes it possible to write truly generic and flexible logic that is decoupled from rigid type definitions.\nIn earlier versions, CGP already offered a foundational feature through the HasField trait, which made it possible to read a field from any struct that included it. With version 0.4.2, this functionality is dramatically extended. Not only can you now read fields, but you can also construct values onto these fields in a type-safe manner. More importantly, the same level of extensibility is now available for enums, enabling operations over variants in a similarly generic fashion.\nThis advancement introduces two powerful programming patterns that are now possible with CGP:\n\n\nExtensible Builder Pattern: This pattern allows for modular construction of structs from independent sub-structs, each contributing specific fields. It enables highly composable and decoupled design in data construction.\n\n\nExtensible Visitor Pattern: This pattern enables the modular deconstruction of enums, allowing independent components to handle different variants without requiring full knowledge of the entire enum definition. This effectively enables a modularized version of the visitor pattern, by allowing new variants to be handled by extensible visitors.\n\n\nFor readers coming from more advanced programming languages, this development effectively brings the power of datatype-generic programming, structural typing, row polymorphism and polymorphic variants to Rust. These are advanced type system features commonly found in languages like Haskell, PureScript and OCaml, and their availability in CGP represents a major leap in what is possible with the type system in Rust.\nIn addition, CGP v0.4.2 introduces support for safe upcasting and downcasting between enums that share a common subset of variants. This provides a foundation for writing extensible and evolvable APIs that remain compatible across different layers of abstraction or across independently maintained modules.\nHere is a revised version of your “Content Organization” section, rewritten for clarity, flow, and consistency in tone and style. It maintains full sentences and should read naturally for Rust developers new to CGP:\nSeries Overview\nThis article is the first in a five-part series exploring the examples and implementation of extensible data types in CGP. Below is an overview of what each part covers:\nPart 1: Modular App Construction and Extensible Builders (this post) – In this introductory part, we present a high-level overview of the key features enabled by extensible data types. We then dive into a hands-on demonstration showing how extensible records can be used to build and compose modular builders for real-world applications.\nPart 2: Modular Interpreters and Extensible Visitors – This part continues the demonstration by introducing extensible variants. We use them to address the expression problem, implementing a set of reusable interpreter components for a small toy language.\nPart 3: Implementing Extensible Records – Here, we walk through the internal mechanics behind extensible records. We show how CGP supports the modular builder pattern demonstrated in Part 1 through its underlying type and trait machinery.\nPart 4: Implementing Extensible Variants – This part mirrors Part 3, but for extensible variants. We examine how extensible variants are implemented, and compare the differences and similarities between extensible records and variants.\nFeature Highlighs\nSafe Enum Upcasting\nLet’s begin by looking at how CGP enables safe upcasting between enums. Imagine you have the following enum definition called Shape:\n\nYou may also have a different ShapePlus enum, defined elsewhere, that represents a superset of the variants in Shape:\n\nWith CGP v0.4.2, it is now possible to upcast a Shape value into a ShapePlus value in fully safe Rust:\n\nThis operation works by leveraging the derived CGP traits HasFields, ExtractField, and FromVariant. As long as the source enum’s variants are a subset of the target enum’s, CGP can automatically generate the logic required to lift the smaller enum into the larger one.\nA particularly powerful aspect of this design is that the two enums do not need to know about each other. They can be defined in entirely separate crates, and the trait derivations are completely general. You don’t need to define any enum-specific conversion traits. This makes it possible to build libraries of reusable variant groups and compose them freely in application code.\nSafe Enum Downcasting\nIn the reverse direction, CGP also supports safe downcasting from a larger enum to a smaller one that contains only a subset of its variants. Using the same Shape and ShapePlus enums, the following example demonstrates how this works:\n\nLike upcast, this downcast method relies on the same set of derived CGP traits and works for any pair of compatible enums. The operation returns a Result, where the Ok variant contains the downcasted value, and the Err variant carries the unhandled remainder of the original enum.\nIn the example above, we use .ok() to simplify the comparison, but in practice, the Err case contains useful remainder value that can be further examined or downcasted again.\nSafe Exhaustive Downcasting\nOne of the unique capabilities CGP provides is the ability to exhaustively downcast an enum, step by step, until all possible variants are handled. This pattern becomes especially useful when working with generic enums in extensible APIs, where the concrete enum definition is unknown or evolving.\nTo demonstrate this, suppose we define another enum to represent the remaining Triangle variant:\n\nNow, the combination of Shape and TriangleOnly covers the entire set of variants from ShapePlus. We can use this setup to exhaustively handle all possible cases, while staying entirely within the bounds of safe Rust:\n\nIn this example, we first attempt to downcast into Shape. If that fails, the remainder is passed to downcast_fields, which attempts to further downcast to TriangleOnly. When all variants are properly handled, Rust automatically knows that there is no variant left to be handled, and we can safely omit the final Err case.\nAt first glance, this approach may appear more complex than simply matching against the original enum directly. However, its true strength lies in its generality. With CGP’s downcasting mechanism, you can pattern match over generic enum types without knowing their full structure in advance. This enables highly extensible and type-safe designs where variants can be added or removed modularly, without breaking existing logic.\nSafe Struct Building\nJust as CGP enables safe, composable deconstruction of enums, it also brings extensible construction to structs. This is achieved through a form of structural merging, where smaller structs can be incrementally combined into larger ones. The result is a flexible and modular approach to building complex data types, well-suited for highly decoupled or plugin-style architectures.\nTo illustrate this, let’s take the example of a Employee struct:\n\nSuppose we also define two smaller structs — Person and EmployeeId — each containing a subset of the fields in Employee:\n\nWith CGP, we can now construct a Employee value in a modular and extensible way, by composing these smaller building blocks:\n\nHere’s what’s happening: The builder() method on Employee initiates a partial record builder, an intermediate structure that initially contains none of the target fields. Each call to build_from takes a struct that contributes one or more of the remaining fields and returns a new builder with those fields filled in. Once all required fields have been supplied, the finalize_build() method consumes the builder and produces a fully constructed Employee instance.\nJust like enum upcasting and downcasting, the struct builder is implemented entirely in safe, panic-free Rust. There’s no runtime reflection or unsafe code involved. The only requirement is that the participating structs must have compatible fields and derive the CGP-provided traits HasFields and BuildField.\nMoreover, this system is completely decoupled from specific struct definitions. The individual component structs — Person, EmployeeId, and Employee — can be defined in separate crates, with no awareness of each other. Once the CGP traits are derived, they become interoperable through structural field compatibility alone.\nWhile this example may seem trivial — after all, constructing Employee directly is straightforward — it serves as a foundation for much more powerful generic abstractions. As you’ll see in the upcoming sections, the builder pattern opens the door to writing highly reusable, type-safe logic that can construct generic types without ever referencing their concrete types. This makes it possible to write libraries or plugins that contribute data to a shared structure without tight coupling or dependency on a central type definition.\nMotivation for Extensible Builders\nTo understand how extensible records enable modular builders, let’s explore a practical use case: constructing an application context from configuration inputs.\nImagine we’re building an API client for our application. The application context needs to include an SQLite database connection and an HTTP client. A typical way to model this in Rust would be to define a struct like the following:\n\nThis App struct holds a SqlitePool from the sqlx crate, and an HTTP Client from reqwest. To construct this context, we might implement a new function as follows:\n\nThis constructor is asynchronous and returns a Result&lt;App, Error&gt;. It creates a default Client using reqwest, connects to the database using the provided path, and assembles both into an App struct.\nAdding AI Capabilities to App\nAt this point, the constructor looks simple. But in a real-world setting, it’s rarely that clean. Suppose the product team now wants to integrate AI capabilities into the application. To support this, we decide to use an LLM service like ChatGPT and extend the App struct accordingly:\n\nIn this updated version, we introduce two new fields: open_ai_client, which is used to communicate with the OpenAI API, and open_ai_agent, which encapsulates a configured agent that can perform conversational tasks using a model like GPT-4o using rig.\nThe new constructor must now also handle the initialization logic for these fields:\n\nHere, we initialize the OpenAI client using environment variables, and then build an agent configured for the gpt-4o model. These values are added alongside the existing HTTP and database clients.\nFrom Simple to Complex\nEven with these additions, our constructor remains relatively manageable. However, as often happens in production, the requirements grow—and so does the configuration logic. Let’s imagine a more realistic version of this new function:\n\nThis constructor now handles five separate input parameters, each contributing to the configuration of different parts of the application. It creates a SqliteConnectOptions object to configure the database with the specified journal mode. The HTTP client is set up with a custom user agent and a longer timeout. The AI client is initialized using an explicit API key, and the agent is constructed with a custom model and preamble.\nWhile none of these steps are especially difficult on their own, the function is starting to grow in complexity. It’s also becoming more fragile, as all responsibilities are bundled into one place. Every change to a single subsystem — whether it’s database, HTTP, or AI — requires editing the same constructor.\nWhy Modular Constructor Matters\nAs we've seen in the previous example, even modest configurability can cause a constructor's complexity to grow rapidly. With just a few additional fields or customization options, the function becomes harder to maintain, test, and reason about.\nIn many cases, there's no single “correct” way to construct an application context. For example, you might want to retain both versions of the new constructor from earlier: a minimal one for unit tests with default values, and a more elaborate, configurable one for production. In fact, it's common for different parts of an application to require different levels of configurability—some using defaults, others requiring fine-grained setup.\nTo manage this complexity, Rust developers often reach for the builder pattern. This involves creating a separate builder struct, typically with optional or defaultable fields and fluent setter methods. The builder is used to gradually assemble values before producing the final struct.\nChallenges for Modular Builders\nThe traditional builder pattern works, but it comes with serious limitations — especially when extensibility and modularity are important.\nThe first limitation is tight coupling. A builder is usually tied directly to a specific target struct. If you create a new context that’s only slightly different from an existing one, you often have to duplicate the entire builder implementation, even if most of the logic is the same.\nSecond, builders are typically non-extensible. If you want to extend the construction logic — say, by adding a new step to initialize an additional field — you usually have to modify the original builder struct. This makes it hard to share construction logic across crates or teams without exposing internal implementation details.\nThe root cause of these problems is that struct construction in Rust typically requires direct access to the concrete type. That means the builder must know the exact shape of the final struct and have access to all its field values up front. If you need intermediate values or want to plug in custom build steps, those values must be manually threaded through the builder and its state.\nThis rigidity makes it difficult to define reusable, composable building blocks—especially in large or evolving codebases.\nModular Builders with CGP\nEarlier versions of CGP also ran into these limitations. When writing context-generic code, we wanted to construct structs in a way that didn’t require knowing their concrete types ahead of time. But because Rust structs require all field values to be present simultaneously at construction time, we couldn’t easily implement flexible or reusable context-generic constructors.\nWith the latest release, that limitation is fully resolved.\nCGP now supports modular, extensible struct builders that can be composed from smaller, independent parts. Each module can define how to build a piece of a context struct, and the builder automatically merges them — without needing to know the final shape of the struct ahead of time.\nThis opens the door to a new style of constructor logic: one that is modular, composable, and context-generic. You can define builders for individual subsystems (e.g., database, HTTP client, AI agent), and combine them to build any compatible application context.\nExtensible Builders\nIn this section, we’ll revisit the constructor examples we’ve already seen — and show how to rewrite them using CGP’s new builder pattern to achieve clean, modular, and reusable construction logic. A full version of the example code covered in this section is available on our GitHub repository\nModular SQLite Builder\nLet’s now explore how to implement modular construction of the App context using multiple CGP providers. We’ll start by defining a default SQLite builder provider using CGP's Handler component:\n\nIn this example, we define BuildDefaultSqliteClient as a CGP provider that implements the Handler component. This is the same Handler trait we introduced in Hypershell, where it was used to power shell-like pipelines. Here, we repurpose the same trait to construct modular context components. This demonstrates how general-purpose the Handler trait is — it can be used for pipelines, API handlers, visitors, and now, context builders.\nThe Build type parameter refers to a generic builder context, not the final App struct. This context includes the inputs required to construct a SqliteClient. In this case, the builder must be able to provide a database path, as well as a way to raise errors from sqlx. These requirements are expressed through the HasSqlitePath and CanRaiseAsyncError constraints.\nThe HasSqlitePath trait is defined as follows:\n\nBy marking the trait with #[cgp_auto_getter], CGP can automatically implement this trait for any builder context that contains a db_path field of type String. This automatic implementation reduces boilerplate and ensures that any context with the appropriate fields can satisfy the trait bounds.\nAlthough our example does not make use of the Code or Input parameters, they remain part of the Handler signature. The Code parameter may be used for compile-time options that allow contexts to be constructed in multiple ways. Meanwhile, Input typically refers to the partial value of the final struct being built. These capabilities are useful in more advanced scenarios, but we will leave their explanation for a later section.\nIn this implementation, the handle method simply connects to the SQLite database using the provided path, wraps the resulting pool in a SqliteClient struct, and returns it. The SqliteClient is defined as:\n\nThis struct acts as a wrapper around SqlitePool and serves as the output of our modular builder. Although BuildDefaultSqliteClient does not build the full App context, we can merge its output into App using CGP’s build_from mechanism we covered earlier. Deriving HasField, HasFields, and BuildField on SqliteClient allows it to be safely and automatically merged into the final context during composition.\nAt this point, you might be wondering why so much infrastructure is needed just to call SqlitePool::connect. The answer is that, while this example is simple, real-world construction logic can be much more complex. By encapsulating each part of the logic into modular components, we gain flexibility, reusability, and testability.\nTo demonstrate this flexibility, consider a more complex version of the SQLite builder. This version uses connection options and journal mode configuration rather than a simple path string:\n\nIn this version, BuildSqliteClient constructs a SqliteClient using fully configurable connection options. The Build context must now implement HasSqliteOptions, a trait that provides both the connection URI and the desired journal mode.\nThis example illustrates the key advantage of modular builders: the builder logic is entirely decoupled from the context itself. If we want to use BuildDefaultSqliteClient, we can define a simple builder context with just a db_path field. If we switch to BuildSqliteClient, we only need to provide a different context that includes db_options and db_journal_mode. All other components of the builder can remain unchanged.\nThanks to this decoupling, we can easily swap in different builder providers depending on the needs of the environment — be it development, testing, or production — without rewriting the entire construction logic. This modularity makes CGP builders highly scalable and adaptable to real-world applications.\nHTTP Client Builder\nJust as we modularized the construction of the SQLite client, we can also define a modular builder for an HTTP client using CGP. In this case, we will construct a custom reqwest client with specific configuration options. To keep the focus on advanced use cases, we will skip the simpler version and go directly to the more complex construction logic.\nThe HTTP client builder is implemented as follows:\n\nThis provider, BuildHttpClient, is structured very similarly to BuildSqliteClient. It implements the Handler trait and defines HttpClient as its output. The Build context is required to implement two traits: HasHttpClientConfig, which supplies the necessary configuration values, and CanRaiseAsyncError&lt;reqwest::Error&gt;, which allows the context to convert reqwest errors into its own error type.\nThe required configuration is minimal. In this case, we only need a user agent string, which is defined through the following trait:\n\nAs with the previous examples, the #[cgp_auto_getter] macro ensures that this trait is automatically implemented for any context that includes a http_user_agent field.\nThe output of this builder is a simple wrapper around reqwest::Client:\n\nHere again, we derive HasField, HasFields, and BuildField to support field merging into the final context later on. This makes the HttpClient output compatible with CGP’s build_from mechanism, allowing it to be composed with other builder outputs.\nThe handle method creates a new reqwest::Client using the client builder from reqwest. It sets the user agent using a value from the context, and specifies a connection timeout of five seconds. The constructed client is then wrapped in the HttpClient struct and returned.\nAlthough this example remains relatively simple, it illustrates how each field or component in a context can be modularly constructed using dedicated builder logic. Each builder is independently defined, type-safe, and reusable. If the way we configure our HTTP client changes — for example, if we want to support proxies or TLS settings — we can define a new provider that implements a different construction strategy, without needing to change any of the other components in our application context.\nCombined SQLite and HTTP Client Builder\nBefore we move on, it is important to emphasize that CGP does not require you to break down the construction logic of every component in your application context into separate builders. While the modular approach can offer more flexibility and reuse, you are entirely free to combine multiple construction tasks into a single provider if that better suits your needs.\nFor example, here is how you might implement a single builder that constructs both the SQLite client and the HTTP client together:\n\nIn this implementation, we define a single provider BuildDefaultSqliteAndHttpClient that returns a combined struct SqliteAndHttpClient, which contains both a SqlitePool and a reqwest::Client. The construction logic is written in one place, which can be convenient when these components are always used together or when their configuration is tightly integrated.\nHowever, the tradeoff of this approach is that it reduces flexibility. This tight coupling can limit reuse and make future changes more difficult.\nThat said, the choice of whether to combine or separate builders is entirely up to you. CGP does not impose any rules on how you must structure your builder logic. It provides the tools to compose and reuse components where helpful, but it leaves design decisions to the developer.\nFor the remainder of this article, we will continue to use the fully modular approach, breaking construction logic down into smaller, independent units. Our goal is to illustrate the full extent of flexibility and reusability that CGP enables. However, if you prefer a different organizational structure, you are free to structure your builders in whatever way best suits your project.\nChatGPT Client Builder\nRegardless of whether you prefer to split or combine the construction of components such as the SQLite and HTTP clients, there are many situations where it makes sense to separate construction logic into smaller, more focused units. For instance, you might want to offer two versions of your application — one standard version and one \"smart\" version that includes AI capabilities. In such cases, it is useful to define a separate builder provider for the ChatGPT client, so that AI-related logic can be included only when necessary.\nThe implementation for the ChatGPT client builder follows the same general pattern as the previous builders. It is defined as follows:\n\nThis builder requires the Build context to provide three string fields: the OpenAI API key, the model name, and a custom preamble string. These requirements are captured by the HasOpenAiConfig trait:\n\nAs with the other providers, we use the #[cgp_auto_getter] macro to automatically implement the trait, as long as the builder context contains the corresponding fields and derives HasField.\nThe BuildOpenAiClient provider returns an OpenAiClient struct that wraps two values: the low-level openai::Client and the higher-level Agent configured with the specified model and preamble.\n\nBy defining this logic in a standalone builder provider, we can easily opt in or out of ChatGPT support in our application context.\nBuilder Context\nNow that we have implemented builder providers for SQLite, HTTP, and ChatGPT clients, we can demonstrate how to combine them in a complete builder context that constructs the final App instance. Defining this context is surprisingly concise and requires only a few lines of code:\n\nHere, we define a FullAppBuilder struct that includes all of the fields required by the three individual builder providers. The #[cgp_context] macro enables the CGP capabilities for the context struct, while the HasField derive macro enables automatic implementation of the necessary accessor traits using #[cgp_auto_getter]. In addition, we derive Deserialize so that FullAppBuilder can be easily loaded from a configuration file in formats such as JSON or TOML.\nNext, we wire up the builder context using the delegate_components! macro:\n\nThis macro allows us to delegate the implementation of various components of the builder context. First, we configure error handling by using the cgp-anyhow-error library. The UseAnyhowError provider specifies that our abstract Error type will be instantiated to anyhow::Error, and the RaiseAnyhowError provider allows conversion from error types implementing core::error::Error, like sqlx::Error and reqwest::Error, into anyhow::Error.\nBuilder Dispatcher\nIn the example above, we used a special builder dispatcher called BuildAndMergeOutputs to implement the HandlerComponent. This dispatcher allows us to construct the final App type by sequentially combining the outputs of multiple builder providers. We specify the target App type as the output of the build process, and then pass in a type-level list of builder providers using the Product! macro. In this case, we used BuildSqliteClient, BuildHttpClient, and BuildOpenAiClient, all of which we implemented previously.\nTo understand how BuildAndMergeOutputs operates under the hood, let us walk through a manual implementation that performs the same task:\n\nThis manual implementation demonstrates the boilerplate that would be necessary if we did not use BuildAndMergeOutputs. Here, we define BuildApp as a context-specific provider for the FullAppBuilder context. It implements the Handler trait for any Code and Input types.\nWithin the handle method, we construct the App in a step-by-step manner, similar to how we built complex types earlier in the safe struct building section. We begin by initializing an empty builder with App::builder(). Next, we invoke the handle method on each of the individual providers — BuildSqliteClient, BuildHttpClient, and BuildOpenAiClient — passing them the shared context and PhantomData for the code. The resulting outputs are incrementally merged into the builder using build_from, and finally, finalize_build is called to produce the completed App instance.\nIn this example, we ignore the original Input parameter and instead pass () to each sub-handler for simplicity. In the actual implementation of BuildAndMergeOutputs, a reference to the intermediate builder is instead passed along as input to each sub-handler to support more advanced use cases. However, we have omitted that detail here to focus on the overall structure.\nWhile the manual implementation of BuildApp is relatively easy to follow, it is also quite repetitive. The main benefit of BuildAndMergeOutputs is that it eliminates this boilerplate by abstracting away the repetitive logic of chaining multiple builder steps and threading intermediary results. Furthermore, BuildAndMergeOutputs is implemented with the necessary generic parameters and constraints to work with any context type, as compared to being tied to the App context that we defined.\nAside from this reduction in verbosity, the behavior remains conceptually the same as what is shown in the manual example.\nBuilding the App\nWith the builder context defined, we can now construct the full App by simply instantiating the builder and calling its handle method:\n\nIn this example, we initialize FullAppBuilder by filling in the required configuration values. We then call builder.handle() to construct the App. The handle method requires two arguments: a Code type and an Input value. However, because neither of these are constrained in any way in our example, we can simply pass any type we want, such as the unit type () for both. This simplifies to the equivalent of calling builder.handle() with no argument in practice.\nThis example illustrates how CGP allows new builder contexts to be defined with minimal effort by composing multiple independent builder providers — none of which require knowledge of the final type being constructed.\nRather than writing custom constructor functions that take numerous arguments, we define a builder struct where each required input becomes a field. Instead of manually constructing each component of the context, we use delegate_components! to connect the appropriate builder providers, which handle the construction logic for us.\nBy embracing this modular builder approach, our code becomes not only more extensible, but also easier to read, test, and maintain.\nMore Builder Examples\nAt this point, some readers may still be skeptical about the value of modularity offered by CGP builders. Since we’ve only shown a single application context and one corresponding builder context so far, it might not be obvious why we couldn’t just use a simple new constructor function like the one defined at the beginning.\nTo truly demonstrate the power of modular builders, it’s helpful to explore how CGP makes it easy to define multiple contexts that are similar but have slight differences. However, if you're an advanced reader already familiar with the benefits of modular design, feel free to skip ahead to the conclusion.\nDefault Builder\nEarlier, we introduced default builders like BuildDefaultSqliteClient, which can construct an App with default configuration values. These defaults can be combined to define a minimal builder for App:\n\nIn this context, the only required configuration is the db_path, simplifying the process of constructing an App, especially for use cases like unit testing or demos.\nPostgres App\nNow suppose we want an enterprise version of the app that uses Postgres instead of SQLite. We can define a new App context that swaps in PgPool:\n\nSince the HTTP and ChatGPT logic remains unchanged, we only need to implement a new builder for Postgres:\n\nThis builder closely mirrors the SQLite version, but reads the postgres_url field from the context instead.\nNext, we define a new builder context that includes Postgres configuration:\n\nHere, we simply swap in BuildPostgresClient instead of BuildSqliteClient, while reusing the other builder providers unchanged.\nThis example highlights a key advantage of CGP over traditional feature flags: with CGP, multiple application variants (e.g., SQLite or Postgres) can coexist in the same codebase and even be compiled together. In contrast, feature flags often force a binary either/or split at compile time.\nBy enabling different configurations to exist side-by-side, CGP improves testability and reduces the likelihood of missing edge cases caused by untested feature combinations.\nAnthropic App\nJust as we swapped SQLite for Postgres earlier, we can also substitute the AI model used in the application — such as replacing ChatGPT with Claude. With CGP, this becomes straightforward: we simply define a new AnthropicApp that uses the Anthropic client and agent:\n\nNext, we implement a builder provider to construct the Claude client:\n\nWith the builder provider in place, we define a new builder context that includes the Anthropic API key and wire it up using BuildDefaultAnthropicClient:\n\nThis example shows how effortlessly CGP supports variation and customization. The same modular pattern can be reused to swap in different components — databases, HTTP clients, or agents — without rewriting core application logic.\nIn fact, the process becomes so systematic that it’s easy to imagine an AI tool like Claude Code automating the entire setup given the right prompt and documentation.\nAnthropic and ChatGPT Builder\nIt’s impressive that CGP lets us easily swap ChatGPT for Claude. But what’s even better is that we don’t have to choose at all — we can include both AI agents in the same application.\nThis could be useful for scenarios where combining the strengths of multiple models improves the overall intelligence or reliability of your application. More importantly, it demonstrates that CGP is not just about selecting one provider over another — it’s also about composing multiple providers together in a clean, modular way.\nWe begin by defining an AnthropicAndChatGptApp context that includes both Claude and ChatGPT clients:\n\nNext, we define a builder context that includes configuration fields for both AI platforms:\n\nIn the component wiring, we include both BuildDefaultAnthropicClient and BuildOpenAiClient in the provider list:\n\nWith just a few extra lines, we’ve created a dual-agent AI app that can leverage both Claude and ChatGPT simultaneously.\nIt’s also worth noting that the llm_preamble field is reused by both the Claude and ChatGPT builders. This demonstrates CGP’s flexibility in sharing input values across multiple providers—without requiring any manual coordination or boilerplate.\nThis kind of seamless reuse and composition is where CGP truly shines: giving you fine-grained control over how your application is assembled, while keeping your code modular and maintainable.\nMulti-Context Builder\nLooking closely at the AnthropicAndChatGptAppBuilder that we previously defined, we can observe that it already includes all the necessary fields required to construct the Claude-only and ChatGPT-only applications as well. This means we can reuse the same builder to construct all three versions of our application contexts, simply by changing how the builder is wired.\nTo achieve this, we take advantage of the Code type parameter, which allows us to emulate DSL-like behavior similar to what is seen in Hypershell. We begin by defining distinct marker types that represent the different build modes:\n\nUsing these types, we can apply the UseDelegate pattern to route the Handler implementation to different builder pipelines depending on the code passed in. This enables conditional wiring based on the selected application mode:\n\nNow, when we want to construct a specific application context, we only need to change the Code type by using PhantomData. This gives us a flexible, type-safe way to select the desired builder pipeline at runtime:\n\nThis example highlights how CGP's DSL features are not limited to building full-fledged domain-specific languages like Hypershell. Even in this lightweight form, they are immensely valuable for labeling and routing different behaviors based on combinations of builder providers.\nIn essence, we are still constructing a mini-DSL, albeit one composed of simple symbolic \"statements\" without complex language constructs. This approach not only brings expressive power to your builder logic, but also lays the groundwork for future extensions — such as richer abstract syntaxes — using the same techniques introduced by Hypershell.\nConclusion\nIn this first installment, we explored how CGP v0.4.2 empowers Rust developers to construct application contexts using modular, extensible builders. You’ve seen how individual providers like BuildSqliteClient, BuildHttpClient, and BuildOpenAiClient can be composed to build complex types without tight coupling or boilerplate. We’ve also demonstrated how the same context can be reused across multiple application variants — from SQLite to Postgres, from ChatGPT to Claude — all through declarative builder composition.\nThis approach dramatically simplifies configuration management, promotes code reuse, and opens the door to highly flexible, plugin-style architectures in Rust. Whether you're building minimal test contexts or full-featured production systems, CGP gives you the tools to scale your logic modularly and safely.\nIn Part 2 of this series, Modular Interpreters and Extensible Visitors, we’ll shift gears to look at extensible variants, where CGP tackles the expression problem with a modular visitor pattern. If you've ever wanted to define interpreters, pattern match over generic enums, or evolve your data types without breaking existing logic — you won’t want to miss what’s coming next.\n","id":"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/","title":"Programming Extensible Data Types in Rust with CGP - Part 1: Modular App Construction and Extensible Builders"},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"body":"Discuss on Reddit, GitHub or Discord.\nRecap\nThis is the second part of the blog series on Programming Extensible Data Types in Rust with CGP. You can read the first part here.\nAs a recap, we have covered the new release of CGP v0.4.2 which now supports the use of extensible records and variants, allowing developers to write code that operates on any struct containing specific fields or any enum containing specific variants, without needing their concrete definition.\nIn the first part of the series, Modular App Construction and Extensible Builders, we demonstrated an example use of the extensible builder pattern, which uses extensible records to support modular construction of an application context.\nIn this second part of the series, we will explore the use of extensible variants, by examining how it can be used in an extensible visitor pattern to build a modular interpreter for a toy math expression language.\nSeries Overview\nPart 1: Modular App Construction and Extensible Builders – In this introductory part, we present a high-level overview of the key features enabled by extensible data types. We then dive into a hands-on demonstration showing how extensible records can be used to build and compose modular builders for real-world applications.\nPart 2: Modular Interpreters and Extensible Visitors (this post) – This part continues the demonstration by introducing extensible variants. We use them to address the expression problem, implementing a set of reusable interpreter components for a small toy language.\nPart 3: Implementing Extensible Records – Here, we walk through the internal mechanics behind extensible records. We show how CGP supports the modular builder pattern demonstrated in Part 1 through its underlying type and trait machinery.\nPart 4: Implementing Extensible Variants – This part mirrors Part 3, but for extensible variants. We examine how extensible variants are implemented, and compare the differences and similarities between extensible records and variants.\nExtending the Visitor Pattern\nEarlier, we explored how CGP uses the extensible builder pattern to enable modular construction of context structs. In this article, we will see how a similar approach can be applied to context enums, allowing each variant to be destructured and handled by a flexible, composable set of handlers.\nIn Rust and many object-oriented languages, this pattern is commonly referred to as the visitor pattern. However, Rust’s powerful enum and match features often reduce the need for the visitor pattern, especially when the concrete enum type is known. In such cases, developers can simply use match expressions to handle each variant explicitly and concisely.\nDespite this, the visitor pattern remains useful in situations where the concrete enum type is unknown or abstracted away. This is especially true in libraries like serde and syn, where visitors are used to traverse abstract syntax trees or serialization payloads without tying the implementation to a specific format or structure. For instance, in serde, deserialization is driven by a visitor provided by the target type, which walks through structures like JSON or TOML without coupling the deserializer to any specific data format.\nLimitations of the Traditional Visitor Pattern\nWhile the visitor pattern is useful, it suffers from a major drawback: it is inherently closed for extension. All possible variants and visitable types must be declared upfront in the visitor interface, and it is challenging to add or remove variants later without breaking existing implementations.\nFor example, consider the Visitor trait in serde, which defines methods for visiting a fixed set of primitive types — up to 128-bit integers. If a developer wants to deserialize a type that contains a U256 value, there is no way to extend the Visitor trait to support native 256-bit integers. Likewise, if someone builds a new serialization format that introduces support for such a type, it cannot cleanly integrate with serde because the trait cannot be expanded.\nTo work around this, serde includes a broad set of 26 visitor methods in its core Visitor trait to accommodate a wide range of cases. However, this introduces the opposite problem: when a serialization format does not support a specific visitor method, the only option is to return a runtime error. There is no way to signal at compile time that a type is incompatible with the format, even if it formally implements Serialize or Deserialize.\nThis mismatch becomes especially noticeable when using compact formats like postcard or bincode, which support only a small subset of types compared to JSON. These libraries accept any type implementing Deserialize, but compatibility is only verified at runtime — leaving users to discover format mismatches through runtime errors instead of compile-time errors.\nIn short, the traditional visitor pattern tends to be either too restrictive (by enforcing a closed set of operations) or too permissive (by relying on runtime errors to reject unsupported operations). What’s needed is a more flexible, composable alternative — one that allows both sides (visitor and visitee) to express precise requirements at compile time.\nThis is exactly the problem that the extensible visitor pattern in CGP aims to solve. It enables open-ended, modular visitors that preserve type safety and extensibility, without the pitfalls of runtime errors or rigid interfaces.\nThe Expression Problem\nWhile it’s theoretically possible to replace serde’s visitor pattern with CGP’s extensible alternative, doing so would require significant refactoring and is outside the scope of this post. Instead, we’ll explore a simpler but well-known challenge that illustrates the same limitations: the expression problem.\nSuppose we want to implement an interpreter for a toy arithmetic language in Rust. This language might support basic math expressions like 1 + (2 * 3). A typical way to represent such a language is with an enum like this:\n\nHere, MathExpr represents arithmetic expressions. The Plus and Times variants contain boxed sub-expressions, and Literal holds an integer value. The use of Box is necessary due to Rust’s size constraints for recursive data structures.\nTo evaluate these expressions, we can implement a straightforward eval function:\n\nThis works well for small examples. But real-world interpreters quickly grow in complexity. Each evaluation case might span dozens — or hundreds — of lines of code. Additionally, the enum itself might have many more variants. For example, syn::Expr, a real-world expression type for Rust, defines over 40 variants.\nLet’s assume our toy MathExpr is similarly complex. Now imagine that alongside eval, we also want to define other operations, like pretty-printing:\n\nHere lies the crux of the expression problem: as the language evolves, we frequently need to add new expression variants or remove old ones. But any modification to the MathExpr enum forces us to update all pattern-matching functions like eval, expr_to_string, and others. The enum becomes tightly coupled to every function that consumes it.\nWorse, this coupling is not easy to break. The recursive nature of MathExpr — where variants like Plus contain other MathExpr values — means even modular helper functions (e.g., eval_plus) must still operate on MathExpr, perpetuating the tight dependency.\nThis isn’t a problem unique to interpreters. Many recursive data structures — like JSON Value types — suffer from similar issues. A JSON object may contain maps of nested Values, making any function over the type deeply tied to its structure.\nBecause of this, extending or experimenting with the enum often becomes burdensome. If the type is part of an upstream crate, users may need to submit a pull request just to add a variant. And if the maintainer declines, downstream users may be forced to fork the crate just to gain the flexibility they need.\nIn the next section, we’ll explore how CGP's extensible visitor pattern addresses this problem — by decoupling the implementation of each variant from the concrete enum definition.\nEvaluator Computer\nTo demonstrate how CGP enables extensible and decoupled evaluation logic, we will now walk through how to implement a small part of the eval function — specifically, the logic for handling the Plus operator. Rather than tying ourselves to a fixed MathExpr enum, we begin by defining Plus as an independent struct:\n\nIn this definition, Plus is no longer a variant of a hardcoded enum. Instead, it is a generic data structure that takes an Expr type parameter. This parameter represents the broader expression type and allows Plus to be reused in many different expression trees. The left and right operands are wrapped in Box to support recursive structures while still satisfying Rust’s size requirements later on.\nTo actually evaluate such a sub-expression, CGP introduces the concept of a Computer — a CGP component designed for pure computation. It is defined as follows:\n\nThis trait behaves similarly to the Handler trait introduced earlier, but with one key distinction: compute is a synchronous function and does not return a Result. It is called a computer because it embodies a pure, deterministic computation that transforms input into output.\nThe Computer trait serves as the foundation for extensible evaluation. It abstracts the idea of computation away from any specific expression type or evaluation strategy. Using this abstraction, we can implement evaluation logic for each sub-expression in isolation. For example, here is how we define a provider for evaluating the Plus struct:\n\nThis implementation defines EvalAdd as a Computer with Plus&lt;MathExpr&gt; as input. It works generically over any Context, Code, and MathExpr type, as long as the context knows how to compute MathExpr and the resulting output type supports the Add trait. In other words, the context must be able to evaluate each operand, and the results must be addable.\nBy using context.compute(...) recursively on the left and right operands, we evaluate each sub-expression and then add the results together. This setup allows us to write clean, modular logic that does not assume anything about the shape of the expression tree or the numeric type being used.\nThe same approach applies to other arithmetic operations. For example, we can implement a provider for multiplication as follows:\n\nHere, we follow the exact same structure. The only difference is that we require the output type to implement Mul instead of Add, and we use the * operator to combine the results.\nFinally, we handle literals using the following straightforward implementation:\n\nThe EvalLiteral provider simply returns the inner value. It doesn’t depend on any context or recursive evaluation, making it the simplest form of a computer.\nWhat’s remarkable about this setup is how each of the providers — EvalAdd, EvalMultiply, and EvalLiteral — is completely decoupled from both each other and the concrete expression type. These components can live in separate crates or modules and still be composed together to form a complete evaluator.\nThis modularity is precisely the power that CGP brings to the table. Instead of forcing every part of your evaluator into a rigid, monolithic structure, you can build each piece independently and combine them later. The result is not only cleaner and more maintainable code, but also an evaluation engine that is fully open for extension — without giving up on compile-time guarantees.\nEvaluating Concrete Expressions\nWith our evaluation logic defined for individual expression types like Plus, Times, and Literal, the next step is to bring everything together into a fully functional evaluator. To do this, we first define a concrete expression type named MathExpr:\n\nNotice that instead of embedding the structure of each expression variant directly inside the enum, we define each variant to wrap one of the standalone structs we previously created. This design is intentional. By keeping each sub-expression — such as Plus and Times — as its own modular type, we can reuse and compose them in more flexible ways. To complete the recursive structure, we instantiate the generic type parameter MathExpr inside each sub-expression, allowing the expression tree to contain arbitrarily nested expressions. For the Literal case, we keep things simple by hardcoding the value type to u64.\nNow that we have our enum, we need to define the context in which evaluation will happen. In CGP, this is done using a #[cgp_context] declaration:\n\nThis Interpreter struct will serve as the central context object for our evaluator. In this particular example, we do not require the context to hold any runtime data, so the struct is left empty. Its only purpose is to act as a compile-time container that wires together the correct provider implementations.\nThe actual wiring is handled through CGP’s powerful delegation system, which allows us to map input types to their corresponding computation logic. Here's how we set it up:\n\nIn this block, we define the InterpreterComponents wiring configuration, which tells CGP how to resolve the Computer trait for each expression type. At the heart of this configuration is UseInputDelegate, a generic dispatcher that automatically selects the correct provider based on the input type at compile time.\nThis dispatcher operates over the inner EvalComponents table, which we create on the fly using the new keyword. This EvalComponents struct maps each expression type to its associated computation provider:\n\nMathExpr is mapped to DispatchEval, which acts as a dispatcher that dispatches to one of the sub-expression types based on the variant.\nPlus&lt;MathExpr&gt; is evaluated using EvalAdd.\nTimes&lt;MathExpr&gt; is evaluated using EvalMultiply.\nLiteral&lt;u64&gt; is handled by EvalLiteral.\n\nBecause UseInputDelegate operates at the type level, the entire dispatch process is fully type-safe and resolved at compile time. There is no need for match statements, no runtime type checks, and no boilerplate glue code. The trait system simply composes itself from the parts we’ve defined.\nDispatching Eval\nWith the components for evaluating individual sub-expressions in place, we now turn our attention to the final piece of the puzzle: evaluating the main MathExpr enum itself. To accomplish this, we delegate the MathExpr type to a special provider named DispatchEval, which is defined alongside the Interpreter context like so:\n\nHere, DispatchEval is implemented as a context-specific provider. That means it only applies when we are evaluating expressions in the Interpreter context, and it handles the concrete MathExpr enum as input. Rather than directly writing out how each variant of the enum is evaluated, we delegate that responsibility to a special visitor dispatcher called MatchWithValueHandlers.\nThis dispatcher is one of the key tools provided by CGP. It automatically maps each enum variant to the appropriate computation provider we registered earlier in EvalComponents. In effect, MatchWithValueHandlers performs dispatch on the matching of variants at compile time. The implementation of DispatchEval is simply a wrapper around this dispatcher, but that wrapper plays a crucial role.\nSo why do we need this wrapper in the first place? It comes down to a subtle limitation in Rust’s trait resolution system. If we try to directly wire the Computer handler for MathExpr to MatchWithValueHandlers, the compiler runs into a cyclic dependency: to implement the trait, it needs to evaluate the variant-specific providers like EvalAdd, which themselves rely on MatchWithValueHandlers. The result is a cryptic “overflowing requirements” error.\nBy inserting this wrapper layer with DispatchEval, we sidestep that issue. Rust is able to mark the trait as implemented before diving into the body of the method, effectively breaking the cycle.\nTo understand what MatchWithValueHandlers is doing under the hood, imagine manually writing out the dispatch logic like this:\n\nThis is straightforward for a small enum like ours. But once your enum grows beyond a few variants — as is the case with something like syn::Expr, which contains over 40 — you quickly run into repetition, verbosity, and maintenance pain.\nMatchWithValueHandlers avoids all that by performing this logic generically. It doesn't rely on macros or hardcoded pattern matching. Instead, it works entirely through traits and type-level programming. That means the same dispatcher can be reused for any enum type that satisfies the required constraints, without knowing anything about the actual enum variants ahead of time.\nThis is a significant benefit over traditional macro-based approaches, which are more difficult to reason about, harder to debug, and often tightly coupled to specific enum definitions. With CGP, you get a reusable, type-safe visitor implementation that scales cleanly as your codebase grows.\nIn short, DispatchEval and MatchWithValueHandlers together make it possible to evaluate complex enums in a clean, declarative, and extensible way — without writing repetitive boilerplate or giving up compile-time guarantees. It’s another example of how CGP turns what would normally be painful and manual trait implementations into something elegant and maintainable.\nConverting to a Lisp Expression\nAt this point, we’ve implemented a basic arithmetic evaluator using CGP. But interpreting expressions is only one of many possible operations we might want to perform. Often, we want to transform the syntax tree — say, converting it into a string, generating code, or emitting tokens for macro expansion.\nAlthough a plain to_string implementation could be a compelling use case on its own, it might seem too trivial to justify CGP’s involvement (spoiler: it’s not). So instead, to make things a little more illustrative and practical, we’ll convert our arithmetic expressions into Lisp expressions — specifically, into a form inspired by S-expressions.\nWhy Lisp?\nThe motivation here is similar to the real-world task of converting a Rust syntax tree (like syn::Expr) into a TokenStream. That task typically requires walking a rich enum structure and transforming it into a stream of tokens. Rather than deal with the full complexity of TokenStream, we’ll use a simplified representation based on Lisp syntax — concise, nested, and familiar to anyone who’s seen prefix notation.\nFor example, our arithmetic expression 1 + (2 * 3) would become the Lisp-like expression: (+ 1 (* 2 3)).\nTo represent this form, we define a general-purpose enum:\n\nThis LispExpr enum is broader than our original MathExpr — it can represent not just arithmetic but more general symbolic forms. Each List is a vector of boxed sub-expressions; Literal holds numeric values; and Ident wraps identifiers like \"+\" or \"*\". For simplicity, we use a Vec instead of a linked list.\nWe can manually construct the equivalent of (+ 1 (* 2 3)) like this:\n\nThis demonstrates the basic structure. But the real point is this: converting from Expr to LispExpr is itself another instance of the expression problem, just like evaluation. In fact, it's even more subtle — this is a \"double expression problem\": we want to decouple our logic from both the source expression type (MathExpr) and the target type (LispExpr).\nSo how do we solve it modularly?\nThe ComputerRef Component\nTo implement this modular conversion, we’ll use a slightly different CGP trait: ComputerRef.\n\nComputerRef is similar to Computer, but it takes a reference to the input rather than consuming it. This is especially useful in our case, because we might want to evaluate the expression again after transforming it — something we couldn’t do if we moved it.\nWhile we could clone the input or use higher-ranked trait bounds to handle references, ComputerRef offers a cleaner, more ergonomic solution. CGP also provides promotion adapters that allow ComputerRef implementations to act as Computer providers when needed. So the two traits are often interchangeable in practice — use the one that fits your borrowing needs.\nFor the example, we used Computer to implement evaluation, but ComputerRef for to-Lisp transformation, to demonstrate the use of both traits. In practice, you might want to use ComputerRef for evaluation as well, so that the same expression can still be reused after evaluation.\nImplementing PlusToLisp\nWith our expression types and Lisp target representation in place, we can now implement a CGP provider that transforms a Plus expression into its corresponding Lisp representation. Here's what the provider looks like:\n\nThis implementation takes a Plus&lt;MathExpr&gt; as input and returns a LispExpr as output. The transformation is recursive: each subexpression is converted by delegating to the same ComputerRef trait for MathExpr. The resulting LispExpr values are then combined into a list, with the \"+\" operator represented as an identifier at the head.\nNotice that the provider is generic over both the context and the code. It requires that the context knows how to evaluate an MathExpr into a LispExpr, and that it defines a concrete type for LispExpr. This is done via a CGP type trait called HasLispExprType:\n\nBy relying on this trait, we avoid hardcoding the LispExpr type directly into the provider. Instead, the actual type can be supplied later when we wire everything together.\nConstructing Variants with Sub-Enums\nWhile we want to construct a LispExpr as the final result, we do not necessarily need access to all of its variants inside this provider. In fact, for converting a Plus node, we only need to construct two specific kinds of LispExpr: a List, and an Ident representing \"+\".\nTo express this more precisely, we define a local enum called LispSubExpr:\n\nThis LispSubExpr enum includes only the subset of variants required to construct a Plus expression in Lisp form. It excludes other variants like Literal, which may be needed by other parts of the transformation but are not relevant here. Even though LispSubExpr is a reduced version of LispExpr, it is still parameterized by the full LispExpr type, so that the elements in the list can recursively represent complete expressions.\nTo use LispSubExpr in our transformation, we need a way to convert — or more precisely, upcast — from this smaller enum into the full LispExpr. This is made possible by implementing the CanUpcast trait we introduced earlier, which is implemented automatically when we annotate the enum with #[derive(HasFields, ExtractField, FromVariant)]. This gives us a safe and type-checked way to promote the constructed value into the broader type expected by the rest of the system.\nInside the method body, we first compute the Lisp representations of the two sub-expressions. Then we create an identifier for the \"+\" symbol and upcast it to LispExpr. Finally, we build a List containing the operator followed by the two operands, and upcast that list into the final LispExpr result.\nThis pattern demonstrates how CGP’s upcasting mechanism makes it easy to construct enum values in a modular and flexible way. Instead of requiring full knowledge of the target enum’s structure, we work with a small, purpose-specific subset. This keeps our providers focused and easier to reason about, while still interoperating cleanly with the larger system.\nIn essence, LispSubExpr plays a role similar to what #[cgp_auto_getter] do for structs in CGP. Just as #[cgp_auto_getter] lets you read fields from a struct through a derived trait without knowing the whole type, CanUpcast lets you construct parts of an enum using only the variants you care about — without being tied to the entire definition of the enum.\nImplementing LiteralToLisp\nThe implementation of TimesToLisp follows the same pattern as PlusToLisp, differing only in that it constructs the \"*\" identifier instead of \"+\". Since the structure is nearly identical, we will focus instead on a more interesting case: converting literal values into their Lisp representation.\nThe transformation of a literal is handled by the LiteralToLisp provider, which implements the ComputerRef trait. The core idea here is to wrap the literal value in a Lisp-compatible enum variant and return it as the final result. Here's the implementation:\n\nIn this implementation, we pattern match on a reference to the Literal&lt;T&gt; and simply clone the value before constructing a new Literal variant inside a helper enum. This enum, LispSubExpr, plays the same role here as it did in the PlusToLisp provider: it defines a minimal subset of variants sufficient to perform the transformation.\n\nWhat makes this pattern especially powerful is that the LispSubExpr and Literal enums are completely parameterized over the literal type T. This means that the transformation logic does not need to know or care about what kind of value the literal holds. As long as T can be cloned, the provider works uniformly for all supported literal types — whether they are numbers, strings, or other values.\nThere is another subtle but important aspect to this design: the Literal type used here is exactly the same as the one used in our arithmetic expression tree. In other words, the same data structure is reused across both the source language (MathExpr) and the target language (LispExpr). This isn’t just a convenience — it opens the door to reusing logic across very different language expressions.\nWiring To-Lisp Handlers\nWith the Lisp transformation providers now defined, the final step is to integrate them into the interpreter context. This is where the individual pieces — evaluation, transformation, and type configuration — are all connected through CGP’s delegate_components! macro. To do this, we update the InterpreterComponents definition so that it includes the logic required for converting expressions into their Lisp representations:\n\nIn this setup, the LispExprTypeProviderComponent establishes the concrete LispExpr enum as the actual type behind the abstract LispExpr used in our providers. This mapping is done through UseType, which binds the type parameter required by HasLispExprType to the specific enum definition we want to use in the final output.\nThe ComputerComponent remains unchanged from when we configured the system for arithmetic evaluation. It continues to delegate evaluation logic to the appropriate providers, such as EvalAdd for addition and EvalLiteral for literal values.\nThe main addition here is the ComputerRefComponent, which enables reference-based computations — specifically, the transformation of expression trees into Lisp form without taking ownership of them. This component also uses UseInputDelegate, but it connects to a different set of providers: those responsible for generating Lisp output. It includes the transformation logic for Plus, Times, and Literal, each handled by their respective providers.\nFor the top-level MathExpr type, we introduce DispatchToLisp, a dedicated dispatcher that routes the various expression variants to their corresponding transformation providers. It is defined as follows:\n\nThis implementation mirrors the earlier DispatchEval, but with one key distinction: it uses MatchWithValueHandlersRef, a visitor dispatcher designed specifically for reference-based operations. Rather than consuming the input, it operates on borrowed values and dispatches calls to providers that implement the ComputerRef trait.\nOne of the major advantages of this approach is that it is entirely driven by the type system. Because the dispatcher is implemented generically — as a regular Rust impl rather than a macro — it benefits fully from the compiler’s ability to check lifetime correctness, trait bounds, and input-output consistency. Mistakes such as passing the wrong reference type, using incompatible trait bounds, or violating borrowing rules are caught immediately at compile time, often with clear and actionable error messages.\nIf this logic had instead been implemented using traditional Rust macros, many of these issues would only surface later during macro expansion or execution, making them harder to trace and debug. CGP’s generic dispatchers, by contrast, offer the same level of automation while remaining transparent and fully type-checked.\nThe MatchWithValueHandlers and MatchWithValueHandlersRef dispatchers are just two examples of CGP’s modular dispatching infrastructure. CGP provides a family of such dispatchers, each tuned for a particular use case — whether by value, by reference, or with more specialized patterns. These dispatchers are designed to be extensible and interchangeable, giving you fine-grained control over how your logic is routed while preserving flexibility.\nWith both evaluation and Lisp transformation now wired into the same interpreter context, the system is able to evaluate expressions to numeric results or convert them into Lisp-style syntax trees, all from the same MathExpr type. The modularity, reusability, and compile-time guarantees of this architecture make CGP a powerful and scalable tool for building language runtimes and transformation pipelines in Rust.\nAdvanced Techniques\nBinary Operator Provider\nWhen examining the implementations of PlusToLisp and TimesToLisp, it quickly becomes clear that they follow nearly identical patterns. Aside from the specific operator symbol and the input types, the transformation logic is the same. This duplication presents a perfect opportunity for further abstraction.\nBy extracting the shared structure, we can implement a generalized provider, BinaryOpToLisp, that handles both Plus and Times expressions using a single implementation:\n\nThis provider introduces a generic Operator type, which is expected to represent the binary operator as a type-level string, such as \"+\" or \"*\". To support this, Operator must implement both Default and Display. These traits allow the provider to convert the operator type into a string during execution, which is then used to create a LispSubExpr::Ident variant representing the operation.\nThe input to this provider is any MathSubExpr — which could be Plus, Times, or any other binary expression type — that implements the BinarySubExpression trait:\n\nBy annotating this trait with #[cgp_auto_getter], CGP can automatically implement it for any struct that contains left and right fields of type Box&lt;Expr&gt;. This removes the need to manually implement the trait for each binary operator type and allows the generic provider to access subexpressions in a uniform way.\nTo connect this trait to the right expression type, we introduce the HasMathExprType trait:\n\nThis trait plays a similar role to HasLispExprType, allowing us to define the abstract MathExpr type outside of the generic parameters of the provider. It ensures that the right type is used consistently throughout the system and helps avoid ambiguity when specifying the generic parameter for BinarySubExpression.\nThe body of compute_ref mirrors the logic we saw earlier. We evaluate both the left and right subexpressions recursively, construct a Lisp identifier by calling Operator::default().to_string(), and then build a list containing the operator followed by the operands. The resulting Lisp structure is then upcast into the final LispExpr type.\nWith this reusable provider in place, we can now eliminate the separate implementations for PlusToLisp and TimesToLisp, and wire both operators through a single generic provider in our component configuration:\n\nHere, we map Plus&lt;MathExpr&gt; and Times&lt;MathExpr&gt; to the same BinaryOpToLisp provider, each with a different Symbol! type-level string.\nThanks to CGP’s expressive delegation system and powerful match-based dispatching via MatchWithValueHandlersRef, this setup allows us to write reusable, composable transformation logic. Rather than duplicating the same structure across multiple providers, we define it once in a generic form and let the type system handle the rest.\nCode-Based Dispatching\nEarlier, we explored the difference between the Computer and ComputerRef traits and saw how ComputerRef offers a cleaner and more efficient interface for computations that don’t require ownership of the input. This naturally applies to our evaluation logic as well — after all, an evaluator only needs to borrow the expression, not consume it.\nHowever, once we refactor our EvalAdd, EvalMultiply, and other evaluation providers to use ComputerRef, we run into a challenge: we’ve already wired ComputerRefComponent for the purpose of transforming expressions to Lisp. How do we now support both evaluation and transformation using the same trait?\nThis is where the Code parameter in the ComputerRef trait comes into play. If you’ve read about Hypershell’s design, you’ll recognize Code can be used to build type-level DSLs to encode the kind of operation we want to perform. In our interpreter, we can apply the same idea to distinguish between different computation intentions — for example, evaluation vs. conversion.\nLet’s begin by defining two types that represent our operations at the type level:\n\nThese act as “statements” in our interpreter DSL. Eval represents program evaluation, while ToLisp represents conversion into Lisp syntax. This gives us a lightweight and expressive way to route logic based on the kind of computation we want to perform.\nWith that in place, we can define a single provider for handling Plus expressions, where the behavior is determined by the Code:\n\nHere, we use delegate_components! to define a new provider called HandlePlus. Inside it, we delegate the ComputerRefComponent implementation to UseDelegate, which performs Code-based dispatching based on the newly created dispatch table PlusHandlers. If the Code is Eval, it uses EvalAdd. If it’s ToLisp, it uses BinaryOpToLisp&lt;Symbol!(\"+\")&gt;.\nThanks to CGP’s blanket implementations, HandlePlus automatically becomes a valid ComputerRef provider for Plus&lt;Expr&gt; — delegating to the appropriate providers based on Code.\nWe could also have achieved similar functionality by writing two separate impl blocks for HandlePlus, like this:\n\nThis works too, but it introduces friction. Each impl must be written in the same crate as the type it targets (in this case, HandlePlus). That restricts how you organize your code. If you wanted to group all Eval logic into one crate and all ToLisp logic into another, this approach would make it more challenging to separate the implementations.\nUsing delegate_components!, on the other hand, gives you complete modularity. You can define EvalAdd and BinaryOpToLisp in completely separate places, and only compose them when building the actual interpreter.\nWe follow this same pattern for Times and Literal:\n\nFinally, we define a top-level dispatcher that handles the MathExpr enum itself:\n\nNow that we’ve defined these composed providers, we can plug them into the interpreter’s wiring:\n\nAt this point, we’ve created a two-layer dispatch system. The first layer selects a handler based on the input type — e.g., Plus&lt;MathExpr&gt;. The second layer selects a handler based on the code type — e.g., Eval vs. ToLisp.\nThis approach is flexible and composable. You could just as easily reverse the order, grouping logic by Code first and dispatching on the input type second. That may make more sense if you’re organizing your project by functionality (say, all evaluation logic in one crate, all Lisp transformation logic in another).\nImportantly, the dispatch ordering is entirely compile-time and has no impact on performance. CGP uses Rust’s type system and monomorphization to resolve all this dispatch at compile time, so whether you dispatch by Input first or Code first, the result is the same: fast, zero-cost, strongly typed behavior.\nThis layered dispatch model is one of CGP’s superpowers. It enables you to write simple, focused components and compose them in flexible, scalable ways — without macros, runtime reflection, or boilerplate.\nExtending MathExpr\nWith the basic interpreter in place, supporting addition and multiplication, it’s natural to explore how we can extend the language further. To demonstrate the modularity and flexibility of CGP, let’s add two new features: subtraction and negation. These are simple but meaningful enhancements that allow us to test how well our interpreter handles incremental language growth.\nNow, one could argue that subtraction and negation are not strictly necessary in the core language. After all, both operations can be expressed using multiplication by -1. But while this may be theoretically sound, practical language design often involves more than minimalism. By promoting these features to first-class status, we can greatly improve the ergonomics of writing and reading programs in the language.\nThis kind of design decision mirrors broader discussions in language evolution. Consider CGP itself. While we’ve built everything so far using CGP purely as a Rust library, it’s conceivable to imagine CGP becoming a native feature of the language. From a purist’s perspective, native support might not seem essential — after all, we’ve shown that powerful, compile-time generics-based programming is already achievable today. But once a tool like CGP becomes central to how systems are built, native support brings significant benefits: smoother integration, better diagnostics, and a lower learning curve.\nIn fact, if Rust were implemented using CGP from the start, it would be much easier to extend the language with features like CGP itself. There would be no need to fork the compiler or jump through macro-related hoops. Extensions could be introduced as structured additions to the language, just as we are now extending our interpreter with new syntax.\nDefining the MathPlusExpr Expression Type\nTo see how CGP enables modular language extension, let’s define a new expression type — MathPlusExpr — that expands on our original MathExpr. Crucially, this new enum does not replace the old one. Instead, it lives alongside it, allowing us to demonstrate how CGP supports language variants and extensions without duplicating logic or entangling implementations.\n\nAt a glance, MathPlusExpr looks much like MathExpr, but it includes two new variants: Minus for subtraction and Negate for unary negation. For the original variants — addition, multiplication, and literals — we continue to use the same generic sub-expression types as before, now instantiated with MathPlusExpr.\nWe’ve also changed the numeric type for Literal from u64 to i64, enabling the representation of negative values. This change may seem minor, but it highlights an important feature of the system: the ability to evolve types naturally without breaking compatibility. Thanks to CGP’s generic approach, providers like EvalAdd and EvalMultiply still work seamlessly. Since i64 also implements Add and Mul, the existing evaluators remain fully reusable without modification.\nFor the two new variants, we define their associated sub-expression types just as we did before:\n\nImplementing Eval Providers\nWith our extended expression language in place, the next step is to implement evaluation logic for the new constructs. We begin with subtraction. The evaluator for Minus is straightforward and closely mirrors what we’ve already done for addition and multiplication. The only real difference is that we now use the Sub trait to handle the subtraction operation.\n\nWe follow a similar pattern for the Negate expression. Since negation is a unary operation, its implementation is even simpler. We compute the value of the inner expression, then apply the Neg trait to produce the final result.\n\nWiring of InterpreterPlus\nTo complete the extension, we define a new context called InterpreterPlus. This context wires together the evaluation logic for our extended expression language, including subtraction and negation.\n\nThanks to CGP’s modular design, implementing InterpreterPlus requires only a few dozen lines of code. The core task here is to dispatch each sub-expression type to its corresponding provider. We also define a context-specific wrapper implementation that enables recursive evaluation through MatchWithValueHandlersRef. This approach highlights how CGP makes it easy to extend and organize language features cleanly and efficiently.\nOmitting To-Lisp Implementations\nAt this stage, you might assume that supporting to-Lisp conversion for MathPlusExpr is necessary before proceeding further. However, when rapidly prototyping new language extensions, it is often desirable to skip implementing less critical features like to-Lisp conversion and focus solely on the core logic, such as evaluation.\nThis is where CGP shines. You can choose not to implement certain language features — like to-Lisp conversion for MathPlusExpr — and still have your evaluation code compile and work perfectly without any extra effort.\nThis stands in stark contrast to typical Rust designs that rely on heavyweight traits with many methods. In those cases, introducing a new type like MathPlusExpr usually forces you to provide boilerplate implementations, often filled with unimplemented!(), just to satisfy the compiler. This can quickly become cumbersome and confusing, making it hard to know which methods are truly essential for an initial prototype.\nWith CGP, the minimal trait design and lazy wiring mean that components are only checked for implementation when they are actually used. As a result, you can safely defer adding to-Lisp conversion for Minus and Negate without worrying about subtle runtime panics or crashes caused by missing implementations.\nThanks to CGP’s flexibility and strong compile-time guarantees, once your code compiles, you can trust that missing non-essential features won’t break your core functionality — allowing you to focus on what matters most in early development.\nConclusion\nBy now, we’ve seen how extensible variants and the CGP visitor pattern open up a new frontier in modular interpreter design. You can find the full source code of the examples in this article at our GitHub repository.\nRather than tying our logic to rigid enums or bloated visitor traits, we’ve been able to deconstruct and evaluate expressions with reusable, decoupled components — all backed by strong compile-time guarantees. Whether we’re evaluating arithmetic, transforming into Lisp, or handling richer variants down the line, each operation remains isolated, composable, and safe.\nThis is more than a workaround for the expression problem — it’s a foundational shift in how we think about data structures and operations in Rust. With CGP, you no longer need to trade off between extensibility and type safety. You can add new variants without touching existing code, and build interpreters or transformers that evolve organically with your domain.\nIn Part 3 of this series, Implementing Extensible Records, we will dive into the underlying implementation details of extensible records, and how the extensible builder pattern is built on top of it. We will cover the concepts of partial records, and the use of traits such as BuildField and FinalizeField to represent row constraints.\n","id":"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/","title":"Programming Extensible Data Types in Rust with CGP - Part 2: Modular Interpreters and Extensible Visitors"},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"body":"Discuss on Reddit, GitHub or Discord.\nRecap\nThis is the third part of the blog series on Programming Extensible Data Types in Rust with CGP. You can read the first and second parts here.\nAs a recap, we have covered the new release of CGP v0.4.2 which now supports the use of extensible records and variants, allowing developers to write code that operates on any struct containing specific fields or any enum containing specific variants, without needing their concrete definition.\nIn the first part of the series, Modular App Construction and Extensible Builders, we demonstrated an example use of the extensible builder pattern, which uses extensible records to support modular construction of an application context.\nSimilarly, in the second part of the series, Modular Interpreters and Extensible Visitors, we saw how the modular visitor pattern allows us to implement evaluation and to-Lisp conversion for each variant of a language expression enum using separate visitor providers.\nAt this point, you’ve likely seen how these patterns can make real-world applications more modular and maintainable. If these examples have convinced you of CGP’s practical value, that’s great. But if you still feel the examples are not grounded enough in production use cases, you are welcome to pause here and revisit CGP later.\nThe next 2 parts of the series are aimed at readers who want to go deeper — those interested in how CGP implements extensible data types under the hood and who might even want to contribute to CGP itself by helping to build the real-world examples you’re looking for.\nWe will first explore the implementation of extensible records in this part, followed by the implementation of extensible variants in the coming Part 4.\nSeries Overview\nPart 1: Modular App Construction and Extensible Builders – In this introductory part, we present a high-level overview of the key features enabled by extensible data types. We then dive into a hands-on demonstration showing how extensible records can be used to build and compose modular builders for real-world applications.\nPart 2: Modular Interpreters and Extensible Visitors – This part continues the demonstration by introducing extensible variants. We use them to address the expression problem, implementing a set of reusable interpreter components for a small toy language.\nPart 3: Implementing Extensible Records (this post) – Here, we walk through the internal mechanics behind extensible records. We show how CGP supports the modular builder pattern demonstrated in Part 1 through its underlying type and trait machinery.\nPart 4: Implementing Extensible Variants – This part mirrors Part 3, but for extensible variants. We examine how extensible variants are implemented, and compare the differences and similarities between extensible records and variants.\nUnderlying Theory\nThe design of extensible data types in CGP is inspired by a rich body of research in the programming languages community. In particular, CGP draws heavily from the implementation techniques found in datatype-generic programming in Haskell, as well as ideas presented in the paper Abstracting extensible data types: or, rows by any other name. Concepts similar to CGP’s have also appeared in other languages under names like row polymorphism and polymorphic variants.\nWhile it might be too academic — or simply too dry — for this post to delve into all the theoretical differences between CGP and these approaches, it’s worth highlighting one essential distinction: CGP’s seamless integration of extensible data types with the CGP system itself. This tight integration sets CGP apart by making the extensibility not just a design principle, but a native part of how you build and scale software in Rust.\nConstraint Propagation Problem\nAt the heart of CGP lies a powerful solution to a common challenge:\nhow can we compose two generic functions that each rely on their own row constraints, and automatically propagate those constraints into the resulting composed function?\nTo illustrate this problem, consider the following simple example:\n\nIn this example, we define two functions that extract the first_name and last_name fields from a generic Context type and convert them to strings. The trait HasField is used to represent a row constraint, where field names are expressed as type-level strings using Symbol!.\nNow, suppose we want to combine the output of these two functions into a full name string. We can write a function that explicitly concatenates the two results, like so:\n\nThis works, but requires us to manually specify all the field constraints in the function signature. This becomes increasingly cumbersome as the number of required constraints grows.\nMore critically, it becomes difficult to write generic higher-order functions that can accept any two such functions with their own constraints, and automatically compose them into a new function that correctly propagates those constraints. For instance, consider this naive attempt:\n\nHere, concate_outputs takes two functions and returns a new one that calls both and concatenates their results. However, the function signature does not capture the constraints required by fn_a and fn_b. As a result, when we use this to build a composed function, we still have to restate all of the necessary constraints explicitly:\n\nThis works within the body of a function, but it prevents us from defining the composed function as a top-level value. In other words, we cannot simply write something like:\n\nand then export that directly from a module. The constraints must still be manually declared somewhere, limiting the expressiveness and reusability of our composition.\nType-Level Composition\nIn many programming languages research, solving the problem of constraint-aware function composition typically requires advanced language features like constraint kinds. These features allow constraints to be expressed and manipulated at the type level, enabling functions with different requirements to be composed seamlessly. However, languages like Rust do not yet support these advanced capabilities. This limitation has been one of the major reasons why extensible data types have not seen broader adoption in the Rust and other mainstream languages.\nThe breakthrough that CGP introduces is the ability to perform this kind of composition in Rust today — without waiting for the language to evolve. The key insight is to represent functions as types, and then use CGP's system of traits and type-level programming to manage composition and constraint propagation.\nTo see how this works, let’s begin by transforming two basic functions into CGP providers. Instead of writing traditional functions, we define FirstNameToString and LastNameToString as types that implement the ComputerRef trait:\n\nIn this setup, FirstNameToString and LastNameToString are no longer standalone functions, but rather types that can be plugged into the CGP system. Each type implements the ComputerRef trait and specifies its output as a String. For simplicity, we ignore the Code and Input parameters, as they are not essential for this example.\nOnce we have our functions defined as types, we can now build a new provider that composes them:\n\nConcatOutputs acts as a higher-order provider: it composes two other providers and returns a new one that computes both and combines their results. This is conceptually similar to a higher-order function that takes two closures and returns a new closure, except that it operates entirely at the type level. It requires that both inner providers implement ComputerRef and produce outputs that implement Display, ensuring that both results can be formatted into a string.\nThe real power of this approach becomes evident when we compose the two providers with a simple type alias:\n\nWith this definition, FullNameToString behaves like a single provider that computes the full name by combining the first and last name. What’s remarkable is that we don’t need to explicitly restate the underlying constraints from FirstNameToString and LastNameToString. Those constraints are inferred and propagated automatically, and will only be enforced at the point where FullNameToString is actually used.\nThis programming model effectively introduces lazy type-level computation. The logic for computing outputs is driven by trait implementations at the type level, but the actual evaluation only occurs when the provider is invoked. This allows CGP to perform complex, constraint-aware compositions without requiring language-level support.\nBase Implementation\nHasField Trait\nNow that we have a clearer understanding of how CGP builds on extensible data types, it is time to take a closer look at the key field-related traits that CGP introduces to support this functionality. We begin with the simplest and most foundational trait: HasField.\nThe HasField trait has been part of CGP since its early versions, but it is still worth revisiting here to bridge the gap toward the more advanced constructs that follow. Its definition is straightforward:\n\nThis trait provides read-only access to individual fields of a struct, using Tag as the field identifier. The tag indicates which field we want to access, and can take one of two forms depending on the struct: Symbol!(\"first_name\") for named fields, or Index&lt;0&gt; for tuple-style fields. The associated type Value represents the type of the field being accessed, and the get_field method returns a reference to that field.\nThe use of PhantomData&lt;Tag&gt; as an argument may look unusual at first, but it plays a critical role in allowing Rust to infer which field is being requested. When multiple HasField implementations are available for a type, this allows the compiler to resolve the correct one.\nConsider the following struct:\n\nWhen the HasField macro is derived, it automatically generates implementations for both fields as follows.\n\nThis allows generic code to access either field in a type-safe way without requiring access to the concrete types.\nWith HasField, we can write code that reads from a subset of fields on a struct, enabling a flexible and reusable programming model. However, if we want to construct such subsets — as is required for the extensible builder pattern — we will first need to introduce a few additional building blocks.\nPartial Records\nOne of the core limitations of Rust’s struct system is that when constructing a value, you must provide values for all of its fields. This rigidity makes it difficult to build structs in a piecemeal fashion. To overcome this, CGP introduces the idea of partial records — a way to represent a struct with some fields intentionally left out.\nLet’s consider the same Person struct used previously:\n\nWhen we derive the BuildField trait for this struct, CGP automatically generates a corresponding partial version of the struct called PartialPerson:\n\nHere, F0 and F1 are type parameters that must implement the MapType trait. These type parameters control whether each field is present or not in a given instance of the partial struct.\nThe MapType trait is defined as follows:\n\nThis trait uses a generic associated type (GAT) called Map to determine how the original field types should be transformed. In particular, Map&lt;T&gt; will either be T itself (if the field is present) or a placeholder type () (if the field is missing).\nTo support this, CGP provides two implementations of the MapType trait. The first is IsPresent, which maps a type to itself to indicate that a field is included:\n\nThe second is IsNothing, which maps every type to () to indicate that the field is absent:\n\nTo see how this works in practice, suppose we want to construct a partial Person value that only includes the first_name field. We can instantiate the type as PartialPerson&lt;IsPresent, IsNothing&gt;, where F0 = IsPresent and F1 = IsNothing. The resulting type expands to:\n\nThis means we can create a partial instance like this:\n\nHasBuilder Trait\nOnce we have defined a partial record struct, we can introduce the HasBuilder trait. This trait allows us to initialize a partial record where all fields are absent by default:\n\nThe HasBuilder trait defines an associated type called Builder, which represents the initial form of the partial record. The key requirement is that this Builder must have all of its fields empty, since the builder() method constructs it without requiring any input.\nFor the Person struct, we can implement the HasBuilder trait as follows:\n\nIn this implementation, the initial Builder is simply a PartialPerson type where both field parameters use the IsNothing type mapper. To construct the empty builder, we initialize each field with its mapped type, which for IsNothing is always the unit type (). This gives us a clean and predictable starting point for incrementally building up a complete Person instance.\nBuildField Trait\nWith the initial builder in place, the next step is to define the BuildField trait, which enables us to incrementally populate fields in the partial record. This trait is defined as follows:\n\nThe BuildField trait is parameterized by a Tag type, which identifies the field being constructed, just like in the HasField trait. It also includes an associated type Value, representing the type of the field being added.\nThe trait additionally includes an associated type Output, which represents the new type of the builder after the field has been inserted. This Output type is essential because each insertion updates the builder’s type parameters, effectively transforming it into a new type that reflects the presence of additional fields.\nThe build_field method takes ownership of the current builder and consumes the new field value, returning an updated builder that includes the newly added field.\nTo see how this works in practice, consider the implementation of BuildField for the first_name field of the PartialPerson struct:\n\nIn this implementation, we define BuildField&lt;Symbol!(\"first_name\")&gt; for a PartialPerson where the first_name field is absent (IsNothing) and the last_name field is parameterized generically as F1. This means the implementation will work regardless of whether last_name is present or not. We specify the Value as String, which matches the type of first_name, and set the Output type to a new PartialPerson where the first parameter has been updated to IsPresent. The second parameter remains unchanged to preserve the existing state of last_name.\nThe method body constructs a new PartialPerson where the first_name field is now set to the given value, while the last_name field is carried over from the original builder.\nSimilarly, we can define BuildField for the last_name field:\n\nIn this case, the generic parameter F0 tracks the state of first_name, while IsNothing ensures that last_name is not yet present. The logic follows the same structure as the earlier implementation, simply updating the appropriate field.\nWith these implementations in place, we can now use the HasBuilder and BuildField traits together to construct a Person incrementally:\n\nNotably, the order in which fields are built does not matter. The type transformations ensure correctness regardless of sequencing, so the builder also works if we construct the last_name field first:\n\nThis gives developers the freedom to build up records in any order while maintaining type safety.\nFinalizeBuild Trait\nThe previous example demonstrated how the builder and build_field methods can be used to construct values in the style of a fluent builder pattern. However, it is important to note that the result of the final build_field call is still a PartialPerson&lt;IsPresent, IsPresent&gt;, not a fully constructed Person.\nThis limitation arises because each BuildField implementation for PartialPerson is only responsible for inserting a single field. The presence or absence of other fields is abstracted away through generic type parameters, which means that the implementation cannot detect when the final field has been added. Consequently, there is no opportunity to directly return a Person value when the last required field is set.\nWhile this might make the final construction step slightly more verbose, it is a deliberate trade-off. The generic nature of BuildField is what allows fields to be built in any order without having to implement every possible combination of partially constructed records — something that would otherwise result in an overwhelming combinatorial explosion of implementations.\nTo resolve this, CGP introduces the FinalizeBuild trait. This trait is used once the builder has been fully populated, converting the complete PartialPerson into a proper Person value:\n\nThe FinalizeBuild trait defines an associated Output type, representing the final constructed result. The finalize_build method takes ownership of the builder and transforms it into the desired output.\nFor PartialPerson, the trait is implemented as follows:\n\nThis implementation only applies when all fields are marked as present. At this point, the builder contains all the data necessary to construct a Person, so the conversion is a straightforward transfer of fields.\nWith this in place, the build process becomes complete by appending a call to finalize_build:\n\nTogether, the partial record struct and the traits HasBuilder, BuildField, and FinalizeBuild form a solid and ergonomic foundation for supporting extensible records in CGP. All of these pieces are automatically generated by the #[derive(BuildField)] macro. We do not use multiple derive macros here, so as to ensure consistency and correctness, eliminating the possibility of compilation failures due to the user missing to derive one of these traits.\nImplementation of Record Merges\nWith the field builder traits in place, we can now explore how the earlier struct building method build_from can be implemented to support merging a Person struct into a superset struct such as Employee.\nBefore we can implement build_from, we first need a few more supporting constructs to enable the merging operation.\nIntoBuilder Trait\nIn typical usage, partial records begin in an empty state and are gradually populated with field values until they can be finalized into a complete struct. However, we can also go in the opposite direction by converting a fully constructed struct into a partial record where all fields are present, and then progressively remove fields from it, one by one, until none remain.\nThis reverse direction is particularly important for the merging process, where we need to move fields out of a source struct and insert them into a target partial record, field by field.\nTo support this, we introduce the IntoBuilder trait:\n\nThis trait mirrors the structure of HasBuilder, with an associated Builder type that represents a partial record in which all fields are populated. The key difference is that into_builder consumes the original struct and produces its fully populated partial record equivalent.\nThe implementation of IntoBuilder for Person looks like this:\n\nIf you compare this to the implementation of the earlier FinalizeBuild trait, you’ll see that they are nearly identical in structure. The only difference is the direction of conversion — IntoBuilder transforms a Person into a PartialPerson&lt;IsPresent, IsPresent&gt;, while FinalizeBuild does the reverse.\nEven though these interfaces are similar, we define IntoBuilder and FinalizeBuild as separate traits. This distinction is valuable because it makes the intent of each trait clear and prevents accidental misuse. Each trait captures a specific stage in the lifecycle of a partial record, whether we are constructing it from scratch, building it up field by field, or tearing it down for merging.\nTakeField Trait\nNow that we have the IntoBuilder trait to help convert a struct into a fully populated partial record, we also need a way to extract individual fields from that partial record. This is where the TakeField trait comes in. It serves as the opposite of BuildField, allowing us to take a field value out of a partial record:\n\nThe Tag and Value types in TakeField behave just like they do in BuildField and HasField. What is new here is the associated type Remainder, which represents the state of the partial record after the specified field has been removed. The take_field method consumes self and returns a tuple containing the extracted field value along with the updated remainder of the partial record.\nAs an example, here is the TakeField implementation for extracting the first_name field from a PartialPerson:\n\nAs shown, this implementation is defined for a PartialPerson where the first generic parameter is IsPresent, indicating that the first_name field is available to be taken. In the resulting Remainder, that parameter is updated to IsNothing, reflecting the removal of the field. The method itself returns the first_name value and a new partial record with first_name cleared and the rest of the fields left untouched.\nThis setup provides the building blocks needed to flexibly extract and transfer fields, which is essential for safely merging one struct into another.\nHasFields Trait\nWith IntoBuilder available, we can now begin transferring fields from a source struct into a target partial record by peeling them off one at a time. To enable this process generically, we need a mechanism to enumerate the fields of a struct so that generic code can discover which fields are available for transfer.\nThis is where the HasFields trait comes into play. It is defined as follows:\n\nThe HasFields trait includes a single associated type called Fields, which holds a type-level list representing all the fields of the struct. For example, here is how HasFields would be implemented for the Person struct:\n\nOnce the fields of a struct are made available as a type-level list, this list can be used to drive type-level iteration for field-wise operations such as merging. This lays the foundation for generically moving fields between records in a structured and type-safe way.\nBuildFrom Trait\nThe build_from method is defined within the CanBuildFrom trait, which uses a blanket implementation to support merging fields from one struct into another:\n\nIn this setup, the CanBuildFrom trait is implemented for the partial record acting as the target of the merge, while the Source type is specified through a generic parameter. The trait defines an associated type Output, representing the result of merging the fields from Source into the current builder. The build_from method takes ownership of both the builder (self) and the source value, and returns a new builder that incorporates the fields from Source.\nThe blanket implementation of CanBuildFrom imposes several trait bounds. First, the Source type must implement both HasFields and IntoBuilder. These traits provide access to a type-level list of fields and the ability to convert Source into a partial record with all fields present. The field list obtained from Source::Fields must also implement the FieldsBuilder helper trait. This trait is responsible for driving the merge process field by field, taking as input the Source::Builder and the target Builder (i.e., Self), and producing an Output.\nThe implementation of build_from begins by converting the source into its partial form using into_builder, then delegates the merge logic to FieldsBuilder::build_fields, which handles transferring each field in sequence.\nFieldsBuilder Trait\nThe FieldsBuilder trait is a private helper used exclusively by the CanBuildFrom trait. It is defined as follows:\n\nUnlike CanBuildFrom, the parameters for FieldsBuilder are slightly reordered. The Self type represents the list of fields from the source struct, while Source and Target refer to the partial records we are merging from and into. The goal of this trait is to drive type-level iteration across the list of fields, one by one, and move each field from the source to the target.\nTo accomplish this, we start with an implementation that matches on the head of the Fields list:\n\nHere, we pattern match the Fields type to Cons&lt;Field&lt;Tag, Value&gt;, RestFields&gt;, allowing us to extract the field name Tag and its type Value. Given this information, we require that the Source partial record implements TakeField and that the Target partial record implements BuildField, both using the same Tag and Value.\nWe then handle the remaining fields recursively by requiring RestFields to implement FieldsBuilder, using the Remainder type from TakeField as the next Source, and the Output type from BuildField as the next Target. This enables a seamless hand-off from one field to the next during the merging process.\nThe recursive chain is terminated by the base case, when there are no more fields left to process:\n\nIn this final implementation, the Source partial record is now fully depleted — all fields have been taken out — so we simply return the Target, which now contains all the merged fields.\nExample Use of BuildFrom\nThe implementation of FieldsBuilder can appear intimidating at first, particularly for readers unfamiliar with type-level programming. To make the process more approachable, let’s walk through a concrete example using BuildFrom to illustrate what actually happens under the hood.\nConsider a new struct named Employee, which contains the same fields as Person, along with an additional field called employee_id:\n\nWe begin by constructing a Person value. After that, we can use build_from to merge its contents into a partially built Employee:\n\nWhen we call build_from, several steps take place behind the scenes:\n\nThe type PartialEmployee&lt;IsNothing, IsNothing, IsNothing&gt; is required to implement CanBuildFrom&lt;Person&gt;.\n\nThe Person type implements HasFields::Fields as:\n\nPerson also implements IntoBuilder, producing PartialPerson&lt;IsPresent, IsPresent&gt; as its Builder.\n\n\nPerson::Fields must then implement FieldsBuilder&lt;PartialPerson&lt;IsPresent, IsPresent&gt;, PartialEmployee&lt;IsNothing, IsNothing, IsNothing&gt;&gt;.\n\nThe first Cons in the list matches:\n\nTag is Symbol!(\"first_name\")\nValue is String\nRestFields is Cons&lt;Field&lt;Symbol!(\"last_name\"), String&gt;, Nil&gt;\n\n\nPartialPerson&lt;IsPresent, IsPresent&gt; implements TakeField&lt;Symbol!(\"first_name\"), Value = String&gt;, resulting in:\n\nA Remainder of PartialPerson&lt;IsNothing, IsPresent&gt;\n\n\nPartialEmployee&lt;IsNothing, IsNothing, IsNothing&gt; implements BuildField&lt;Symbol!(\"first_name\"), Value = String&gt;, producing:\n\nAn Output of PartialEmployee&lt;IsNothing, IsPresent, IsNothing&gt;\n\n\n\n\nThe remaining fields, Cons&lt;Field&lt;Symbol!(\"last_name\"), String&gt;, Nil&gt;, must now implement FieldsBuilder&lt;PartialPerson&lt;IsNothing, IsPresent&gt;, PartialEmployee&lt;IsNothing, IsPresent, IsNothing&gt;&gt;.\n\nThis matches:\n\nTag is Symbol!(\"last_name\")\nValue is String\nRestFields is Nil\n\n\nPartialPerson&lt;IsNothing, IsPresent&gt; implements TakeField&lt;Symbol!(\"last_name\"), Value = String&gt;, giving:\n\nA Remainder of PartialPerson&lt;IsNothing, IsNothing&gt;\n\n\nPartialEmployee&lt;IsNothing, IsPresent, IsNothing&gt; implements BuildField&lt;Symbol!(\"last_name\"), Value = String&gt;, yielding:\n\nAn Output of PartialEmployee&lt;IsNothing, IsPresent, IsPresent&gt;\n\n\n\n\nFinally, the Nil case implements FieldsBuilder&lt;PartialPerson&lt;IsNothing, IsNothing&gt;, PartialEmployee&lt;IsNothing, IsPresent, IsPresent&gt;&gt;, which concludes by returning:\n\nPartialEmployee&lt;IsNothing, IsPresent, IsPresent&gt; as the final Output.\n\n\n\nAlthough these steps may seem complex at first glance, a closer look reveals that the process simply moves each field from the PartialPerson instance into the PartialEmployee, one at a time. What makes this look more complicated is not the logic itself, but the fact that it is encoded entirely at the type level using traits and generics, rather than as regular Rust code.\nIf any part of this explanation remains unclear, it might be helpful to paste this blog post — or just this sub-section — into your favorite LLM and ask it to explain the process in simpler terms. Hopefully, the explanation provided here is already clear enough for an LLM to understand, so that it can in turn help make this pattern more accessible to developers who are still learning the intricacies of type-level programming.\nBuilder Dispatcher\nWith the BuildFrom trait in place, we can now explore how CGP implements generalized builder dispatchers that enable flexible and reusable ways to assemble struct fields from various sources.\nBuildWithHandlers Provider\nIn earlier examples, we used a utility called BuildAndMergeOutputs to combine outputs from multiple builder providers such as BuildSqliteClient, BuildHttpClient, and BuildOpenAiClient. Under the hood, BuildAndMergeOutputs is built upon a more fundamental dispatcher named BuildWithHandlers. The implementation of this dispatcher looks like the following:\n\nThe BuildWithHandlers struct is parameterized by an Output type, which is the final struct we want to construct, and a Handlers type, which represents a type-level list of builder handlers. These handlers will be used to incrementally populate the fields of the Output struct.\nThis provider implements the Computer trait for any combination of Context, Code, and Input, although the Input parameter is intentionally ignored. To begin, the dispatcher requires the Output type to implement HasBuilder, which gives access to an initially empty partial record through Output::builder().\nOnce the empty builder is obtained, it is passed as input to PipeHandlers&lt;Handlers&gt;, a pipeline that applies each handler in the list to progressively build up the partial record. The result of this pipeline must implement FinalizeBuild, allowing it to be converted into the fully constructed Output struct.\nAnd yes, if you're wondering whether this PipeHandlers is the same one used in Hypershell to build shell-like command pipelines — the answer is absolutely yes. BuildWithHandlers operates by initializing an empty partial record, passing it through a chain of handlers using PipeHandlers, and then finalizing the result into a complete struct. It’s the same elegant piping mechanism, just applied to a different domain.\nThis reuse of core abstractions like Pipe and Handler across different systems is one of the most powerful aspects of CGP. These components weren’t designed just for piping shell commands — they were built to support general-purpose function composition, a core concept in functional programming.\nExample Use of BuildWithHandlers\nThe BuildWithHandlers trait serves as the foundational builder dispatcher in CGP. It is the low-level mechanism behind higher-level dispatchers like BuildAndMergeOutputs, and understanding it provides valuable insight into how CGP composes complex data construction pipelines.\nLet’s walk through a concrete example to illustrate how BuildWithHandlers works in practice.\nSuppose we have two Computer providers: one that constructs a Person and another that produces a u64 value for the employee_id field. We can use BuildWithHandlers to compose these providers and construct an Employee.\nWe begin by implementing the two providers as simple functions using the #[cgp_producer] macro:\n\nThe #[cgp_producer] macro generates provider implementations (named BuildPerson and BuildEmployeeId) that wrap these functions. These implementations conform to the Computer trait by automatically calling the associated function. This macro allows pure functions to be used as providers with minimal boilerplate, especially useful when you don't need to depend on the generic Context or Code parameters.\nNow, with both providers defined, we can compose them using BuildWithHandlers like so:\n\nIn this example, we tell BuildWithHandlers that the final struct we want to build is Employee. We then provide a list of two builder handlers:\n\nBuildAndMerge&lt;BuildPerson&gt; wraps the BuildPerson provider. It first calls the provider to build a Person, then uses BuildFrom to merge the resulting fields into the PartialEmployee builder.\nBuildAndSetField&lt;Symbol!(\"employee_id\"), BuildEmployeeId&gt; wraps the BuildEmployeeId provider. It calls the provider to get the u64 value and then uses BuildField to assign that value to the employee_id field.\n\nWe invoke compute on the specialized BuildWithHandlers, using unit types () as dummy arguments for Context, Code, and Input. In real-world applications, these types would typically carry contextual information such as configurations or runtime.\nThis example demonstrates the flexibility of BuildWithHandlers. You’re not limited to merging entire record subsets — you can also work with providers that produce individual field values, then insert them into specific fields using composable builder logic.\nBuildAndMerge\nThe BuildAndMerge adapter is relatively simple and is defined as follows:\n\nBuildAndMerge wraps an inner provider (such as BuildPerson) and expects the current Builder — a partial record for the target struct — as input. The inner provider is invoked with a reference to this builder as its inner input, allowing it to inspect any fields that may already be set. This feature enables more advanced scenarios where intermediate results influence later ones.\nAfter the inner provider returns a value, BuildAndMerge uses the BuildFrom trait to merge the result into the existing builder. The merged builder is then returned as output.\nIn simpler cases like BuildPerson, the input builder is ignored, so the trait bounds are trivially satisfied. But the mechanism still works the same way: take a value and merge its fields into the partial record.\nBuildAndSetField\nThe BuildAndSetField adapter works similarly but focuses on setting a single field rather than merging a full record:\n\nInstead of calling BuildFrom, this adapter uses the BuildField trait to assign a value to a specific field. The field to be set is identified by Tag, and its value comes from the wrapped provider.\nThis adapter is ideal for cases where you have an individual value (such as u64) and want to insert it into a specific field (like employee_id).\nMapFields Trait\nIn the previous example, we saw how to use BuildWithHandlers with a list of individual providers — each wrapped in BuildAndMerge or BuildAndSetField — to build a composite struct. This same pattern is what powers higher-level dispatchers like BuildAndMergeOutputs.\nSince the pattern of wrapping a list of handlers is so common, CGP provides the MapFields trait to simplify the process. Here’s how it’s defined:\n\nThe MapFields trait enables type-level mapping over a type-level list — very similar to how .iter().map() works on value-level lists in Rust. You pass in a Mapper that implements the MapType trait, and it is applied to each element in the list. This is the same MapType trait we’ve seen used earlier in other utilities, like IsPresent and IsNothing.\nBuildAndMergeOutputs\nNow that we have the pieces in place, we can implement BuildAndMergeOutputs as a composition of BuildWithHandlers and BuildAndMerge.\nWe start by defining a simple type mapper called ToBuildAndMergeHandler, which takes any Handler type and maps it to a BuildAndMerge&lt;Handler&gt;:\n\nWith that, we can define BuildAndMergeOutputs simply as a type alias. It takes an Output type and a list of handler types, and internally applies ToBuildAndMergeHandler to each handler in the list. The result is passed to BuildWithHandlers:\n\nThis implementation showcases the power of type-level composition in CGP. By combining smaller, reusable components like BuildWithHandlers, BuildAndMerge, and MapFields, we can construct higher-level abstractions like BuildAndMergeOutputs with minimal boilerplate and high flexibility.\nThis modular, composable design stands in contrast to traditional macro-based approaches. With macros, it’s much harder to verify that combining two smaller macros results in correct behavior — especially as the complexity grows. In contrast, with CGP's type-level constructs, each piece remains type-checked and composable under well-defined where constraints. These constraints act as a safeguard, ensuring that the combined logic remains sound and predictable.\nMoreover, this approach enables us to easily define other dispatcher variants, such as those that use BuildAndSetField instead of BuildAndMerge, without having to rewrite or duplicate core logic.\nHiding Constraints with delegate_components!\nWhile it's possible to define BuildAndMergeOutputs as a simple type alias, doing so introduces ergonomic issues when it’s used with a generic Handlers type provided by the caller.\nConsider a situation where we want to implement a provider that wraps around BuildAndMergeOutputs in order to perform validation on the result before returning it. We might write something like this:\n\nHere, BuildAndValidateOutput statically depends on BuildAndMergeOutputs by requiring that it implements Computer. However, this code won’t compile as-is. The problem is that BuildAndMergeOutputs is defined as a type alias that internally relies on a hidden constraint: Handlers: MapFields&lt;ToBuildAndMergeHandler&gt;. Since this constraint is not visible at the site of usage, the compiler now demands that we explicitly provide proof that Handlers satisfies this requirement.\nWhile we could add the missing constraint to the where clause of BuildAndValidateOutput, this reduces the ergonomics and composability of the abstraction. It requires callers to understand the internal structure of BuildAndMergeOutputs, which goes against one of the core strengths of CGP — hiding internal constraints so they don't leak into user code.\nFortunately, we can solve this by turning BuildAndMergeOutputs into a regular provider struct, and using the delegate_components! macro to delegate the Computer implementation to BuildWithHandlers, while keeping the necessary constraints encapsulated.\nHere’s how:\n\nThis macro creates a new BuildAndMergeOutputs provider that wraps BuildWithHandlers, while adding the required constraint on Handlers behind the scenes. Internally, the macro expands into a DelegateComponent implementation like the following:\n\nWith this setup, BuildAndMergeOutputs can now be used like any other CGP provider — without needing to manually restate its internal type constraints. This keeps client code clean and focused, and allows CGP abstractions to remain composable and extensible.\nThe key benefit of this pattern is that it avoids boilerplate while preserving type safety. Whenever a provider's implementation is simply a thin wrapper around another provider with some added constraints, it's much more convenient to use DelegateComponent via delegate_components! than to implement the provider trait manually.\nType-Level Metaprogramming\nThe technique we just explored — wrapping providers and using delegate_components! — can be seen as a form of metaprogramming in CGP. Here, we’re leveraging type-level programming not just within CGP’s core component abstractions like DelegateComponent, but also as a tool for programmatically defining component wiring through the use of generic parameters and trait constraints.\nThis highlights a deeper design philosophy behind CGP: rather than inventing a new meta-language or macro system, CGP embraces Rust’s existing type system and trait machinery as the foundation for composability and abstraction. Type-level programming in CGP isn’t an escape hatch — it is the underlying mechanism that makes escape hatches unnecessary.\nSome readers may find the phrase \"type-level programming\" intimidating, especially if they associate it with obscure or overly abstract code. But consider the alternatives: in many dynamic languages like Ruby, Python, or JavaScript, metaprogramming is accomplished through bespoke syntax, reflection, or runtime patching — approaches that can be powerful but often come with poor tooling, fragile semantics, and hard-to-debug behavior.\nIn contrast, type-level programming offers a principled and well-typed foundation for metaprogramming. Constraints are checked at compile time, tooling support remains robust, and the abstractions remain composable. Instead of inventing ad hoc metaprogramming constructs, CGP relies on the well-established theory and practice of type-level computation.\nBy doing so, CGP achieves a rare combination of power and predictability. Developers who embrace this pattern gain access to highly expressive abstractions, while staying within the familiar boundaries of Rust's type system.\nConclusion\nBy this point, I hope you have a clearer understanding of how CGP supports extensible records. If you are interested in exploring the implementation further, take a look at the GitHub repository, especially the cgp-field and cgp-dispatch crates, which contain the full source code.\nWith partial records and field traits such as HasField, BuildField, and TakeField, CGP enables powerful generic operations like BuildFrom, which allows one struct to be merged into another seamlessly. These building blocks form the foundation for more advanced compositional patterns.\nTo implement the extensible builder pattern, we introduced the BuildWithHandlers dispatcher. This component composes multiple builder handlers and merges their outputs using a clean and predictable build pipeline, constructed with PipeHandlers. The simplicity arises from a system where modularity is built into the core design, rather than added as an afterthought.\nOn top of this, we implemented the high-level BuildAndMergeOutputs dispatcher by defining a conditional delegation to BuildWithHandlers, after first wrapping each handler using the BuildAndMerge adapter. This design preserves composability while allowing for customized construction logic.\nFuture Extensions\nBecause extensible records and builders are implemented modularly, it is easy to extend the system further without rewriting the core. For instance, the current builder pattern requires the source struct to match the target struct exactly, but we may want to allow certain fields to be dropped rather than merged.\nWe might also want to support overriding existing fields in a partial record when the same field appears in multiple sources. Additionally, it would be useful to finalize a partial record by filling in any missing fields with default values.\nThese enhancements are already within reach, and we plan to support them in future versions of CGP. Even if they are not included directly in the library, the existing abstractions make it easy for others to implement them independently.\nThanks to the expressive power of Rust’s type system and the composability of type-level programming, these extensions can be implemented in a way that is both straightforward and correct by construction. They remain completely optional and do not introduce additional complexity to the core logic presented here.\nThis level of flexibility would be difficult to achieve with more ad hoc approaches, such as macros or code generation, which often require the entire logic and all possible extensions to be baked into a single monolithic system. That leads to unnecessary coupling and limits customizability.\nIf you're still unsure how all of this comes together, a future blog post will walk through the implementation of these extensions in detail to show exactly how they work.\nNext Part\nIn the final Part 4 of this series, Implementing Extensible Variants, we will follow a similar path to explore how CGP implements extensible variants. Keep in mind the concepts we covered for extensible records — you may be surprised to discover just how much of the same logic carries over, despite the differences between records and variants.\n","id":"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/","title":"Programming Extensible Data Types in Rust with CGP - Part 3: Implementing Extensible Records"},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"body":"Discuss on Reddit, GitHub or Discord.\nRecap\nThis is the fourth part of the blog series on Programming Extensible Data Types in Rust with CGP. You can read the first, second and third parts here.\nAs a recap, we have covered the new release of CGP v0.4.2 which now supports the use of extensible records and variants, allowing developers to write code that operates on any struct containing specific fields or any enum containing specific variants, without needing their concrete definition.\nIn the first part of the series, Modular App Construction and Extensible Builders, we demonstrated an example use of the extensible builder pattern, which uses extensible records to support modular construction of an application context.\nSimilarly, in the second part of the series, Modular Interpreters and Extensible Visitors, we saw how the modular visitor pattern allows us to implement evaluation and to-Lisp conversion for each variant of a language expression enum using separate visitor providers.\nIn the third part of the series, Implementing Extensible Records, we have walked through the internal implementation of extensible records, and learned about concepts such as partial records and builder dispatchers.\nIn this final fourth part of the series, we will have the same walk through for the internal implementation details for extensible variants.\nAcknowledgement\nThank you April Gonçalves for your generous donation support on Ko-fi! ☺️\n\nThe Design and Implementation of Extensible Variants\nNow that we've covered how extensible records work in CGP, we can turn our attention to extensible variants. At first glance, it might seem like a completely different mechanism — but surprisingly, the approach used to implement extensible variants is very similar to that of extensible records. In fact, many of the same principles apply, just in the “opposite direction”.\nThis close relationship between records and variants is rooted in category theory. In that context, records are known as products, while variants (or enums) are referred to as sums or coproducts. These terms highlight a deep duality between the two: just as products combine values, coproducts represent a choice among alternatives. CGP embraces this theoretical foundation and leverages it to create a unified design for both extensible records and extensible variants.\nThis duality is not just theoretical — it has practical implications for software architecture. Our design in CGP builds directly on prior research into extensible data types, particularly in the context of functional programming and type systems. For more on the background, see the paper on Extensible Data Types, as well as this excellent intro to category theory by Bartosz Milewski.\nWith this in mind, we’ll now explore the CGP constructs that support extensible variants. As you go through the examples and implementation details, we encourage you to look for the parallels and contrasts with extensible records.\n\nBase Implementation\nFromVariant Trait\nJust as extensible records use the HasField trait to extract values from a struct, extensible variants in CGP use the FromVariant trait to construct an enum from a single variant value. The trait is defined as follows:\n\nLike HasField, the FromVariant trait is parameterized by a Tag, which identifies the name of the variant. It also defines an associated Value type, representing the data associated with that variant. Unlike HasField, which extracts a value, from_variant takes in a Value and returns an instance of the enum.\nExample: Deriving FromVariant\nTo see how this works in practice, consider the following Shape enum:\n\nUsing the #[derive(FromVariant)] macro, the following trait implementations will be automatically generated:\n\nThis allows the Shape enum to be constructed generically using just the tag and value.\nRestrictions on Enum Shape\nTo ensure ergonomics and consistency, CGP restricts the kinds of enums that can derive FromVariant. Specifically, supported enums must follow the sums of products pattern — each variant must contain exactly one unnamed field.\nThe following forms, for example, are not supported:\n\nThese more complex variants are not supported because they would make it harder to represent variant fields as simple types, which would, in turn, lead to less ergonomic APIs. By restricting each variant to a single unnamed field, CGP ensures that types like FromVariant::Value remain straightforward and intuitive.\nIf you need to represent more complex data in a variant, we recommend wrapping that data in a dedicated struct. This way, you can still take advantage of CGP's extensible variant system while maintaining type clarity and composability.\nPartial Variants\nJust as CGP supports partially constructed structs through partial records, it also enables partial variants to work with partially deconstructed enums in a similarly flexible way. Partial variants allow you to pattern match on each variant of an enum incrementally, while safely excluding any variants that have already been handled. This makes it possible to build exhaustive and type-safe match chains that evolve over time.\nConsider the Shape enum we explored earlier. CGP would generate a corresponding PartialShape enum that represents the partial variant form of Shape:\n\nHasExtractor trait\nTo enable the transformation from a regular enum into its partial variant form, CGP provides the HasExtractor trait. This trait defines an associated type named Extractor, which represents the full set of partial variants for a given enum, and a method to_extractor, which performs the conversion:\n\nFor the Shape enum, an implementation of HasExtractor would look like the following:\n\nThis implementation makes it possible to work with a Shape value as a PartialShape, where each variant is wrapped in an IsPresent marker, indicating that the variant is still available to be matched.\nIsVoid Type Mapper\nThe key distinction between partial records and partial variants lies in how we represent the absence of data. For partial variants, CGP introduces the IsVoid type mapper to indicate that a variant has already been extracted and is no longer available:\n\nThe Void type is defined as an empty enum with no variants. This means that it is impossible to construct a value of type Void, and any code that attempts to match on a Void value will be statically unreachable. This makes it a safe and expressive way to model a variant that no longer exists in a given context.\nConceptually, Void serves the same purpose as Rust’s built-in never type or the Infallible type from the standard library. However, CGP defines Void explicitly to distinguish its special role in the context of extensible variants.\nWhile IsNothing is used for absent fields in partial records, we use IsVoid to represent removed or matched variants in partial variants. This ensures that once a variant has been extracted, it cannot be matched again — preserving both soundness and safety in CGP’s type-driven pattern matching.\nExtractField Trait\nOnce an enum has been converted into its partial variant form, we can begin incrementally pattern matching on each variant using the ExtractField trait. This trait enables safe, step-by-step extraction of variant values, and is defined as follows:\n\nJust like FromVariant and HasField, the ExtractField trait takes a Tag type to identify the variant, and includes an associated Value type representing the variant’s inner data. Additionally, it defines a Remainder type, which represents the remaining variants that have not yet been matched.\nThe extract_field method consumes the value and returns a Result, where a successful match yields the extracted Value, and a failed match returns the Remainder. Although this uses the Result type, the Err case is not really an error in the traditional sense — rather, it represents the remaining variants yet to be handled, much like how errors represent alternative outcomes in Rust.\nExample Implementation of ExtractField\nTo understand how ExtractField works in practice, let’s look at an implementation for extracting the Circle variant from a PartialShape:\n\nIn this implementation, we are working with a PartialShape in which the Circle variant is still marked as present. The trait is also generic over F1: MapType, which corresponds to the Rectangle variant, allowing the code to remain flexible regardless of whether the rectangle has already been extracted or not.\nThe associated Remainder type updates the Circle variant from IsPresent to IsVoid, signifying that it has been extracted and should no longer be considered valid. The use of the Void type ensures that this variant cannot be constructed again, making it safe to ignore in further matches.\nWithin the method body, we match on self. If the value is a Circle, we return it in the Ok case. Otherwise, we return the remaining PartialShape, reconstructing it with the other variant. Due to the type system’s enforcement, it is impossible to incorrectly return a Circle as part of the remainder once it has been marked as IsVoid. The compiler ensures that this branch is unreachable, preserving correctness by construction.\nExample Use of ExtractField\nWith ExtractField, we can now incrementally extract and match against variants in a safe and ergonomic way. Here’s an example of computing the area of a shape using this approach:\n\nIn this example, we begin by converting the Shape value into a PartialShape with all variants present using to_extractor. We then call extract_field to try extracting the Circle variant. If successful, we compute the circle's area. If not, we receive a remainder value where the Circle variant is now marked as IsVoid. This remainder is then used to attempt extracting the Rectangle variant. If that succeeds, we compute the area accordingly.\nBy the time we reach the second Err case, the remainder has the type PartialShape&lt;IsVoid, IsVoid&gt;, which cannot contain any valid variant. Because of this, we can safely omit any further pattern matching, and the compiler guarantees that there are no unreachable or unhandled cases.\nWhat makes this approach so powerful is that the Rust type system can statically verify that it is impossible to construct a valid value for PartialShape&lt;IsVoid, IsVoid&gt;. We no longer need to write boilerplate _ =&gt; unreachable!() code or use runtime assertions. The type system ensures exhaustiveness and soundness entirely at compile time, enabling safer and more maintainable implementation of extensible variants.\nShort-Circuiting Remainder\nIn our earlier implementation of compute_area, we used nested match expressions to handle the Result returned from each call to extract_field. If you are familiar with the ? operator in Rust, you might be wondering why we didn’t use it here to simplify the logic.\nThe reason is that we want to short circuit and return the Ok variant as soon as a match succeeds, while the Err case contains a remainder type that changes with each call to extract_field. This behavior is the inverse of how Result is typically used in Rust, where the Err variant is the one that gets returned early, and the Ok type changes as the computation progresses.\nTo better understand what we are trying to achieve, consider the following pseudocode that illustrates the intent more clearly:\n\nIn this pseudocode, we introduce a fictional operator ⸮, which behaves like the opposite of ?. Instead of short circuiting on Err, it short circuits on Ok, returning the value immediately. If the result is Err, it binds the remainder to the remainder variable and continues.\nIn this setup, each call to extract_field uses .map to transform a successful match into the final f64 result. If the match succeeds, ⸮ returns early. Otherwise, we continue with the remainder, which gradually becomes more constrained until it is fully uninhabited. Once all variants have been tried, the final match remainder {} statically asserts that no remaining case is possible.\nThis highlights a subtle but important point: the compute_area function never actually returns an Err in practice. To satisfy the function’s signature, we return a Result&lt;f64, Infallible&gt;, where Infallible indicates that failure is not possible.\nSome readers may suggest alternative approaches, such as flipping the result to Result&lt;Remainder, Value&gt; so that the ? operator could be used to return the value directly. While that might make the surface syntax cleaner, it reverses the intuitive meaning of the result. In this case, Remainder is the exceptional path, and Value is what we expect when the extraction succeeds.\nThe introduction of ⸮ is not meant to advocate for a new language feature. Rather, it serves to clarify the control flow and encourage you to think about how this pattern relates to existing Rust constructs like ?, .await, and combinations such as .await?. In practice, we do not need to manually write functions like compute_area or invent new operators. The extensible visitor pattern we will explore later provides a mechanism that effectively captures this logic for us.\nWe will revisit this idea when we discuss how the visitor pattern automates this process. For now, let’s continue by looking at how to finalize an empty remainder.\nFinalizeExtract Trait\nWhile Rust’s type system can infer that a type like PartialShape&lt;IsVoid, IsVoid&gt; is uninhabitable, this inference only works when the compiler has access to the fully concrete type. To support this behavior more generically within CGP’s extensible variant system, the FinalizeExtract trait is introduced. This trait provides a mechanism to discharge an empty partial variant after all possible cases have been matched:\n\nAt first glance, the finalize_extract method might appear misleading. It accepts a self value and claims to return a value of any type T. This may seem unsound, but the key detail is that it is only ever implemented for types that are uninhabited — in other words, types that can never actually exist at runtime. Examples include Void and a fully exhausted partial variant like PartialShape&lt;IsVoid, IsVoid&gt;.\nThe implementation is both safe and surprisingly simple:\n\nHere, we use an empty match expression on self, which works because the compiler knows that PartialShape&lt;IsVoid, IsVoid&gt; has no possible value. Since it is impossible to construct such a value, the match is guaranteed to be unreachable. Rust verifies this at compile time, ensuring both safety and correctness.\nBy leveraging the Void type in this way, CGP allows us to exhaustively extract every variant from a partial enum and confidently conclude that no cases remain. This eliminates the need for runtime assertions, unreachable branches, or panics. Instead, the type system itself guarantees that all variants have been handled, enabling a clean and fully type-safe approach to enum decomposition.\nFinalizeExtractResult Trait\nWhen working with results of type Result&lt;Output, Remainder&gt;, where the Remainder type is guaranteed to be inhabitable, it is often useful to have a convenient way to directly extract the Output value. To achieve this, CGP defines the FinalizeExtractResult trait, which provides a helper method to finalize and unwrap such results. Its definition includes a blanket implementation for all Result types where the error type implements FinalizeExtract:\n\nWith FinalizeExtractResult, any result value can call finalize_extract_result() to obtain the Output directly, as long as the remainder type implements FinalizeExtract. This allows functions that work with extractable variants to become simpler and more readable. For example, the implementation of compute_area can be written as:\n\nWhen handling the remainder after the Circle variant was extracted, we use finalize_extract_result after calling remainder.extract_field() to get the Rectangle variant.\nThis trait provides a small but valuable ergonomic improvement, especially when performing generic extractions and finalizations. It allows developers to avoid repetitive pattern matching and ensures that the final output can be obtained with a single, clear method call.\n\nImplementation of Casts\nWith the foundational traits for extensible variants in place, we can now explore how to implement the CanUpcast and CanDowncast traits. These traits enable safe and generic upcasting and downcasting between enums that share compatible variants.\nHasFields Implementation\nJust as extensible records rely on HasFields for iterating over their fields, extensible variants use a similar mechanism to iterate over their variants. This allows the generic casting implementation to iterate over each variant of an enum.\nFor example, the HasFields implementation for the Shape enum is defined as follows:\n\nHere, instead of using the Product! macro (which is used for structs), we use the Sum! macro to build a type-level sum representing all variants in the enum. The Sum! macro expands to a nested structure of Either, similar to how Product! expands into a chain of Cons.\nFor example, the Sum! expression above desugars to:\n\nWhere Either is defined in a similar fashion to Rust's standard Result type, but with variant names that reflect the sum type structure:\n\nIn this way, we represent the enum's variants as a nested sum, with Void as the terminating type to signify the end of the variant choices.\nCanUpcast Implementation\nWith HasFields implemented, we are ready to define the CanUpcast trait. This trait allows a source enum to be upcasted to a target enum that is a superset of the source:\n\nThe trait is generic over the Target type we wish to upcast to. The upcast method takes the original enum and converts it into the target enum, using PhantomData to assist with type inference.\nThe implementation is provided generically through a blanket implementation:\n\nHere’s how it works. First, the Context type (the source enum) must implement both HasFields and HasExtractor. The HasFields trait provides a type-level sum of variants, and HasExtractor converts the enum into its corresponding partial variants. Next, the associated Fields type must implement the helper trait FieldsExtractor, which handles the actual extraction of variants into the target type. The Remainder returned by this operation must then implement FinalizeExtract, which guarantees that all source variants have been accounted for.\nIn the method body, we begin by calling self.to_extractor() to convert the source enum into a value with partial variants. We then use Fields::extract_from to extract the relevant variants into the target enum. Finally, we call finalize_extract_result() to discharge the remainder in Err, and return the Target result in Ok.\nFieldsExtractor Trait\nThe FieldsExtractor trait serves as a helper for casting between enums. It is defined as follows:\n\nThis trait is parameterized by two types: Source, which represents the partial variants of the source enum, and Target, which is the fully constructed destination enum. It also defines a Remainder associated type to capture any variant in the source that could not be extracted into the target.\nThe extract_from method attempts to convert the given partial variants from the Source into a complete Target. If successful, it returns the constructed Target value. Otherwise, it returns the remainder of the Source that could not be matched.\nThe core implementation of FieldsExtractor operates recursively over the Sum! list of fields. For the head of the list, the implementation is written as:\n\nIn this implementation, we deconstruct the head of the sum into a Field&lt;Tag, Value&gt; type. We then require that the Source type supports ExtractField&lt;Tag&gt;, which allows us to attempt extracting the field corresponding to that tag. We also require the Target enum to support FromVariant&lt;Tag&gt;, so that once the field is extracted, we can reconstruct the target enum from it. In both traits, the associated Value type must be consistent.\nIf the extraction succeeds, we pass the value into Target::from_variant to construct the result. If it fails, we take the Remainder returned from extract_field, and recursively call extract_from on the rest of the fields. The associated Remainder type continues to track whatever remains after each recursive step.\nEventually, the recursion reaches the end of the Sum! list, which is represented by the Void type. At this point, we provide the base case:\n\nIn this final case, the trait simply sets the entire Source as the Remainder, indicating that none of the fields matched. This implementation ends the recursive search through the variants and signals that the cast could not be completed.\nThis pattern allows us to generically extract variants from an extensible enum, one field at a time, while safely and efficiently handling any unmatched cases using Rust’s powerful type system.\nExample Use of Upcast\nTo better understand how the FieldsExtractor operation works, let’s walk through a concrete example of an upcast. Suppose we define a new enum ShapePlus that extends the original Shape type by including an additional variant:\n\nWe can then perform an upcast from Shape to ShapePlus with the following code:\n\nBehind the scenes, the upcast proceeds through a series of trait-based checks and operations:\nFirst, the blanket implementation of CanUpcast verifies several conditions:\n\nThe source type Shape must implement HasFields, with the Fields type resolving to:\n\nShape must also implement HasExtractor, with its associated Extractor type being PartialShape&lt;IsPresent, IsPresent&gt;.\nThe Fields type must implement FieldsExtractor, with PartialShape&lt;IsPresent, IsPresent&gt; as the source and ShapePlus as the target.\nThe result of the extraction yields a remainder of type PartialShape&lt;IsVoid, IsVoid&gt;, which in turn implements FinalizeExtract.\n\nNext, the FieldsExtractor implementation for the head of the sum begins processing:\n\nThe current Tag is Symbol!(\"Circle\"), and the associated Value is of type Circle.\nThe Source is PartialShape&lt;IsPresent, IsPresent&gt;, and the Target is ShapePlus.\nThe source implements ExtractField&lt;Symbol!(\"Circle\")&gt;, which succeeds with Circle as the extracted value and PartialShape&lt;IsVoid, IsPresent&gt; as the remainder.\nThe target ShapePlus implements FromVariant&lt;Symbol!(\"Circle\")&gt;, again with Circle being the Value type.\n\nThe extractor then proceeds to the next variant in the sum:\n\nThe current Tag is Symbol!(\"Rectangle\"), with Rectangle as the Value.\nThe updated Source is now PartialShape&lt;IsVoid, IsPresent&gt;, and the Target remains ShapePlus.\nThis source implements ExtractField&lt;Symbol!(\"Rectangle\")&gt;, yielding Rectangle as the value and PartialShape&lt;IsVoid, IsVoid&gt; as the final remainder.\nThe target once again supports FromVariant&lt;Symbol!(\"Rectangle\")&gt; using the matching Rectangle type.\nAt the end of the chain, the Void variant is reached. The FieldsExtractor implementation for Void simply returns the remainder, which in this case is PartialShape&lt;IsVoid, IsVoid&gt;.\n\nWhat this process shows is that the Upcast operation works by examining each variant in the source type Shape, extracting each present value, and reinserting it into the target type ShapePlus. Once all fields have been processed, the remaining variants are guaranteed to be uninhabited. At that point, we can safely discharge the remainder using the FinalizeExtract trait.\nBy breaking down the upcast into individual type-driven steps over extensible variants, we can implement upcasting entirely in safe Rust. Even more importantly, this implementation is fully generic and reusable. We are not writing code solely for the purpose of supporting Upcast — instead, we are building a reusable foundation that also supports operations like Downcast and other generic manipulations over extensible variants.\nCanDowncast Implementation\nWith the upcast operation in place, we can now turn to the implementation of CanDowncast. The CanDowncast trait is defined as follows:\n\nThis trait is used to convert a value of an enum type into another enum that represents a subset of its variants. Unlike CanUpcast, which guarantees success by moving into a larger enum, CanDowncast may fail if the source contains variants not present in the target. To account for this, the trait includes an associated Remainder type to capture any unmatched variants, and the downcast method returns a Result that either yields the successfully downcasted value or the remainder.\nAs with CanUpcast, we can define CanDowncast using a blanket implementation:\n\nWith all the foundational components from CanUpcast already in place, the implementation of CanDowncast becomes remarkably straightforward. Instead of requiring the source Context to implement HasFields, we shift that requirement to the Target. We still use the HasExtractor trait to obtain the partial variant representation of the source. From there, we iterate over the target fields using FieldsExtractor, attempting to extract a match from the source. Because we are narrowing into a smaller enum, some variants may remain unmatched. In those cases, we simply return the remainder rather than attempting to finalize it, as we did in CanUpcast.\nThis difference highlights the key distinction between upcasting and downcasting in this model. The Upcast operation extracts from all fields in the source and expects the remainder to be empty, whereas Downcast extracts only those variants present in the target and leaves the unmatched remainder intact. Yet aside from this inversion of roles between source and target, the two implementations share the same reusable machinery — including FieldsExtractor — demonstrating the flexibility and composability of the CGP approach to extensible variants.\nExample Use of Downcast\nWith CanDowncast in place, we can now explore how to use it in practice. Consider the following example, where we attempt to downcast from a ShapePlus enum to a Shape enum:\n\nIn this example, we start with a ShapePlus value that holds a Triangle. We then call downcast, attempting to convert it to a Shape, which does not include the Triangle variant. Internally, the downcast operation uses Shape::Fields to iterate over the variants defined in Shape and tries to extract each from the original ShapePlus value. If any of those variants are found — such as Circle or Rectangle — the match succeeds and we compute the corresponding area from Shape.\nHowever, when the actual variant in this case is Triangle, which is not part of Shape, the downcast fails and we receive the remainder of the partial variant structure. This remainder, of type PartialShapePlus&lt;IsPresent, IsVoid, IsVoid&gt;, contains only the Triangle variant. We then use extract_field to retrieve the triangle and compute its area. At this point, no other variants remain to be handled.\nOne of the most impressive aspects of both upcast and downcast is that they work seamlessly even when the source and target enums define their variants in entirely different orders. Because the trait implementations, such as ExtractField, operate in a generic and order-independent way, the correctness and behavior of casting are preserved regardless of variant ordering. This level of flexibility makes the CGP approach to extensible variants both powerful and practical for real-world use.\n\nImplementation of Visitor Dispatcher\nWith the traits for extensible variants now in place, we can turn our attention to how CGP implements generalized visitor dispatchers, similar to the builder dispatchers described in the previous part of this series.\nMatchWithHandlers\nIn the examples from Part 2, we introduced dispatchers such as MatchWithValueHandlers and MatchWithValueHandlersRef, which delegate the handling of enum variants to different visitor handlers based on the Input type. These dispatchers are built on top of a more fundamental dispatcher called MatchWithHandlers, whose implementation is shown below:\n\nThe MatchWithHandlers provider is parameterized by a Handlers type, which represents a type-level list of visitor handlers responsible for processing the variants of a generic Input enum. The implementation requires Input to implement the HasExtractor trait, which provides access to its partial variants.\nWithin the compute method, we first convert the input into its extractor form using input.to_extractor(). This partial variant is then passed to the lower-level dispatcher DispatchMatchers&lt;Handlers&gt;, which attempts to match and handle each variant. It returns a Result&lt;Output, Remainder&gt;, where a successful match produces an Output, and an unmatched remainder is returned otherwise. But since Remainder is expected to implement FinalizeExtract, we can call finalize_extract_result() to return the Output directly.\nDispatchMatchers\nIn our earlier implementation of extensible builders via BuildWithHandlers, we used PipeHandlers to compose a pipeline of builder handlers that successively filled in partial records. For extensible visitors, we follow a similar pattern with a slight variation that reflects the different control flow.\nThe dispatcher DispatchMatchers is defined as follows:\n\nThis definition constructs a monadic pipeline of visitor handlers, using OkMonadic as the monad implementation.\nWhat is a Monad?!\nAt this point, many readers coming from a Rust background may be wondering what exactly a monad is, and how it relates to implementing extensible visitors. In this section, we will break down the concept in simplified terms using familiar Rust patterns and constructs.\nA monad, often written as M, is a type that acts as a container for another value T, and it typically appears in the form M&lt;T&gt;. If you have worked with Option&lt;T&gt;, Result&lt;T, E&gt;, or asynchronous code using impl Future&lt;Output = T&gt;, then you have already used monadic types in Rust.\nMonads are not just containers. They also provide a way to operate on the values they contain, typically through an operation known as \"bind.\" In Rust, this concept appears through the use of operators like ?, .await, and .await?, all of which allow you to \"extract\" or \"unwrap\" the value inside a container and propagate control based on the result.\nWith this understanding, we can think of PipeMonadic in CGP as a mechanism that automatically applies these unwrapping operations between steps in a pipeline. It takes the result from one handler and, using a monadic operator, unwraps it before passing it along as input to the next handler. This is how CGP builds a pipeline of computations where each step can short-circuit or continue depending on its output.\nThe real strength of this approach is that it generalizes well. You are not limited to a specific type like Result; you can apply the same logic to any monad-like type, including more complex combinations such as impl Future&lt;Output = Result&lt;Result&lt;Option&lt;T&gt;, E1&gt;, E2&gt;&gt;. In principle, you could imagine applying something like .await??? to extract the inner value, and with monads, this can be abstracted and automated.\nOkMonadic Monad Provider\nIn the case of DispatchMatchers, the monad provider we use is called OkMonadic. This corresponds to the custom operator ⸮ we introduced in the pseudocode in the compute_area example, which short-circuits on the Ok variant and passes along the changing Err remainder.\nWhen we say that DispatchMatchers is defined using PipeMonadic&lt;OkMonadic, Providers&gt;, we mean that CGP should build a handler pipeline where each step uses the ⸮ operator to either return early with Ok(output) or continue processing the Err(remainder) with the next handler.\nBecause of PipeMonadic and OkMonadic, we do not need to write this logic ourselves. CGP handles the monadic control flow automatically, allowing us to focus on the behavior of each handler without worrying about wiring them together manually.\nIf any of this still feels unclear, do not worry. We will walk through a concrete example next to clarify how it works in practice. We also plan to publish a separate blog post that dives deeper into how CGP implements monads in Rust, including the internals of PipeMonadic and related abstractions.\nExample Use of MatchWithHandlers\nTo understand how to use MatchWithHandlers directly, let's revisit the example of computing the area of a Shape. We start by defining two separate Computer providers that calculate the area for the Circle and Rectangle variants:\n\n#[cgp_computer] Macro\nThe #[cgp_computer] macro allows us to transform these pure functions into context-generic providers that can be referenced as types. Behind the scenes, this macro generates Computer implementations similar to the following:\n\nThis macro simplifies the process of defining Computer providers by letting us write them as plain functions. Because the macro ignores the Context and Code types, the generated provider works with any Context and Code you supply.\nComputeShapeArea Handler\nWith CircleArea and RectangleArea defined, we can create a ComputeShapeArea handler by using MatchWithHandlers as a type alias:\n\nRather than passing providers directly to MatchWithHandlers, we wrap them with helper handlers. The ExtractFieldAndHandle handler extracts the variant value associated with a specific tag, such as Symbol!(\"Circle\"), and forwards it to the inner handler HandleFieldValue&lt;CircleArea&gt;.\nThe inner handler HandleFieldValue receives the input as Field&lt;Symbol!(\"Circle\"), Circle&gt;, extracts the Circle value, and passes it to CircleArea. We will explore the implementations of ExtractFieldAndHandle and HandleFieldValue shortly, but first, let's see how ComputeShapeArea is used.\nAs a whole, the instantiated MatchWithHandlers implements the Computer trait. We can call compute on it using () for both the Context and Code types like this:\n\nThis works because the Computer instances defined with #[cgp_computer] are generic over any Context and Code.\nUnder the hood, MatchWithHandlers implements ComputeShapeArea roughly as the following pseudocode:\n\nHere, MatchWithHandlers performs the same ⸮ short-circuit operation described earlier in the short-circuiting remainder section. For each Ok value returned by extraction, the corresponding Computer provider computes the area.\nThis example highlights how much boilerplate MatchWithHandlers abstracts away for us. Its implementation is essentially a monadic pipeline built using PipeMonadic, where OkMonadic provides the behavior of the ⸮ operator used in this pseudocode.\nExtractFieldAndHandle\nTo better understand how the earlier MatchWithHandlers example works, let's examine the implementation of the ExtractFieldAndHandle provider:\n\nWhile the type signature may seem complex, the behavior is straightforward. Given some partial variants Input, this handler attempts to extract a variant with the specified Tag using ExtractField. If extraction succeeds, it wraps the extracted variant as a tagged field Field&lt;Tag, Value&gt; and passes it to the inner Provider for processing. If extraction fails, it returns the remainder as an Err, allowing the next handler in the monadic pipeline to try.\nNote that the inner Provider receives a tagged Field&lt;Tag, Value&gt; rather than a bare Value. This allows the provider to differentiate variants that share the same Value type but differ in their variant Tag. For example, consider:\n\nHere, both Foo and Bar hold u64 values. ExtractFieldAndHandle will pass these as Field&lt;Symbol!(\"Foo\"), u64&gt; and Field&lt;Symbol!(\"Bar\"), u64&gt; respectively, so the provider can handle them differently by matching on the Tag.\nHandleFieldValue\nThe tagged Field input from ExtractFieldAndHandle is useful when multiple variants share the same Value type. However, in simpler cases like our Shape example, we often just want to handle the contained value directly, ignoring the tag. The HandleFieldValue wrapper simplifies this by “peeling off” the Field wrapper and passing only the inner value to the inner provider:\n\nAs shown, HandleFieldValue simply unwraps the input from Field&lt;Tag, Input&gt; and forwards the contained Input value to the inner provider.\nRevisiting ComputeShapeArea\nNow that we've understood ExtractFieldAndHandle and HandleFieldValue, let’s review what happens inside ComputeShapeArea:\n\n\nMatchWithHandlers uses HasExtractor to convert Shape into PartialShape&lt;IsPresent, IsPresent&gt;, then passes it to ExtractFieldAndHandle&lt;Symbol!(\"Circle\"), HandleFieldValue&lt;CircleArea&gt;&gt;.\nExtractFieldAndHandle attempts to extract the Circle variant from PartialShape&lt;IsPresent, IsPresent&gt;:\n\nIf successful, the extracted value is passed as Field&lt;Symbol!(\"Circle\"), Circle&gt; to HandleFieldValue&lt;CircleArea&gt;.\n\nHandleFieldValue&lt;CircleArea&gt; unwraps the Circle value and passes it to CircleArea.\n\n\nOtherwise, the remainder PartialShape&lt;IsVoid, IsPresent&gt; is returned as an error.\n\n\nNext, ExtractFieldAndHandle tries to extract the Rectangle variant from PartialShape&lt;IsVoid, IsPresent&gt;:\n\nIf successful, the extracted value is passed as Field&lt;Symbol!(\"Rectangle\"), Rectangle&gt; to HandleFieldValue&lt;RectangleArea&gt;.\n\nHandleFieldValue&lt;RectangleArea&gt; unwraps the Rectangle and passes it to RectangleArea.\n\n\nOtherwise, the remainder PartialShape&lt;IsVoid, IsVoid&gt; is returned as an error.\n\n\nFinally, MatchWithHandlers calls FinalizeExtract on PartialShape&lt;IsVoid, IsVoid&gt; to assert that the remainder is empty and discharge the impossible case.\n\nUnifying Variant Value Handlers\nSo far, we have seen how MatchWithHandlers can serve as a powerful low-level tool to implement extensible visitors. However, it requires explicitly listing a handler for each variant in the provided handler list. To make this process more ergonomic, we can build higher-level abstractions like MatchWithValueHandlers, which automatically derives the list of variant handlers passed to MatchWithHandlers.\nBefore implementing MatchWithValueHandlers, we first need to unify the variant handlers used in MatchWithHandlers. Instead of specifying separate handlers for each variant, we modify the variant handlers so that the same handler is used for all variants. For example:\n\nHere, rather than using distinct CircleArea and RectangleArea handlers, we use a single handler, ComputeArea, for both variants. This creates a unified pattern of ExtractFieldAndHandle&lt;Tag, HandleFieldValue&lt;ComputeArea&gt;&gt; for each entry. Recognizing this repetition allows us to build further abstractions that simplify these common patterns.\nTo understand this better, let's explore how ComputeArea itself can be implemented. For many extensible variants such as Shape, a straightforward approach is to define a regular Rust trait that computes the area for each variant:\n\nThis HasArea trait is simple and intuitive. Each variant implements the area method in the usual Rust way. Notice that we do not hand-implement HasArea for the overall Shape type, we will do this later on, by using MatchWithValueHandlers to help us perform the dispatching.\nAlthough HasArea is a plain Rust trait, it is easy to wrap it as a Computer provider using the #[cgp_computer] macro:\n\nThis generic function works for any type implementing HasArea and simply calls the area method. Applying #[cgp_computer] here generates the ComputeArea provider type that can then be used within ComputeShapeArea.\nToFieldsHandler\nTo simplify ComputeShapeArea further, we need a way to automatically generate the list of extractors passed to MatchWithHandlers. Concretely, we want to generate this:\n\nRecall that Shape implements the HasFields trait, which exposes its variants as a type-level sum:\n\nThis means we can programmatically extract the tags from Shape::Fields and replace each variant with an ExtractFieldAndHandle wrapper. We can perform this transformation entirely at the type level using a helper trait, ToFieldHandlers, defined as:\n\nIn essence, ToFieldHandlers recursively walks through each entry in a type-level sum, replacing Field&lt;Tag, Value&gt; with ExtractFieldAndHandle&lt;Tag, Provider&gt;, and converts the entire structure into a type-level list.\nUsing ToFieldHandlers, we can now write the ComputeShapeArea type as:\n\nThis definition may look complex at first glance. However, it demonstrates the powerful behind-the-scenes transformation that automatically generates the list of variant handlers from Shape to be passed to MatchWithHandlers.\nHasFieldHandlers\nThe process to generate variant handlers from Shape involves two steps: obtaining Shape’s fields from HasFields, and then applying ToFieldHandlers to those fields. To streamline this, we define another helper trait, HasFieldHandlers, that combines these steps:\n\nHasFieldHandlers unifies the requirements of HasFields and ToFieldHandlers into a single, convenient trait. This lets us simplify the definition of ComputeShapeArea even further:\n\nWith HasFieldHandlers, the definition of ComputeShapeArea becomes much more concise. Instead of manually combining HasFields and ToFieldHandlers, we simply rely on HasFieldHandlers to generate them from Shape and pass the result to MatchWithHandlers.\nMore importantly, this pattern is entirely general: it can be applied to any input type that implements HasFields, not just Shape, and to any Computer provider, not just ComputeArea.\nMatchWithValueHandlers\nThe traits HasFieldHandlers and ToFieldHandlers serve as the helpers for us to perform type-level metaprogramming for us to implement high-level visitor dispatchers such as MatchWithValueHandlers, which is defined as follows:\n\nThe design of MatchWithValueHandlers is similar to how we implemented the builder dispatchers using type-level metaprogramming in part 3. In this case, MatchWithValueHandlers is parameterized by a Provider that is expected to implement Computer, such as ComputeArea. The implementation of MatchWithValueHandlers is simply a type alias to use UseInputDelegate to dispatch the Input type given through Computer to MatchWithFieldHandlersInputs.\nThe implementation of MatchWithFieldHandlersInputs is defined through delegate_components!, with it having a generic mapping for any Input that implements HasFieldHandlers&lt;Provider&gt;. It then simply delegates the provider for that input to MatchWithHandlers&lt;Input::Handlers&gt;.\nExample Instantiation of MatchWithValueHandlers\nBecause MatchWithValueHandlers and MatchWithFieldHandlersInputs rely on type-level metaprogramming, it can be difficult to grasp exactly how they work on first encounter. To make things more concrete, let’s walk through how this abstraction is applied to Shape. With the machinery we’ve built, the definition of ComputeShapeArea becomes as simple as:\n\nThis version of ComputeShapeArea is remarkably concise. It no longer mentions Shape directly, because it works with any compatible input type, including both Shape and extensions like ShapePlus.\nUnder the hood, this type alias resolves to MatchWithHandlers through the following steps:\n\nMatchWithValueHandlers&lt;ComputeArea&gt; expands to UseInputDelegate&lt;MatchWithFieldHandlersInputs&lt;HandleFieldValue&lt;ComputeArea&gt;&gt;&gt;.\nWhen the Input is Shape, UseInputDelegate locates the corresponding DelegateComponent mapping for Shape in MatchWithFieldHandlersInputs&lt;HandleFieldValue&lt;ComputeArea&gt;&gt;.\nThat mapping exists because Shape implements HasFieldHandlers&lt;HandleFieldValue&lt;ComputeArea&gt;&gt;. As we saw earlier, this expands to:\n\nThis type-level list is then passed to MatchWithHandlers, which performs the variant dispatch using the logic we’ve already explored.\n\nImplementing HasArea for Shape\nWith MatchWithValueHandlers, implementing the HasArea trait for Shape becomes straightforward:\n\nAs in earlier examples, we use () for both the context and code parameters, since ComputeArea is generic over any Context and Code. Aside from this boilerplate, MatchWithValueHandlers&lt;ComputeArea&gt; takes care of automatically dispatching to the correct variant handler through MatchWithHandlers.\nWhile Shape only has two variants, one of the major advantages of MatchWithValueHandlers is that it scales effortlessly to enums with many variants and more complex computations. For example, implementing HasArea for ShapePlus is just as simple:\n\nAlthough some boilerplate still remains, this approach is significantly simpler than manually matching each variant or relying on procedural macros. It also brings more flexibility and type safety. In the future, CGP may provide more ergonomic abstractions on top of this pattern, making common use cases like HasArea even easier to express.\nDispatching to Context\nIn the earlier definition of MatchWithValueHandlers, we omitted one detail that it has a default type parameter for Provider:\n\nThis means that if no generic parameter is specified, MatchWithValueHandlers will default to using UseContext as the provider for Computer. If you’ve read the earlier blog posts, you may recall that UseContext is a generic provider that delegates its behavior to the consumer trait implementation from the given context. For example, the implementation of Computer for UseContext looks like this:\n\nUsing UseContext as the provider for dispatchers like MatchWithValueHandlers is especially useful because it enables the concrete context to define how each variant should be handled. For example, we can implement an App context that provides Computer implementations for various shapes like Shape and ShapePlus:\n\nIn this example, the App context uses UseInputDelegate to define how to compute areas. Variants like Circle, Rectangle, and Triangle are directly handled by ComputeArea. For Shape and ShapePlus, we use MatchWithValueHandlers without specifying a Provider, which means it defaults to UseContext.\nWith this setup, when MatchWithValueHandlers dispatches to the individual variants, it delegates to App itself instead of calling ComputeArea directly. This allows us to override the behavior of individual variants easily. For instance, if we want to replace the implementation for Circle with an optimized version, we can simply change the wiring in AppComponents:\n\nThe Flexibility of UseContext\nThis kind of customization would be much harder to achieve if the dispatcher were tightly coupled to a concrete trait implementation, such as using MatchWithValueHandlers&lt;ComputeArea&gt; directly. In that case, the only way to change the behavior would be to modify the HasArea implementation for Circle, which would require ownership of either the Circle type or the HasArea trait.\nWhile this level of indirection may seem unnecessary for a simple example like computing the area of a shape, it becomes crucial in more complex scenarios, such as the modular interpreter design discussed in part 2.\nBy routing the variant handling through UseContext, we also retain the flexibility to override the provider entirely. That means we can use MatchWithValueHandlers&lt;ComputeArea&gt; in cases where we don’t want to go through a Context at all, such as using () as the context. This optional Provider parameter gives us the best of both worlds: we can let the context provide the necessary wiring when needed, or directly specify a concrete provider when that makes more sense.\nThis pattern of using a provider parameter that defaults to UseContext is a recurring design strategy in CGP. It offers a powerful level of control, letting developers customize behavior in a modular and extensible way depending on their use case.\n\nVisitor Dispatcher by Reference\nIn the earlier examples, some careful readers may have noticed a significant flaw in the function signatures for computing the area of shapes, such as in HasArea::area. These methods require owned values of the shape variants, meaning that each time we compute the area, we must consume the shape entirely. This is not ideal, especially when we only need a reference and want to preserve the original value.\nWe started with the ownership-based visitor dispatcher because it is conceptually simpler. It avoids the need to reason about lifetimes, making it easier to understand the overall implementation of extensible visitor. However, in this section, we will show how a reference-based visitor dispatcher can be built on top of the ownership-based version. Rather than requiring a separate mechanism, the reference-based version is actually a specialization of the existing system.\nWe will now walk through how to implement the reference-based visitor dispatcher in detail. By the end, you will see how Rust’s type system enables us to safely and cleanly extend the original approach to support references, without compromising lifetime safety or clarity.\nReference-Based Area Computation\nTo demonstrate how reference-based visitor dispatch works, let’s define a new trait HasAreaRef that computes the area using a shared reference:\n\nIn practice, you probably wouldn’t need both HasArea and HasAreaRef, but for clarity we use a separate trait here to clearly distinguish between ownership-based and reference-based computations.\nNext, we define a new provider ComputeAreaRef using #[cgp_computer], which implements ComputerRef by calling HasAreaRef:\n\nWith this in place, we can now implement HasAreaRef for Shape by using MatchWithValueHandlersRef, the reference-based counterpart to MatchWithValueHandlers:\n\nLikewise, the implementation for ShapePlus follows the same pattern:\n\nAt first glance, using MatchWithValueHandlersRef to enable reference-based dispatch may seem straightforward — and in many ways, it is. As we’ll see next, the core logic mirrors the ownership-based version closely, with only a few additional considerations around generic lifetimes.\nPartialRef Variants\nAlthough most of the higher-level support for reference-based extensible visitors is relatively straightforward, we first need to generate reference-aware partial variants within #[derive(ExtractField)]. For example, for the Shape enum, the macro generates the following reference-based partial variants:\n\nCompared to the owned version PartialShape, the PartialRefShape definition introduces a lifetime parameter 'a, and each of its fields now contains a reference with that lifetime. This allows us to safely operate on borrowed variants without taking ownership.\nWe need a distinct PartialRefShape type rather than reusing PartialShape because Rust currently has no native mechanism to generically express a value that is either owned or borrowed based on some type-level condition. For instance, if Rust had a concept like a special 'owned lifetime where &amp;'owned T could be treated as just T, then it might be possible to unify the two representations. But such a feature does not exist, and arguably shouldn't.\nGiven that limitation, the cleanest solution is to define a separate enum that introduces a lifetime parameter and holds references explicitly. Since these types are generated by macros and used internally within CGP's dispatching infrastructure, the added complexity is well-contained and does not burden the end user.\nHasExtractorRef Trait\nIn addition to the partial-ref variants, we need a new trait called HasExtractorRef that extracts data from a reference to the full enum:\n\nCompared to the HasExtractor trait, HasExtractorRef introduces a generic associated type ExtractorRef that is parameterized by a lifetime 'a and requires the constraint Self: 'a. It also defines an extractor_ref method that takes a &amp;'a self reference and returns the corresponding partial-ref variants as ExtractorRef&lt;'a&gt;.\nOther than the addition of the lifetime parameter, implementing HasExtractorRef for Shape is straightforward, as shown below:\n\nWith extractor_ref, it is now possible to extract data from a borrowed Shape without cloning each variant, enabling efficient reference-based dispatching.\nExtractField Implementation\nFortunately, beyond the partial-ref variants and the HasExtractorRef trait, most other traits can be reused as if we were working with owned values. This works because PartialRefShape holds what are effectively \"owned\" variant values in the form of references like &amp;'a Circle and &amp;'a Rectangle. For example, we can implement ExtractField for PartialRefShape like this:\n\nWe can reuse traits like ExtractField because the associated types such as Value do not need to be the owned values themselves — they can be references to those values instead. This lets us treat extensible variants as if they contain references to their fields, allowing us to manipulate them just like owned values.\nMatchWithHandlersRef\nBecause reference-based dispatching relies on HasExtractorRef, we also need to adapt downstream constructs like MatchWithHandlers to work with references instead of owned values. This adaptation is provided by MatchWithHandlersRef, which uses HasExtractorRef in place of HasExtractor:\n\nIn this implementation, MatchWithHandlersRef handles Computer over a borrowed input &amp;'a Input. It requires the input type to implement HasExtractorRef so it can extract the appropriate partial-ref variant. The extracted value, which is of type Input::ExtractorRef&lt;'a&gt;, is then passed to DispatchMatchers, which processes it using the same monadic pipeline as in the owned-value case. After dispatching to the handlers, the Output from Result&lt;Output, Remainder&gt; is extracted by calling finalize_extract_result, which relies on the Remainder type to implement FinalizeExtract.\nOne subtle but important point is that MatchWithHandlersRef still implements Computer rather than ComputerRef. The same is true for the handlers invoked through DispatchMatchers, which also expect Computer implementations. As a result, reference-based visitor dispatching requires an intermediate conversion step. Variant handlers that originally implement ComputerRef must first be \"lifted\" into providers implementing Computer.\nAfter constructing the reference-based pipeline, MatchWithHandlersRef can then unlift the entire pipeline to implement ComputerRef. This layered approach ensures that reference-based dispatching reuses the same infrastructure as the ownership-based version, while preserving type safety and proper lifetime handling.\nPromoteRef\nIn the same way that traits like ExtractField can operate on borrowed fields, the Computer trait can also work with borrowed inputs. In fact, the #[cgp_computer] macro expansion for the compute_area_ref function produces the following Computer implementation:\n\nHere, the Computer implementation for ComputeAreaRef accepts any reference &amp;T as the input type, as long as T implements HasAreaRef. This demonstrates that the Computer trait itself is flexible enough to handle borrowed inputs directly, without the need for additional traits.\nHowever, to make development more ergonomic, CGP provides the ComputerRef trait. Using ComputerRef eliminates the need to explicitly write &amp;T in input type parameters and avoids the complexity of higher-ranked trait bounds in where clauses or input delegation. This makes ComputerRef better suited for working with borrowed inputs in a clean and consistent way.\nTo bridge Computer and ComputerRef, CGP offers the PromoteRef adapter. This adapter converts a provider that implements Computer for borrowed inputs into a ComputerRef provider. For example, the ComputerRef implementation for ComputeAreaRef is defined as follows:\n\nThis means that ComputeAreaRef implements ComputerRef through PromoteRef&lt;ComputeAreaRef&gt;, automatically lifting its Computer implementation for &amp;T into a ComputerRef implementation.\nPromotion from Computer to ComputerRef\nThe PromoteRef adapter allows a provider that implements Computer for borrowed inputs to become a provider that implements ComputerRef. Its implementation is as follows:\n\nHere, PromoteRef implements ComputerRef as long as the inner Provider supports a higher-ranked trait bound, meaning it can implement Computer for all lifetimes 'a of &amp;'a Input. This pattern hides the complexity of higher-ranked trait bounds, so end users do not need to think about them when using ComputerRef.\nOne important detail is that PromoteRef requires the inner Computer provider to always produce the same Output type for any lifetime 'a. This means that PromoteRef cannot be used if the Output type borrows from the input reference, because ComputerRef defines a single Output type that is independent of the lifetime of the input. This limitation follows naturally from the design of ComputerRef. When the output must borrow from the input, the user should implement Computer directly instead of using ComputerRef.\nPromotion from ComputerRef to Computer\nPromoteRef also works in the opposite direction, allowing a provider that implements ComputerRef to become a provider that implements Computer for borrowed inputs:\n\nIn this implementation, PromoteRef wraps a Provider that implements ComputerRef and forwards the call to compute_ref. As a result, it produces a Computer implementation that works with &amp;Input.\nWith these two implementations, PromoteRef provides a bidirectional bridge between Computer and ComputerRef. This flexibility allows a single provider to adapt to whichever trait is more convenient for the task, whether the interface expects Computer or ComputerRef.\nMatchWithValueHandlersRef\nTo support reference-based dispatching in CGP, we only need to introduce a few reference-specific constructs while keeping most of the implementation very similar to the original MatchWithValueHandlers. The definition of MatchWithValueHandlersRef is shown below:\n\nWhen comparing this definition to MatchWithValueHandlers, the most notable differences are the use of MatchWithFieldHandlersInputsRef and the additional wrapping with PromoteRef to facilitate conversions between Computer and ComputerRef.\nExample use of MatchWithValueHandlersRef\nTo better understand how MatchWithValueHandlersRef works in practice, let us walk through what happens when we call MatchWithValueHandlersRef&lt;ComputeAreaRef&gt; on Shape:\n\nThe Provider argument to MatchWithHandlers is ComputeAreaRef, which is expanded into HandleFieldValue&lt;PromoteRef&lt;ComputeAreaRef&gt;&gt; when passed to MatchWithFieldHandlersInputsRef. The UseInputDelegate type is expected to implement ComputerRef for Input = Shape, and it delegates the work to MatchWithFieldHandlersInputsRef.\nNext, MatchWithFieldHandlersInputsRef is invoked with Input as Shape and Provider as HandleFieldValue&lt;PromoteRef&lt;ComputeAreaRef&gt;&gt;. The Shape type must implement HasFieldHandlers&lt;HandleFieldValue&lt;PromoteRef&lt;ComputeAreaRef&gt;&gt;&gt;, and its Handlers expand to:\n\nThe delegate entry maps to PromoteRef&lt;MatchWithHandlersRef&lt;Input::Handlers&gt;&gt;, which becomes:\n\nIn order to implement ComputerRef, PromoteRef&lt;MatchWithHandlersRef&lt;Input::Handlers&gt;&gt; requires MatchWithHandlersRef&lt;Input::Handlers&gt; to implement Computer. For MatchWithHandlersRef&lt;Input::Handlers&gt; to implement Computer, its inner provider HandleFieldValue&lt;PromoteRef&lt;ComputeAreaRef&gt;&gt; must satisfy the following constraints:\n\nComputer&lt;(), (), Field&lt;Symbol!(\"Circle\"), &amp;Circle&gt;&gt;\nComputer&lt;(), (), Field&lt;Symbol!(\"Rectangle\"), &amp;Rectangle&gt;&gt;\n\nAfter HandleFieldValue unwraps the actual field values, the inner provider PromoteRef&lt;ComputeAreaRef&gt; must implement:\n\nComputer&lt;(), (), &amp;Circle&gt;\nComputer&lt;(), (), &amp;Rectangle&gt;\n\nFinally, PromoteRef requires ComputeAreaRef to implement:\n\nComputerRef&lt;(), (), Circle&gt;\nComputerRef&lt;(), (), Rectangle&gt;\n\nThis example shows that the key to implementing MatchWithValueHandlersRef lies in understanding when to use Computer versus ComputerRef, and where to apply PromoteRef to bridge the two. While the type expansion can appear intimidating, most of the complexity is hidden behind these abstractions.\nIn practice, the usage of MatchWithValueHandlersRef feels almost identical to the ownership-based version, and the underlying implementation shares the same structure aside from a few reference-specific details.\n\nFuture Work\nThe modular design of extensible variants makes it straightforward to extend the pattern for new use cases. There are several scenarios that are not yet supported in this initial version. While none of these are technically difficult to implement, the focus for this release has been on the core functionality and the writing of these blog posts. The following areas are planned for future work.\nAdditional Arguments\nAt present, extensible visitors do not support forwarding additional arguments to individual visitor handlers. This limitation prevents traits that require extra arguments, such as:\n\nHere, the area method needs a scale_factor argument that must be passed through the visitor dispatcher to the variant handlers. To support this, we can create adapters similar to ExtractFieldAndHandle that bundle the extra arguments into the Input. We would then define alternative dispatchers, similar to MatchWithValueHandlers, which operate on these bundled inputs.\n&amp;mut References\nThe current reference-based dispatch system is hard-coded to use shared references (&amp;). As a result, it does not support &amp;mut references for mutable operations such as:\n\nTo support mutable references, the design of partial-ref variants needs to be generalized to work with both &amp; and &amp;mut. This likely requires an abstraction similar to MapType, but for mapping the type of reference used for each field.\nSimpler Dispatchers\nAlthough extensible visitors were designed with complex use cases like modular interpreters in mind, they are equally powerful for simpler needs, such as implementing plain Rust traits like HasArea. While this is already possible with the current infrastructure, the ergonomics leave much to be desired.\nUsers must first understand and use the #[cgp_computer] macro to define helper providers like ComputeArea, and then manually implement the trait by invoking MatchWithValueHandlers::&lt;ComputeArea&gt;::compute() with dummy context and code. For those unfamiliar with CGP, these steps impose unnecessary friction and cognitive load.\nTo improve usability, CGP could offer a procedural macro to automate this boilerplate. For instance, a trait could be annotated as follows:\n\nThe #[cgp_dispatch] macro would parse the trait definition and generate the necessary code to integrate it with the extensible visitor framework. This includes generating a blanket implementation for the trait so that it is automatically implemented for compatible enums like Shape or ShapePlus.\nThe generated implementation would resemble:\n\nWith such a macro in place, using extensible visitors to implement common traits would become as easy as annotating the trait with #[cgp_dispatch], removing the need to understand the inner workings of CGP for simple use cases.\nCustom Partial Records Updater\nCurrently, partial records only support a small set of operations like TakeField and BuildField. This makes it difficult to customize behavior, such as overriding existing field values, filling empty fields with defaults, or taking a default value from an empty field.\nTo support these scenarios, more generalized interfaces for interacting with partial records are needed. A promising approach is to use natural transformations to implement generic field transformers. For example, a builder transformer would convert IsNothing fields into IsPresent fields, while an overrider transformer would convert either IsNothing or IsPresent fields into IsPresent fields. This would allow for flexible and reusable field manipulation strategies.\nExplanation for Computation Hierarchy\nBeyond Computer, ComputerRef, and Handler, CGP defines several other traits that represent different kinds of computations. For example, TryComputer supports computations that may fail, and TryComputerRef handles fallible computations that operate on reference inputs. These traits make it possible to model a wide range of behaviors, from straightforward value computations to error-aware or reference-based processing.\nCGP also provides constructs such as Promote that allow seamless conversion between different types of computation providers. In addition, it supports multiple ways to compose these providers. Two notable examples are PipeHandlers and PipeMonadic. Monadic composition in particular requires delicate explanation, because CGP’s approach to monads does not behave exactly like the familiar monads in Haskell. Understanding how these monadic pipelines operate is essential for developers who want to create more sophisticated and composable computation flows.\nMy original plan was to dedicate a fifth part of this series to explain the complete hierarchy of computation traits in CGP. However, the implementation details for extensible data types have already required extensive coverage, and attempting to include computation hierarchy in the same series would make it overwhelming. As a result, I have decided to split that explanation into its own dedicated post, or potentially a separate series, to provide the depth and clarity it deserves.\n\nConclusion\nWe have now reached the end of our deep dive into the implementation details of extensible variants and extensible visitors. To recap the journey, we began by defining the FromVariant trait, which allows constructing an enum from one of its variants. We then introduced partial variants, which mirror the structure of partial records but use IsVoid to indicate the absence of a variant.\nFrom there, we defined the HasExtractor trait to convert an enum into its partial variants, followed by the ExtractField trait to extract a single variant from those partial variants. This led to the concept of remainders, representing what is left after a variant is extracted, and the FinalizeExtract trait, which finalizes a remainder once all its variants have been handled.\nWe then examined how upcasting and downcasting for enums are implemented. We explored how the HasFields implementation for enums represents a type-level sum of fields and how FieldExtractor is used to move fields between source and target partial variants. The difference between CanUpcast and CanDowncast boils down to choosing whether the HasFields implementation comes from the source or the target enum.\nNext, we delved into the implementation of extensible visitors, beginning with MatchWithHandlers and DispatchMatchers. We saw that DispatchMatchers is structured as a monadic pipeline that short-circuits when it encounters an Ok value. We examined the role of field adapters like ExtractFieldAndHandle and HandleFieldValue, and we explored how #[cgp_computer] transforms a regular trait method into a Computer provider. We then discussed how ToFieldsHandler and HasFieldHandlers convert the tags in an enum’s HasFields implementation into the appropriate providers for use with MatchWithHandlers. Finally, we looked at how the top-level dispatcher MatchWithValueHandlers is assembled through type-level metaprogramming, combining all the earlier components into a cohesive system.\nWe concluded with the reference-based implementation of extensible visitors. This introduced reference-specific constructs such as partial-ref variants and the HasExtractorRef trait. We examined how MatchWithHandlersRef uses HasExtractorRef to extract borrowed variants, and how PromoteRef bridges between Computer and ComputerRef providers. We then saw that MatchWithValueHandlersRef is implemented with only minimal differences from its ownership-based counterpart, relying on MatchWithHandlersRef and PromoteRef to interleave Computer and ComputerRef computations.\nEnd of Series\nWe have reached the conclusion of this series on extensible data types. By now, you should have a clearer understanding of the design patterns that extensible data types make possible and how they can be applied to solve real-world problems in Rust.\nAlthough some of the implementation details can be challenging, I hope this series has given you a solid sense of how extensible data types are structured, and why a type-driven approach allows our system to remain both modular and flexible as it grows.\nMore importantly, I hope these articles have helped you recognize the design patterns that underpin CGP. Learning to identify and apply these patterns will make your own CGP code more effective and give you tools you can use well beyond this particular topic.\nThe design and implementation of extensible data types push the boundaries of what CGP can achieve. They show how CGP can model advanced language features that are often only possible through direct integration into the Rust compiler. In day-to-day development, you may not need to reach for every advanced technique demonstrated here, but understanding that these patterns exist will broaden your perspective on what is possible.\nEven if you have not fully absorbed every concept presented, I hope this series has inspired you to begin learning CGP from the fundamentals. It is important to realize that many of the basic CGP patterns may initially seem unnecessary or overengineered, yet they are the foundation that makes advanced patterns like extensible data types and Hypershell achievable.\nFinally, you do not need to create entirely new language features or DSLs for CGP to prove valuable. In upcoming posts, we will explore more foundational and intermediate CGP patterns that can help you build practical and maintainable Rust applications. Thank you for following this series and for your support of the CGP project. Exciting developments are on the horizon, and I look forward to sharing them with you.\n","id":"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/","title":"Programming Extensible Data Types in Rust with CGP - Part 4: Implementing Extensible Variants"},"https://www.contextgeneric.dev/blog/hypershell-release/":{"body":"Discuss on Reddit, Lobsters, and Hacker News.\nSummary\nI am thrilled to introduce Hypershell, a modular, type-level domain-specific language (DSL) for writing shell-script-like programs in Rust. Hypershell is powered by context-generic programming (CGP), which makes it possible for users to extend or modify both the language syntax and semantics.\nTable of Contents\nEstimated reading time: 1~2 hours (≈16 500 words).\nThis is a very long blog post, so I have included this section to give you an overview of the content, and know what to expect for each section.\nThe first section, An Overview of Hypershell, gives a high level overview of the Hypershell DSL, together with example programs that we can write with it.\nNext, Context-Generic Programming gives a quick tour on the high level concepts of CGP, so that readers who are new to CGP can quickly onboard to understanding the rest of the blog post.\nFollowing that, Implementation of Hypershell goes into the details of how Hypershell is implemented using CGP.\nAfter that, Extending Hypershell walks through how CGP makes it possible to easily extend Hypershell with new language features.\nFinally, Discussions talks about the work related to Hypershell, the pros and cons of our DSL approach, and how readers can get involved or support the project.\nDisclaimer\nHypershell serves as an experimental proof of concept, showcasing the capabilities of CGP. As such, its primary purpose is to demonstrate how CGP can be used to build highly modular DSLs in Rust.\nThe example use case of shell scripting is primarily chosen because it is fun and approachable to programmers of all backgrounds. But regardless of the future outcome, I hope Hypershell can serve as a fun programming example and inspire you to become interested in learning CGP.\nAn Overview of Hypershell\nGetting Started\nYou can use Hypershell today by simply adding the hypershell crate to your Cargo.toml dependencies. Since we will also cover the direct use of CGP, you should also add the cgp crate to your dependencies.\n\nHello World\nWe will begin learning Hypershell with a simple hello world example. Our hello world program runs the CLI command echo hello world! and then streams the output to STDOUT. With Hypershell, our program is written as follows:\n\nWe first import everything from hypershell::prelude to use common Hypershell constructs. Our hello program is then defined as a Rust type named Program. In the body, we use the hypershell! macro to define our program with shell-like syntactic sugar, such as the use of the pipe operator (|). At a high level, a Hypershell program consists of one or more handlers that form a connected pipeline.\nIn the first part of the program, we use the SimpleExec handler to perform a simplified execution of a CLI command. The first argument to SimpleExec is StaticArg&lt;\"echo\"&gt;, meaning that the program always executes the hardcoded echo command. The second argument to SimpleExec is WithStaticArgs, which accepts a variadic list of static arguments that are passed to the echo command.\nIn the second part of the program, we use the | operator to indicate that we want to pipe the result from SimpleExec to the next handler, StreamToStdout. The StreamToStdout handler then streams the output to the STDOUT of the main Rust program so that we can see the output when running the program.\nNow that our program is defined, we can define a main function to call the Hypershell program inside our Rust program:\n\nWe use #[tokio::main] to define an async main function. Inside the function body, we make use of HypershellCli, which is a pre-defined context that can be used for running simple CLI-only Hypershell programs. The HypershellCli context is an empty struct, hence we are able to directly construct a value and call the handle method on it.\nThe handle method comes from the CanHandle trait from cgp, and is automatically implemented by HypershellCli for any supported program. This blanket implementation is a key enabler of CGP's modularity, allowing HypershellCli to handle diverse Hypershell programs without explicit implementations for each. We pass our program to the first argument of handle as PhantomData::&lt;Program&gt;, that is, the Program we defined earlier is purely a type-level construct and has no meaningful representation at the value-level. Nevertheless, we use PhantomData to \"pass\" the type as a value parameter, as this leads to cleaner syntax compared to passing it as a generic argument.\nWe then pass an empty Vec&lt;u8&gt; to the second argument of handle; this Vec&lt;u8&gt; serves as the STDIN input for the executed command. In this specific echo example, it remains empty as echo operates directly on its arguments rather than STDIN.\nThe full example program shown here is also available at our GitHub repository. If you clone the repository, you can run the example program with cargo run, and we should see the familiar hello world! printed out:\n\nMacro Desugaring\nThe hypershell! macro is a straightforward procedural macro that performs basic syntax transformations, making Hypershell programs resemble shell scripts. However, its use is entirely optional; you can define Hypershell programs without it.\nFor instance, the previous \"hello world\" program can be rewritten as follows:\n\nCompared to the \"prettified\" version, the raw Hypershell syntax is slightly more verbose but remains relatively readable. The first thing to notice is that handlers chained with | are now placed inside a Pipe wrapper. Furthermore, the Product! macro from CGP is used to construct a variable-length list at the type-level, enabling Pipe to accept an arbitrary number of handlers.\nYou can also see that the WithStaticArgs[...] syntax desugars to WithStaticArgs&lt;Product![...]&gt;. With hypershell!, syntax that accepts a variable number of arguments can use the [] shorthand to wrap the inner arguments within Product!. This results in cleaner, more concise syntax, making Hypershell programs more readable.\nFinally, you might notice that all occurrences of strings are wrapped inside the Symbol! macro from CGP. This is because Hypershell programs are types, but string literals are value-level expressions. The Symbol! macro allows you to turn string literals into types, enabling their use within type expressions.\nBehind the scenes, Symbol! functions similarly to const-generics in Rust. However, since Rust doesn't yet support using String or &amp;str as const-generic arguments, the macro desugars the string literal into a type-level list of char, which can be used with const-generics.\nWith these three syntax transformations, we can now better understand how the hypershell! macro works. In Hypershell's DSL architecture, the hypershell! macro provides the surface syntax of the DSL, which is then desugared into Rust types that serve as the abstract syntax.\nVariable Parameters\nNow that we have a better understanding of Hypershell, let's move on to a slightly more complex \"hello world\" example. Suppose we want to run echo with a variable argument name, so that the program prints \"Hello\", followed by the value stored in name. To do that, we would redefine our program as follows:\n\nIn our new program, the second argument to SimpleExec is changed from WithStaticArgs to WithArgs. The main difference is that WithStaticArgs accepts a list of static arguments, while WithArgs accepts a list of arguments with explicit specifiers.\nFor the first argument within WithArgs, we specify StaticArg&lt;\"Hello\"&gt; to indicate that the string \"Hello\" should always be printed as the first argument. Following that, we specify FieldArg&lt;\"name\"&gt; to indicate that the value of the name field from the context should be used as the second argument.\nNow that we have defined our program, a question that arises next is: how can we \"pass\" in the name value to the program? Given that the program itself is only present at the type level, there is no place to hold the name value directly within the program type. If we try to run the program using HypershellCli, we will encounter errors indicating that no name field is present within the HypershellCli context.\nCustom Context\nTo resolve the problem of variable capture, we'll define a new context type for running our program. We'll define a MyApp context with a name field as follows:\n\nThe MyApp context is a straightforward struct with a public name field of type String. What makes it special are the two attribute macros used to automatically derive the capabilities needed for running Hypershell programs.\nThe first macro, #[cgp_context], enables the wiring of CGP components for use by this context. The argument MyAppComponents is the name given to the provider for the MyApp context. For this example, we can largely disregard it as we're not including any additional component wiring.\nThe macro argument is followed by a colon and then HypershellPreset, indicating that the MyAppComponents provider inherits from HypershellPreset, which Hypershell provides. This syntax might remind you of Rust's supertraits, operating somewhat like object-oriented prototypal inheritance but exclusively at compile-time and the type-level.\nFor the purpose of this example, the key takeaway is that the MyApp context implements all supported Hypershell components through its MyAppComponents provider, with the component wiring inherited from HypershellPreset. We'll explore how CGP presets are defined and customized later in this blog post.\nThe second macro, #[derive(HasField)], automatically implements the HasField trait for MyApp. This macro exposes the name field in MyApp via a HasField implementation, making it accessible by the FieldArg&lt;\"name\"&gt; in our Hypershell program.\nNow that our custom context is defined, we can construct an instance of it within our main function and use it to execute our program:\n\nThe complete example is available in the Hypershell repository. Since we initialize the MyApp context with the value \"Alice\" set in the name field, running the program should print \"Hello, Alice\":\n\nContext-Generic Implementation\nThe previous example demonstrates that our custom MyApp context implements all the same functionalities as HypershellCli with only two lines of macro code. This remarkable conciseness is entirely due to Hypershell's core implementation being fully context-generic. Crucially, none of Hypershell's underlying implementation code has direct access to specific concrete types like HypershellCli or MyApp.\nSince the Hypershell core implementation lacks direct access to concrete contexts, it's designed to be generic over any context type that satisfies predefined conditions. This approach makes Hypershell's implementation highly customizable and extensible. CGP makes it incredibly easy to define custom contexts like MyApp, effectively eliminating tight coupling between implementations and concrete types.\nAs a side note, if you're curious, the #[cgp_context] macro does not generate Hypershell implementation code specifically for MyApp. Instead, if you expand the macro, you'll find it generates only a few lines of trait implementations that link to the HypershellPreset provider.\nThis design puts CGP in stark contrast with alternative modular programming libraries in Rust, which often rely on heavy macro expansion to copy \"template\" code implementations to work with concrete types. In contrast, CGP leverages Rust's powerful traits, generics, and type system to ensure that all abstract implementations reliably function regardless of the concrete types they are instantiated with.\nDependency Injection\nA key feature CGP provides, leveraging Rust's capabilities, is dependency injection within context-generic implementations. Even though Hypershell's core implementation is generic over the context type, we can introduce additional trait bounds in impl blocks to impose specific constraints on that context.\nThe implementation for FieldArg&lt;\"name\"&gt; exemplifies this by requiring the generic context to contain a name field. Because MyApp exposes its name field via the HasField instance, FieldArg&lt;\"name\"&gt; automatically works with MyApp. Conversely, attempting to use it with HypershellCli would result in a compilation error, as HypershellCli lacks the required name field.\nFrom this, we also learn that CGP's implementation wiring is performed lazily. Both HypershellCli and MyApp are wired with the same abstract implementations from HypershellPreset. However, only some of these wirings are valid, depending on the additional capabilities provided by the concrete context.\nWhile it has always been possible to use dependency injection through Rust trait impls, even in vanilla Rust, CGP elevates this pattern. It enables powerful use cases like the flexible implementation of FieldArg demonstrated in this example, pushing the boundaries of what's achievable with dependency injection in Rust.\nStreaming Handlers\nNow that we've covered the basics of Hypershell, let's dive into defining more complex Hypershell programs. In our earlier examples, we executed CLI commands using SimpleExec, which handles inputs and outputs as raw bytes (Vec&lt;u8&gt;). This execution mode offers simpler semantics, as you don't need to worry about prematurely closed STDIN or STDOUT streams.\nHowever, a significant appeal of shell scripting is the ability to stream the STDOUT of one program directly into the STDIN of another, with both programs running in parallel. To support this, Hypershell provides StreamingExec, which spawns child processes in the background and manages inputs and outputs as streams. Hypershell currently supports three types of streams: futures::Stream, futures::AsyncRead, and tokio::io::AsyncRead. As we'll see later, Hypershell's modular design also simplifies extending implementations to support other stream types.\nTo demonstrate streaming execution, let's define an example program that streams the HTTP response from a URL and computes the SHA256 checksum of the webpage. Our program would look like this:\n\nSimply put, the Hypershell program above is roughly equivalent to the following bash command:\n\nThe first handler uses curl to fetch the HTTP response from a url value provided by the context. The second handler uses sha256sum to perform a streaming computation of the checksum. The third handler then uses cut to extract only the checksum value produced by sha256sum, effectively ignoring the filename output in the second column.\nAs in the previous example, we'll define a new MyApp context to provide the url value:\n\nWe can then call the program with our MyApp context in the main function:\n\nFor this example, we've chosen a relatively large public webpage — the Nix manual — as the url value for MyApp, to make the effect of streaming more noticeable.\nThe complete example program is also available in the Hypershell repository. If you run it, you should see a checksum similar to this printed to your console:\n\nFeel free to tweak the example with different CLI commands to better observe how Hypershell indeed streams handler inputs and outputs in parallel.\nNative HTTP Request\nIn our previous example, we performed HTTP requests using the curl command before piping the output to sha256sum. But since we're already running our program in Rust, a natural progression is to use native Rust HTTP clients for these requests.\nHypershell offers native HTTP support as a separate extension built on top of its base CLI implementation. This extension provides the SimpleHttpRequest and StreamingHttpRequest handlers, which are the HTTP equivalents of SimpleExec and StreamingExec.\nWe can easily modify our earlier example to use StreamingHttpRequest instead of curl:\n\nThe StreamingHttpRequest handler accepts three arguments. The first, GetMethod, specifies that we want to send a GET HTTP request. The second argument, FieldArg&lt;\"url\"&gt;, indicates that the request should be sent to the URL provided by the url field in our context. The third argument, WithHeaders[], allows us to specify HTTP headers, which we've left empty for this example.\nAs you can see, Hypershell allows you to build seamless streaming pipelines that integrate both native and CLI handlers. In fact, all handlers are simply CGP components that implement the Handler interface. This design makes it incredibly easy to extend the DSL with new handler implementations that can interoperate, as long as the Rust types for their inputs and outputs match.\nBehind the scenes, Hypershell's native HTTP client is implemented using reqwest. To run the program, the context needs to provide an http_client field containing a reqwest::Client instance.\nCombining this with the url field, we'll define our MyApp context like so:\n\nWe can then construct a MyApp context in our main function and call the Hypershell program:\n\nThe full example is available in the project repository. Running it should produce the same HTTP checksum as before:\n\nIt's also worth noting that, besides reqwest, it's possible to customize a context to use alternative HTTP client implementations for SimpleHttpRequest and StreamingHttpRequest. In such cases, you could define contexts without the http_client field if your alternative implementation doesn't require it.\nJSON Encoding\nAs an embedded DSL, Hypershell programs seamlessly integrate shell scripting with the rest of your Rust application. A prime example of this capability is the ability to encode and decode native Rust types as part of a Hypershell program's pipeline.\nHere's an example Hypershell program that submits a Rust code snippet to the Rust Playground and then publishes it as a GitHub Gist:\n\nThe EncodeJson handler accepts any input that implements Serialize and encodes it into JSON bytes as its output. Next, we use SimpleHttpRequest to submit the HTTP request; streaming isn't necessary for small payloads here. Within WithHeaders, we also use Header to set the Content-Type header to application/json. Finally, the DecodeJson handler decodes its input bytes into the specified Rust type, which is expected to implement Deserialize.\nWe define the input and output types as follows:\n\nThe Request and Response types are defined with their respective Serialize and Deserialize implementations, adhering to the formats expected by the Rust Playground API.\nWith the program defined, we can now programmatically submit a code snippet to the Rust Playground in our main function:\n\nWhen no additional fields are required, Hypershell provides the predefined HypershellHttp context, which can be used to run Hypershell programs with HTTP capabilities. This example code is also available in the project repository. Running it should produce an output similar to this:\n\nEnd of Overview\nBy now, hopefully the preceding examples have sufficiently demonstrated the power of Hypershell's base implementation, suggesting its potential utility in building real-world™ applications.\nNow that I've piqued your interest, I hope these examples have also provided you with ample motivation to learn how Hypershell is implemented, and how you can leverage CGP to build other domain-specific languages in a similar fashion.\nContext-Generic Programming\nAt its core, Hypershell's modular implementation is made possible by Context-Generic Programming (CGP), a powerful modular programming paradigm for Rust. You can find a comprehensive introduction to CGP on the website that hosts this blog post. However, for those new to CGP, I'll provide a brief overview in this section.\nAs its name suggests, CGP allows Hypershell's core logic to be generic over any context type, such as HypershellCli, HypershellHttp, or MyApp. This means that whenever you define a new concrete context, you can choose to reuse all, or more importantly, some of Hypershell's core implementation based on your application's specific needs. Furthermore, external developers can write their own context-generic implementations in the same way, enabling them to replace or extend existing core implementations.\nAt a high level, CGP makes it possible to bypass Rust's trait coherence restrictions, allowing you to define overlapping or \"orphan\" trait implementations. Everything else in CGP is built on the foundation of asking: what would Rust programs look like if there were no coherence restrictions? CGP works on safe, stable versions of Rust today, and all you need to do is include the cgp crate as a dependency.\nConsumer and Provider Traits\nThe basic idea of how CGP works around coherence is quite simple. Let's start with an example CanGreet trait, implemented with CGP as follows:\n\nThe CanGreet trait we've defined is a classical Rust trait, which we refer to as a consumer trait in CGP. With the #[cgp_component] macro, a provider trait and a name struct are also generated, as shown below:\n\nCompared to the CanGreet consumer trait, the Greeter provider trait has an additional generic Context parameter that refers to the original Self type from CanGreet. Similarly, all occurrences of Self (i.e., &amp;self) are replaced with the explicit Context (i.e., context: &amp;Context).\nIn CGP, each implementation of a provider trait like Greeter will choose a unique type for its Self parameter (e.g., by defining a dummy struct like struct Provider;). This dummy struct that implements the provider trait is called a provider. Because Rust's coherence restriction primarily applies to the Self type, by choosing a unique Self type for each implementation, we effectively bypass these restrictions. This allows us to define multiple generic implementations that might otherwise overlap on the Context type.\nThe macro also generates a GreeterComponent struct. This struct serves as a name or key for the underlying implementation, used to perform a type-level lookup when instantiating the consumer trait's implementation from a provider trait implementation. We'll revisit this concept shortly.\nTo demonstrate, here are two example provider implementations for Greeter:\n\nThe #[cgp_new_provider] macro automatically defines new structs for GreetHello and GreetBonjour. As you can see, both implementations are generic over the Context type, and no errors arise from overlapping instances.\nComponents Wiring\nWhile multiple overlapping provider trait implementations can coexist, they don't automatically implement the original consumer trait like CanGreet. To implement the consumer trait for a specific concrete context, additional wiring steps are needed to select which provider implementation should be used for that context.\nTo demonstrate how this wiring works, let's define an example MyApp context:\n\nIn this example, we define a concrete MyApp context using the #[cgp_context] macro, which generates a new MyAppComponents struct and associates it with the context. Following this, we use delegate_components! to effectively make MyAppComponents a type-level lookup table. This table contains one entry where GreeterComponent acts as the \"key\" and GreetHello is the \"value.\"\nWith this wiring in place, the concrete MyApp context now automatically implements CanGreet, allowing us to call MyApp.greet(). To understand how this \"magic\" happens, let's visualize the underlying implementation:\n\nStarting from the bottom left, our goal is to implement CanGreet for MyApp. First, the Rust trait system observes that MyApp lacks an explicit CanGreet implementation. However, it does have a HasProvider implementation generated by #[cgp_context], which points to MyAppComponents.\nNext, the trait system sees that MyAppComponents doesn't directly implement Greeter&lt;MyApp&gt;. So, the system performs a type-level lookup using the GreeterComponent key stored in MyAppComponents. This lookup is facilitated by the DelegateComponent&lt;GreeterComponent&gt; trait, which is generated by the delegate_components! macro. Here, it discovers an entry for GreeterComponent that points to GreetHello.\nSubsequently, the trait system confirms that GreetHello has a valid implementation of Greeter&lt;MyApp&gt;. Through this, it generates a blanket implementation of Greeter&lt;MyApp&gt; for MyAppComponents, which simply forwards the call to GreetHello.\nSimilarly, now that Greeter&lt;MyApp&gt; is implemented for MyAppComponents, the trait system generates a blanket implementation of CanGreet for MyApp. This blanket implementation forwards the call to the Greeter&lt;MyApp&gt; implementation of MyAppComponents, which in turn forwards it to GreetHello.\nThese blanket implementations for CanGreet and Greeter were generated by #[cgp_components] when the consumer trait was defined. What we've described above is a high-level visualization of how these blanket implementations function under the hood.\nPrototypal Inheritance\nFor readers familiar with JavaScript, you might notice that CGP's wiring mechanics bear a striking resemblance to how prototypal inheritance works in JavaScript. Conceptually, our earlier greet example functions similarly to the following JavaScript code:\n\nSince JavaScript is dynamically typed, the concept of a trait or interface can't be explicitly specified in the code. However, we can still conceptually think of a CanGreet interface with certain method requirements. The greet_hello function here is the equivalent of a provider that implements the imaginary Greeter interface.\nSimilarly, MyAppComponents acts as a lookup table, mapping the greet method to the greet_hello provider. We then define the MyApp context class and set MyAppComponents as MyApp's prototype. This mirrors CGP's HasProvider trait, which links the consumer trait implementation to the provider trait.\nFinally, we can instantiate MyApp using the new keyword, and as expected, the app.greet() method can be called.\nIf we visualize the prototype wiring in our JavaScript example, we get a diagram very similar to the one for CGP:\n\nWe navigate this implementation diagram starting from the top-left corner. For app.greet() to be implemented, its class MyApp needs a prototype field pointing to MyAppComponents. We then perform a lookup on the greet key and find the greet_hello provider function to be called.\nDuring runtime, the MyAppComponents prototype is attached to app.__proto__, which in turn enables app.greet() to be called.\nComparison to OOP\nWhile CGP shares similarities with OOP, particularly prototype-based programming, its implementation differs significantly in ways that make CGP a far more powerful system.\nCrucially, Rust's strong type system, combined with advanced features like generics and traits, enables the creation of highly sophisticated constructs that are simply not possible with OOP alone. Furthermore, CGP performs its prototype-like lookup at compile-time, thereby eliminating runtime overheads associated with virtual tables and JIT compilation.\nThrough this comparison, I also hope to convey that CGP is not an entirely novel or incomprehensible concept. Many resources explain prototypal inheritance in depth, but there are virtually no third-party articles detailing how CGP works. My intention with this similarity comparison is to help readers from an OOP background better grasp CGP by connecting it to familiar concepts.\nLearn More\nWe've now concluded our brief introduction to CGP. So far, we've explored CGP at a high level, with minimal technical details or code exploration into its inner workings.\nIf you're eager to learn more about how CGP functions, I recommend reading the in-progress book, Context-Generic Programming Patterns. This book walks through all the programming techniques used to build CGP from the ground up. However, if you're not concerned with the internal details and simply want to start programming with CGP quickly, you might want to skip the book for now.\nUnfortunately, we don't yet have simple tutorials available for quickly getting started with CGP. This is partly because the benefits of CGP truly become apparent only in highly complex applications with many cross-cutting concerns, typically after writing 5,000 to 10,000 lines of code. Consequently, if a tutorial only showcases a few hundred lines of example code, some readers might inevitably feel confused about why they should learn to write that code with CGP, rather than using familiar vanilla Rust patterns.\nInstead, the current priority for the CGP project is to leverage its full power to build robust DSL frameworks, such as Hypershell. These frameworks aim to demonstrate CGP's full potential and undeniable usefulness in showcased domains, thereby giving readers a compelling reason to start learning CGP.\nA consequence of this strategy is that many advanced CGP patterns are introduced all at once, as you'll see in the next section. Many of these advanced CGP patterns aren't yet covered in the book, and currently, there's no other documentation besides this blog post that discusses them. As a result, if you're entirely new to CGP or just starting to grasp its basic concepts, continuing to the next section might feel overwhelming and confusing.\nNevertheless, I'll strive to explain these advanced CGP concepts at as high a level as possible, omitting internal details similar to how the earlier CGP wiring explanation was presented. So, I hope you'll bear with me for now as we walk through how Hypershell is implemented with CGP.\nImplementation of Hypershell\nNow that we have a brief understanding of CGP, let's explore how the Hypershell DSL is implemented using it. The programming techniques we're about to cover aren't exclusive to Hypershell; they apply more generally to any kind of DSL.\nThe core idea is that programs for this family of DSLs are written as types that are \"interpreted\" at compile time. The primary advantage of this approach is that the DSL can leverage the Rust compiler and zero-cost abstractions to be highly performant. The main drawback is that the DSL program must be available at the same time the Rust program is built. In other words, this approach is less suitable for scripting applications that require dynamic program loading, such as web browsers or plugin systems, unless the system also bundles the full Rust compiler to compile the DSL program.\nNevertheless, this section will be especially useful for readers interested in building DSLs similar to Hypershell. For other readers, I hope this section will still enhance your understanding of CGP and encourage you to consider using it for other modular applications.\nHandler Component\nThe central component underpinning Hypershell is the Handler component, which is implemented by each handler in a Hypershell pipeline. The consumer trait for this component, CanHandle, is defined as follows:\n\nThe CanHandle trait is parameterized by two generic types: Code and Input. The Code type represents the DSL program that we want to \"run\" or \"interpret,\" while Input is the primary input data passed to the program (e.g., STDIN or an HTTP request body). Both generic types carry an additional Send bound because CGP generally requires async functions to be Send by default, allowing them to be used in spawned tasks like those managed by tokio::spawn.\nThe trait also defines an associated type Output, which represents the data produced by the program (e.g., STDOUT or an HTTP response body). As an associated type, it signifies that for each unique combination of Code and Input parameters, there is a unique Output type associated with it.\nThe handle method is an async function with &amp;self as its first argument. This means that in addition to the Input, the handler also has access to the context, which contains dependencies and environmental information. The second parameter, _code, is of type PhantomData&lt;Code&gt;. This is used to pass the Code program as a value to assist with type inference. Beyond that, the _code value is expected to be ignored by the method body, as PhantomData carries no runtime information.\nThe handle method returns a Result, with Self::Output representing the success value and Self::Error indicating an error. Self::Error is an abstract type defined by the ErrorTypeProvider component, which is defined in CGP as follows:\n\nFirst, HasErrorType is a consumer trait containing an associated Error type, which is always required to implement Debug. The #[cgp_type] macro is an extension of #[cgp_component], used to define abstract type components with additional derivations. This macro also generates an ErrorTypeProvider provider trait.\nTo support the async method in CanHandle, the context and the Error type also need to implement Send. This is provided by HasAsyncErrorType as a trait alias:\n\nThe HasAsyncErrorType trait is automatically implemented for any Context type that implements HasErrorType, with the additional constraints that Context: Send + Sync and Context::Error: Send + Sync. This ensures that the Future returned by async functions that capture Context or Context::Error will always implement Send.\nThe #[blanket_trait] macro is provided by CGP to shorten trait alias definitions. Behind the scenes, it generates a trivial blanket implementation for HasAsyncErrorType that is activated if all supertrait constraints are satisfied.\nReturning to CanHandle, the #[cgp_component] macro also generates the provider trait Handler as follows:\n\nAs we can see, the main difference between Handler and CanHandle is that the Self type in CanHandle is replaced with an explicit Context parameter in Handler. The supertrait HasAsyncErrorType now becomes a trait bound for Context.\nAbstract Syntax\nNow that we understand the interface for the handler component, let's look at how the Handler trait is implemented for a basic Hypershell code: SimpleExec. As you might recall, SimpleExec allows the execution of shell commands, using raw bytes for both input and output.\nIf you navigate to the definition of SimpleExec, all you'll find is this:\n\nWait, what? Is that it? Yes, you read that right. There are no extra trait implementations directly tied to SimpleExec. In fact, all types used to \"write\" a Hypershell program are just dummy structs like this one.\nThis implies that how a Hypershell program is \"written\" is completely decoupled from how the program is \"interpreted\" or \"executed\" by a concrete context.\nIn other words, when we explored our examples earlier, HypershellCli, HypershellHttp, or MyApp were just a few of the possible choices you could make to run your Hypershell programs. More generally, since all these contexts so far only inherit from HypershellPreset, it means you can also build fully customized presets with different ways to run the programs — for example, by changing how SimpleExec should behave.\nMore formally, a type like SimpleExec represents the abstract syntax of the Hypershell DSL. We then leverage CGP and Rust's trait system to act as the \"interpreter\" for the DSL, dispatching the handling of a program fragment to a specific CGP provider. When you define custom contexts, you're essentially building custom \"interpreters\" used for \"executing\" the Hypershell program at compile time.\nIt's also worth noting that the pattern introduced here is a highly advanced CGP programming technique. Simpler versions of this pattern exist, such as higher-order providers, where traits like Handler wouldn't contain the Code parameter, and types like SimpleExec would directly implement the Handler trait. In this simplified pattern, the program's execution would be tightly coupled with a specific implementation, making it less modular.\nBoth higher-order providers and the DSL patterns are advanced CGP techniques not yet covered in the CGP patterns book. While such advanced techniques can sometimes be overkill for building simple applications — especially for beginners just trying to make their applications slightly more modular — they are perfect for building DSLs. This is because it's good practice to separate the syntax from the semantics of programming languages.\nHandler Implementation for SimpleExec\nFor many new to CGP, it's likely unclear how to even begin finding the actual implementation for SimpleExec at this point. We'll delve into the wiring specifics later. For now, let's jump straight to the default provider Hypershell uses to implement SimpleExec:\n\nIf you search for SimpleExec in the Hypershell codebase, you'll find HandleSimpleExec. This is a provider that implements Handler specifically for SimpleExec.\nThe main method body for HandleSimpleExec isn't particularly complex; it largely resembles regular Rust code. It primarily uses Tokio's Command to spawn a new child process with the specified arguments. It then writes the input to the process's STDIN via the returned Child and calls wait_with_output to retrieve the result from STDOUT.\nTherefore, to keep this blog post focused, we've omitted the method body and will instead concentrate on the trait signature's integration within Hypershell.\nLooking at the generic parameters, you might notice that SimpleExec&lt;CommandPath, Args&gt; is used where Code was previously. In essence, HandleSimpleExec implements Handler if Code is specifically in the form SimpleExec&lt;CommandPath, Args&gt;. We're using Rust generics here to \"pattern match\" on a DSL code fragment and extract its inner CommandPath and Args parameters.\nCommand Arg Extractor\nWithin the where clause, we utilize dependency injection to require other dependencies from the generic Context. The first trait, CanExtractCommandArg, is defined as follows:\n\nThe CommandArgExtractor component provides an extract_command_arg method to extract a command-line argument from an Arg code type. This method returns an abstract CommandArg type, which can be instantiated with concrete types like PathBuf or String.\nFor example, given code like SimpleExec&lt;StaticArg&lt;Symbol!(\"echo\")&gt;, ...&gt;, the Arg type passed to CanExtractCommandArg would be StaticArg&lt;Symbol!(\"echo\")&gt;. This means that for HandleSimpleExec to implement Handler&lt;Context, SimpleExec&lt;StaticArg&lt;Symbol!(\"echo\")&gt;, ...&gt;, Input&gt;, it requires Context to implement CanExtractCommandArg&lt;StaticArg&lt;Symbol!(\"echo\")&gt;&gt;.\nSince extract_command_arg returns an abstract CommandArg type, HandleSimpleExec also has an additional constraint: Context::CommandArg: AsRef&lt;OsStr&gt; + Send. This implies that the context can instantiate CommandArg with any concrete type that implements AsRef&lt;OsStr&gt; + Send, such as PathBuf or OsString.\nThis also highlights how CGP's dependency injection is more powerful than typical OOP dependency injection frameworks. We can use it not only with the main Context type but also with all associated types provided by that context.\nCommand Updater\nBeyond CanExtractCommandArg, HandleSimpleExec also requires Context: CanUpdateCommand&lt;Args&gt; to handle the CLI arguments passed to the command. Let's examine this trait's definition:\n\nSimilar to CanExtractCommandArg, CanUpdateCommand has a generic Args parameter to process the CLI arguments specified in the Hypershell program. However, instead of returning a value, the update_command method takes a mutable reference to a Tokio Command value.\nBy directly passing a &amp;mut Command, the DSL can provide different argument syntaxes to configure CLI execution in various ways. For instance, WithArgs allows specifying a list of CLI arguments, but we could also define new syntaxes like WithEnvsAndArgs to allow specifying both CLI arguments and environment variables for the child process.\nTo see this in action, consider the example code:\n\nThe Args type given to HandleSimpleExec would be WithStaticArgs&lt;Product![Symbol!(\"hello\"), Symbol!(\"world!\")]&gt;. This means the following constraint needs to be satisfied:\n\nTo keep our focus on the core implementation of HandleSimpleExec, we'll omit the detailed workings of argument updates. At a high level, the main idea is to perform a type-level iteration on the list passed to WithStaticArgs. So, the implementation would be broken down into two smaller constraints:\n\nOnce we reach each individual argument, we then use CanExtractCommandArg to extract the argument and subsequently call Command::arg to add it to the Command.\nIt's worth noting that the CanUpdateCommand trait is tightly coupled with the Tokio Command type. This means the trait cannot be reused if alternative implementations execute CLI commands without using Tokio. However, this is perfectly acceptable, and nothing in CGP prevents us from defining less-abstract interfaces.\nInstead, CGP's main advantage is that a trait like CanUpdateCommand can be included by specific providers that need it via dependency injection. This means that if the involved providers aren't wired with the concrete context, then the context doesn't need to implement a trait like CanUpdateCommand either.\nIn other words, a CGP trait like CanUpdateCommand might be tightly coupled with Tokio, but the trait itself remains fully decoupled from the rest of Hypershell. Consequently, it wouldn't prevent Hypershell from having alternative implementations that don't use Tokio at all.\nError Handling\nWithin the where clause for HandleSimpleExec, you'll notice it also requires Context to implement CanRaiseAsyncError&lt;std::io::Error&gt;. Here, we'll briefly explore how CGP offers a distinct and more modular approach to error handling.\nWhen calling upstream Tokio methods, such as Command::spawn, the method returns a std::io::Error. However, since the method signature requires an abstract Context::Error to be returned in case of errors, we need a way to convert, or \"upcast\", the std::io::Error into Context::Error.\nA naive approach to error handling would be to require a concrete error type for the implementation. For example, we could modify CanHandle's method signature to return anyhow::Error instead of Context::Error. Alternatively, we could add a constraint Context: HasErrorType&lt;Error = anyhow::Error&gt; to force the context to provide a specific error type, such as anyhow::Error. However, doing so would introduce unnecessary coupling between the provider implementation and the concrete error type, preventing the context from reusing the provider if it wished to choose a different error type for the application.\nError Raisers\nInstead, CGP provides the ErrorRaiser component as a way for context-generic implementations to handle errors without requiring access to the concrete error type. The trait is defined as follows:\n\nYou can think of CanRaiseError as a more flexible form of Rust's From trait for error handling. In fact, if a From instance exists for all SourceErrors used by an application, the provider can be trivially implemented:\n\nWhen programming with CGP, it's generally preferred to use CanRaiseError rather than directly using From to convert a source error to the abstract Context::Error. This is because From is a plain Rust trait subject to coherence rules, making it challenging to customize if a From instance isn't implemented by a third-party error type like anyhow::Error.\nConversely, using CanRaiseError grants significantly more freedom to use anything as a SourceError without worrying about compatibility. For instance, it's common for context-generic implementations to use CanRaiseError&lt;String&gt; or even CanRaiseError&lt;&amp;'static str&gt;, especially during early prototyping phases. This would cause issues if we instead required Context::Error: From&lt;String&gt;, as types like anyhow::Error do not implement From&lt;String&gt;.\nReturning to our example, with the CanRaiseError&lt;std::io::Error&gt; constraint in place, we can now call Command::spawn() inside HandleSimpleExec and handle the error using .map_err(Context::raise_error):\n\nDefault Error Type\nIn the default Hypershell contexts, such as HypershellCli, we use anyhow::Error along with providers from the cgp-error-anyhow crate to handle errors from different parts of the application.\nHowever, just like almost everything else in CGP, an application can choose different error providers. For example, it could use eyre::Report with cgp-error-eyre to handle errors from Hypershell programs. This is especially useful if users want to embed Hypershell programs within larger applications that use their own structured error types defined with thiserror.\nError Wrappers\nIn the where clause for HandleSimpleExec, we also see a constraint Context: for&lt;'a&gt; CanWrapAsyncError&lt;CommandNotFound&lt;'a&gt;&gt;. Let's explore what this entails.\nCGP also provides a supplementary ErrorWrapper component, which offers similar functionality to anyhow::Error::context for adding additional details to an error. The trait is defined as follows:\n\nUsing CanWrapError, we can, for instance, add extra details on top of a std::io::Error to explain that the error occurred while attempting to spawn the child process. A common frustration with the base I/O error is that when an executable isn't found at the specified command path, only a generic NotFound error is returned without details about what wasn't found. Using CanWrapAsyncError, we can now add specific information about the missing command to the error:\n\nIn this example, we first check if the error kind returned from command.spawn() is ErrorKind::NotFound. We then use raise_error to convert the error into Context::Error. After that, if the error kind was NotFound, we call wrap_error to wrap the error with a custom CommandNotFound detail, defined as follows:\n\nThe CommandNotFound struct holds a reference to the Command we're trying to run. We pass the full Command struct here so that a potential ErrorWrapper implementation can display customized error messages about the failing command. We also provide a default Debug implementation for CommandNotFound, which prints only the program path without additional details about the full command.\nSimilar to ErrorRaiser, CGP allows the ErrorWrapper implementation to be chosen by the context to handle errors differently. For instance, the HypershellCli context uses the DebugAnyhowError provider from cgp-error-anyhow. This provider builds a string using the Debug implementation and then calls anyhow::Error::context with the formatted string. However, if desired, a user of Hypershell is free to override this behavior, such as printing the full command or wrapping the error in other ways.\nSince CommandNotFound contains a lifetime, when we specify the constraint, we need to add a higher-ranked trait bound (HRTB) (for&lt;'a&gt;) to the constraint. This ensures we can always wrap the error for any lifetime. While it's possible to pass an owned Command value without a lifetime here, this isn't always feasible when the detail originates from argument references. Furthermore, using a reference encourages the wrapper handler to extract only essential details, avoiding the bloating of the error value with large wrapped values.\nInput Type\nThe Handler implementation for HandleSimpleExec is designed to work with any generic Input type, provided it satisfies the Input: Send + AsRef&lt;[u8]&gt; constraint. This means that besides Vec&lt;u8&gt;, you can also pass in compatible types like String, Bytes, or &amp;'a [u8].\nHowever, this constraint also implies that HandleSimpleExec cannot directly accept inputs from stream types that implement traits like AsyncRead. If you try to form a pipeline like StreamingExec&lt;...&gt; | SimpleExec&lt;...&gt;, it would result in a compile-time error due to Hypershell's strongly typed nature.\nOne way to work around this is to incorporate explicit adapters provided by Hypershell into your pipeline, transforming the output before it's passed as the next input:\n\nThe key takeaway here is that the supported Input and Output types in a Hypershell program are determined by the chosen concrete provider, not by the abstract syntax itself. A concrete context can choose to wire a different provider to handle SimpleExec, in which case the supported input/output types for SimpleExec might change.\nNevertheless, just as with standard programming languages, it's possible to define a standard around the language syntax to impose expectations and requirements on how the program should behave. For example, a language specification for Hypershell might state that it should always be possible to pipe the output from StreamingExec to SimpleExec, and vice versa. In such scenarios, HandleSimpleExec alone might not suffice to handle all valid Hypershell programs.\nBut as we'll learn later, it's also possible to use CGP's generic dispatcher pattern to perform ad hoc dispatch to different handlers, based on the Input type. In such cases, HandleSimpleExec would become part of a larger implementation capable of handling all possible Input types encountered in a Hypershell program.\nModularity of HandleSimpleExec\nIf you examine the entire implementation of HandleSimpleExec, you'll find that, apart from its dependencies on Tokio, CGP, and Hypershell's core traits, the implementation is completely decoupled from the rest of the application. In fact, you could move this implementation code to an entirely new crate, include only these three dependencies, and everything would still function correctly.\nThis illustrates how code written with CGP typically has an inverted structure in its dependency graphs. Instead of focusing on concrete types, CGP begins with abstract implementations and only defines the concrete types at the final stage of the process. This significantly reduces bloat in the dependency graph, as each sub-crate can be compiled with only the exact dependencies it needs.\nTo demonstrate this benefit in action, let's look at how Hypershell structures its crate dependencies:\n\nhypershell-components: Defines DSL types and CGP component interfaces, depending solely on cgp.\nhypershell-tokio-components: Implements Tokio-specific CLI providers and component interfaces. Depends on cgp, hypershell-components, and tokio.\nhypershell-reqwest-components: Implements Reqwest-specific HTTP providers and component interfaces. Depends on cgp, hypershell-components, and reqwest.\nhypershell: Defines concrete contexts and wiring, depending on all other Hypershell crates.\n\nAs you can see, even though the full Hypershell application uses both Tokio and Reqwest, the hypershell-tokio-components crate can be built without reqwest being part of its dependencies. While this might seem minor with only two crates, consider a large Rust application with hundreds of dependencies: CGP makes it much easier to break down dependencies, ensuring that each part of the implementation is compiled with only the precise dependencies it requires.\nThis level of modularity also means it's possible to build alternative Hypershell implementations that completely remove tokio from their dependencies. For example, you could use async-process with smol as the runtime to spawn CLI processes. Of course, since reqwest also depends on tokio, fully removing tokio would also require substituting hypershell-reqwest-components with an alternative HTTP library like isahc.\nIt's also worth highlighting that with CGP, there's no need to use feature flags to switch between underlying implementations. Because CGP providers can be implemented in complete isolation from one another, you can simply create new crates that don't depend on the original providers and define new contexts wired with the alternative providers.\nThis generic approach is also less error-prone than feature flags, as all alternative implementations can coexist and be tested simultaneously, unlike having multiple variants of the code that must be tested separately for each combination of feature flags.\nWiring for SimpleExec\nAt this point, we've learned how HandleSimpleExec is implemented to handle the SimpleExec syntax. Next, let's look into how the HandleSimpleExec provider is wired up so that it's accessible from concrete contexts like HypershellCli.\nGeneric Dispatcher\nAs we know, besides SimpleExec, there are other Hypershell syntaxes such as StreamingExec and SimpleHttpRequest. However, since HandleSimpleExec only implements Handler for SimpleExec, we can't directly wire it as the provider for all generic parameters of Handler. Instead, we need an intermediary provider, known as a generic dispatcher, to route the handling logic to different providers based on the generic Code parameter.\nThe pattern for provider dispatching based on generic parameters is common enough that CGP offers options to automatically derive them within the #[cgp_component] macro. For the Handler component, a dispatcher called UseDelegate is provided to manage provider dispatching based on the Code parameter.\nIn CGP, we can declare the dispatching logic in a similar way to normal provider delegation using the delegate_components! macro. The following shows a simplified wiring of providers for HypershellCli:\n\nThe first part of the wiring declaration is identical to the hello world example we saw earlier. We define a HypershellCli struct using #[cgp_context] to make it a CGP context with HypershellCliComponents as its provider. We then use delegate_components! on HypershellCliComponents to set up the wiring for all providers used by the context. However, for the HandlerComponent wiring, we map it to UseDelegate&lt;HypershellHandlerComponents&gt; instead of directly to HandleSimpleExec.\nFollowing that, we define a new struct HypershellHandlerComponents and use delegate_components! to define some mappings on it. But this time, instead of mapping CGP component names, we map the Hypershell syntax types to their respective providers. In the first entry, we map SimpleExec to HandleSimpleExec, and then map StreamingExec to a HandleStreamingExec provider, which is implemented separately in Hypershell.\nIn the mappings for HypershellHandlerComponents, you'll also notice the key for SimpleExec specified as &lt;CommandPath, Args&gt; SimpleExec&lt;CommandPath, Args&gt;. The initial part, &lt;CommandPath, Args&gt;, is used as additional generic parameters for the mapping. This is because we want to map all possible uses of SimpleExec to HandleSimpleExec. If these weren't specified, Rust would instead try to find specific concrete Rust types named CommandPath and Args imported within the module, leading to errors if it couldn't find them.\nEssentially, we're defining HypershellHandlerComponents purely as a type-level key-value map, and then using it as a lookup table for UseDelegate. We can also see that with types as keys, we gain additional expressivity to specify and capture generic parameters in the keys, which wouldn't be possible with value-level lookup tables.\nNow that we've walked through the wiring declaration, let's visualize how CGP actually implements a trait instance of CanHandle&lt;SimpleExec&lt;Command, Args&gt;, Input&gt; for the HypershellCli context:\n\nThe first two parts of this diagram are similar to how the implementation was done for the Greeter component example earlier. For the HypershellCli context to implement CanHandle&lt;SimpleExec&lt;Command, Args&gt;, Input&gt;, Rust's trait system would first determine that HypershellCli implements HasProvider, which points to HypershellCliComponents.\nThe trait system then attempts to find an implementation of Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt; for HypershellCliComponents. Next, it sees that HypershellCliComponents implements DelegateComponent&lt;HandlerComponent&gt;, which points to UseDelegate&lt;HypershellHandlerComponents&gt;, and so the implementation lookup continues there.\nThis time, the trait system finds that UseDelegate&lt;HypershellHandlerComponents&gt; has a candidate implementation for Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt;. However, for that to be implemented, UseDelegate requires HypershellHandlerComponents to contain a lookup entry for the Code parameter. That is, HypershellHandlerComponents should implement DelegateComponent&lt;SimpleExec&lt;Command, Args&gt;&gt;.\nFinally, the system finds that HypershellHandlerComponents contains the specified entry, which points to HandleSimpleExec. It then confirms that HandleSimpleExec implements Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt;, thus completing the implementation.\nCompared to the earlier Greeter example, the delegation chain for SimpleExec handling goes four levels deep instead of three. Aside from that, the underlying implementation for UseDelegate follows the same pattern as the blanket implementation of the Handler provider trait. However, instead of being a blanket implementation, UseDelegate is implemented as a context-generic provider for Handler.\nFurthermore, beyond Handler, the same pattern has been implemented by UseDelegate for many other CGP traits, such as ErrorRaiser, making it a universal pattern applicable to any CGP trait that contains additional generic parameters.\nThe implementation of UseDelegate also demonstrates CGP's power, showing that once coherence restrictions are lifted, entirely new categories of patterns can be defined to work consistently across many traits. In addition to UseDelegate, many other CGP patterns have been implemented as context-generic providers, such as UseContext, UseType, UseField, WithProvider, and more.\nCGP Presets\nEarlier, we saw a simplified way to wire HandleSimpleExec for the HypershellCli context. However, as the initial examples showed, we want to reuse these same wirings for other contexts like HypershellHttp and MyApp. Moreover, given Hypershell's modularity, we want to easily extend or customize existing component wirings and create new collections of wirings that can be shared within the community.\nCGP offers presets as a powerful mechanism to build these extensible component wirings. At a high level, a CGP preset is a module that contains a type-level key-value map, along with traits and macros that support operations on this map.\nThe operations possible on a preset share some conceptual similarities with inheritance in object-oriented programming (OOP), at least from an implementation perspective. More plainly, it allows for iteration over the keys stored in the preset's type-level key-value map. As we know from basic algorithm courses, if we can iterate over a map's keys, we can then construct new maps that share the same keys as the original. To put it even more simply, CGP presets allow us to perform the Rust equivalent of map.iter().filter_map() on a HashMap value, but at the type level.\nNow that we understand how presets work at a high level, it should be clearer how they support inheritance-like features in CGP. CGP supports two kinds of inheritance operations. The first is a simplified one-level, single inheritance, implemented through Rust traits. This allows a CGP context to implement traits like DelegateComponent based on all keys stored in a single preset.\nThe second form is a macro-based approach, which enables nested levels of multiple inheritance when defining new presets. These macros work by expanding the preset keys as list syntax (e.g., [KeyA, KeyB, KeyC, ...]) and then processing these keys syntactically through a separate macro. This means the macro approach can be less reliable, as we lose access to precise type information, and ambiguity can arise if the same identifier refers to multiple types in scope or when aliases are used. However, it's more flexible, allowing us to work with more than one map, which isn't possible with the trait-based approach due to coherence restrictions.\nHypershell Presets\nThanks to presets, Hypershell's core implementation is highly customizable. Hypershell defines all its component wirings as extensible presets, allowing users to extend, replace, or customize any of them.\nThe primary preset provided by Hypershell is HypershellPreset, which can be directly used by contexts like HypershellCli. However, beneath this main preset, Hypershell actually breaks down its components into several smaller presets, including HypershellTokioPreset for CLI components and HypershellReqwestPreset for HTTP components. This granular approach allows one sub-part of the presets to be entirely replaced while keeping other parts unmodified.\nFurthermore, Hypershell also defines the dispatch tables for components like HandlerComponent as presets. This design enables us to extend the handler component presets, rather than the main preset, to introduce new syntaxes to the DSL or customize the wiring for existing syntaxes like SimpleExec.\nHigh Level Diagram\nLet's now walk through how HandleSimpleExec is wired within the Hypershell presets. But before we start, here's a high-level diagram illustrating the levels of indirection involved:\n\nAs you can see, there's quite a bit of indirection in that diagram! We'll go through each step one by one, along with the relevant code snippets, to give you a clearer understanding of what's happening.\nDefinition of HypershellCli\n\nWe begin with the definition of the HypershellCli context, where HypershellPreset is specified as the preset to be inherited by the context's provider, HypershellCliComponents. The initial part of the implementation remains the same: HypershellCli receives a blanket implementation for CanHandle&lt;SimpleExec&lt;Command, Args&gt;, Input&gt; if HypershellCliComponents implements Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt;.\nFollowing this, for HypershellCliComponents to implement the provider trait, the trait system will look for its DelegateComponent entry with HandlerComponent as the key, which now points to HypershellPreset. The system finds this entry via a blanket implementation of DelegateComponent using a special HypershellPreset::IsPreset trait. This blanket implementation is generated by #[cgp_context], allowing HypershellCliComponents to delegate all components from HypershellPreset without any additional code.\nDefinition of HypershellPreset\nHypershellPreset is defined as follows:\n\nFirst, when defining CGP presets, we need to wrap the code within a mod preset annotated with #[cgp::re_export_imports]. This macro captures all use statements within the module and creates a hidden pub use variant of these imports. This \"hack\" is necessary for the macro-based preset operations to work, as we need to re-import all key identifiers in a child preset to bind them to their original types. The macro also re-exports everything in the inner module, so you can import the preset as if the preset wrapper module isn't present.\nWe then define HypershellPreset using the cgp_preset! macro. You can see that this preset leverages multiple inheritance to inherit from several other parent presets, including HypershellTokioPreset, which contains all component wirings for implementing Hypershell's CLI features using tokio.\nIn one of HypershellPreset's entries, we see that HandlerComponent is specified with an additional override keyword. An overridden preset entry is useful for handling conflicting entries that arise from multiple inheritance (i.e., the diamond problem), as well as allowing the child preset to override parts of the component wiring provided by a parent preset.\nIn the case of HypershellPreset, override is used because we want to define a new provider, HypershellHandlerPreset, that combines handlers for different groups of syntaxes coming from various parent presets. When specifying the entry value, we use HypershellHandlerPreset::Provider because HypershellHandlerPreset itself is actually a module. When we need to refer to the preset as a type, we access it through the ::Provider item within that module.\nDefinition of HypershellHandlerPreset\nHypershellHandlerPreset is defined as follows:\n\nFrom the code above, we can see that HypershellHandlerPreset is defined as a separate preset within the same module. This preset has an empty body; it merely combines the handler wirings from parent presets like TokioHandlerPreset.\nThe preset is also annotated with #[wrap_provider(UseDelegate)]. This instructs cgp_preset! to wrap the Preset::Provider type in the preset module with UseDelegate. This is crucial because the component entries themselves don't result in a blanket implementation of Handler (or any provider trait). However, by wrapping the entry inside UseDelegate, the Handler trait becomes implemented by performing dispatch to the entries based on the Code type.\nExpansion of cgp_preset!\nWhen all is said and done, the call to cgp_preset! roughly expands into the following:\n\nFirst, cgp_preset! defines a module called HypershellHandlerPreset. Inside this module, a Components struct is defined, and delegate_components! is called with the mappings specified within the cgp_preset! macro's body. Additionally, delegate_components! is also applied to all keys in the super presets, with the delegate target set to the super preset's Provider type. We've used pseudocode in the example above for clarity, as the actual underlying syntax is more verbose and potentially confusing.\nWhen #[wrap_provider(UseDelegate)] is used, the macro defines Provider as a type alias to UseDelegate&lt;Components&gt;. If #[wrap_provider] is not specified, as when we defined HypershellPreset earlier, Provider is simply a type alias to Components.\nDefinition of TokioHandlerPreset\nNext, let's look at how TokioHandlerPreset is defined:\n\nAs you can see, TokioHandlerPreset is defined similarly to HypershellHandlerPreset and is also wrapped with UseDelegate. This preset now contains a non-empty list of entries, with SimpleExec mapped to HandleSimpleExec, StreamingExec mapped to HandleStreamingExec, and so on.\nGiven that TokioHandlerPreset implements only the handlers for Hypershell's CLI syntaxes, you'll find mappings for other syntaxes in other presets, such as ReqwestHandlerPreset, which provides mappings for SimpleHttpRequest and StreamingHttpRequest. So, when HypershellHandlerPreset inherits from both TokioHandlerPreset and ReqwestHandlerPreset, we are essentially \"merging\" the entries from both preset mappings into a single mapping.\nFull Trace of Preset Delegations\nReturning to the implementation diagram at the beginning, we can now trace the remaining implementation steps:\n\nHypershellPreset (or more specifically, HypershellPreset::Provider) has a blanket implementation for Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt;. This is because it has a DelegateComponent entry for HandlerComponent, which points to HypershellHandlerPreset::Provider, which is UseDelegate&lt;HypershellHandlerPreset::Components&gt;.\nUseDelegate&lt;HypershellHandlerPreset::Components&gt; has a context-generic implementation for Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt;. This is because HypershellHandlerPreset::Components has a DelegateComponent entry for SimpleExec&lt;Command, Args&gt;, which points to TokioHandlerPreset::Provider, which is UseDelegate&lt;TokioHandlerPreset::Components&gt;.\nUseDelegate&lt;TokioHandlerPreset::Components&gt; has a context-generic implementation for Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt;. This is because TokioHandlerPreset::Components has a DelegateComponent entry for SimpleExec&lt;Command, Args&gt;, which points to HandleSimpleExec.\nFinally, HandleSimpleExec implements Handler&lt;HypershellCli, SimpleExec&lt;Command, Args&gt;, Input&gt;. This completes the implementation chain, and calls are ultimately forwarded to it.\n\nAt this point, you might feel that defining so many levels of indirection just to wire up a single handler like HandleSimpleExec is overly complicated. However, each level of indirection is essential for enabling additional flexibility in customizing Hypershell. This section also lays the groundwork for understanding the next section, where we'll explore how to leverage these defined presets to add new language extensions to the Hypershell DSL. After that, you'll hopefully better appreciate the level of modularity introduced here.\nIt's also worth noting that this is not necessarily a recommendation for how you should write CGP code in your own applications. In fact, you may not even need presets at all if your initial application has only one concrete context with no further customization needs.\nEverything we've described in this section is to explain the internal architecture of Hypershell, which is not required knowledge for end-users who simply want to use Hypershell without additional customization. Instead, this section is primarily useful for developers interested in extending Hypershell or building similar modular DSLs.\nExtending Hypershell\nWe now have a basic understanding of Hypershell's structure and how its implementation is modularized. To fully grasp the benefits this provides, let's try extending the language by introducing new syntaxes to the DSL.\nChecksum Handler\nRecall that in an earlier example for HTTP requests, we fetched web content from a URL and then computed its HTTP checksum using the sha256sum command. While this approach allows for quick iteration and results, there's room for improvement once the initial prototype is working.\nSpecifically, since we're within Rust, an obvious optimization would be to use a native library like sha2 to compute the checksum.\nSyntax Extension\nFollowing Hypershell's modular DSL design, we first want to define an abstract syntax that users can employ in their Hypershell programs. This abstract syntax decouples the language extension from its concrete implementation, allowing users to choose an alternative implementation, such as using the sha256sum command, to compute the checksum.\nFor this demonstration, we'll define an abstract Checksum syntax as follows:\n\nInstead of defining a specific SHA256 syntax, we've created a general Checksum syntax that can be parameterized by a hasher. This design allows other hash algorithms to be used with this syntax as well.\nIn addition to the Checksum syntax, we'll also introduce a new BytesToHex syntax for converting bytes to hexadecimal strings:\n\nThe main idea here is to keep the native implementation of the checksum handler flexible for different use cases. Rust libraries like sha2 output checksums as raw bytes, which can be more efficient for operations like comparing two checksums. On the other hand, when we want to display the output of a Hypershell program, it might be better to show it as hex strings on the terminal.\nBy providing explicit conversion, we allow the user to decide whether to convert the checksum bytes into hexadecimal within a Hypershell program, simply by adding it as part of the handler pipeline.\nHandleStreamChecksum Provider\nWith the Checksum syntax defined, let's look at how we can implement a provider for it:\n\nThe code above defines a HandleStreamChecksum provider that implements Handler for the Checksum&lt;Hasher&gt; syntax, provided that Hasher implements Digest.\nAdditionally, to support streaming input, HandleStreamChecksum works on any Input type that implements TryStream, with its Ok type implementing AsRef&lt;[u8]&gt;. The provider also requires Context to implement CanRaiseAsyncError&lt;Input::Error&gt;, ensuring that any error in the input stream will be handled by the context.\nThe Output type is defined as GenericArray&lt;u8, Hasher::OutputSize&gt;, which is the type returned by Digest::finalize. We choose this over Vec&lt;u8&gt; because it assures the caller that the size of the checksum bytes will always be fixed. This is also fine for Hypershell's use case, as GenericArray is byte-like and implements AsRef&lt;[u8]&gt;, allowing it to interoperate easily with other handlers that accept bytes-like input.\nWithin the method body, we implement the hashing by creating a Hasher instance, asynchronously iterating over the TryStream, and calling update on the incoming bytes. Finally, we call finalize to compute and return the checksum result.\nBytesToHex Provider\nSimilar to HandleStreamChecksum, we can also implement the Handler provider for BytesToHex quite easily. In fact, this implementation is simpler, as it works directly on a byte slice instead of a stream of bytes.\n\nThe HandleBytesToHex provider is implemented to work with any Input type that implements AsRef&lt;[u8]&gt;. It produces a String output type and simply calls hex::encode to encode the input bytes into a hexadecimal string.\nNotice that HandleBytesToHex can be implemented with a generic Code, rather than specifically the BytesToHex syntax. We can do this because we don't need to access any information from the Code to implement the provider. It's common practice with CGP to implement providers as generically as possible, at least within certain codebases. By doing so, we allow the provider to be more easily reused in other places, such as handling other syntaxes.\nPreset Extension\nWe can now extend HypershellPreset to include the new syntaxes and providers we've introduced. Extending the preset requires a relatively minimal amount of code:\n\nWe first define ExtendedHypershellPreset to extend from HypershellPreset. In its body, we don't introduce new component wiring, except to override the wiring of HandlerComponent to use ExtendedHandlerPreset, which we define next.\nWe define ExtendedHandlerPreset to extend from HypershellHandlerPreset. Inside its body, we wire up the provider for BytesToHex to HandleBytesToHex. Following that, the wiring for Checksum actually consists of an inner pipeline of handlers, rather than just HandleStreamChecksum.\nTo understand what's happening here, we first need to recognize that HandleStreamChecksum can work with any Input type that implements TryStream. However, the output type returned by HandleStreamingHttpRequest, which we want to use with Checksum in our example, only implements futures::AsyncRead instead of TryStream.\nTo convert the output from HandleStreamingHttpRequest into a TryStream, we need to perform two conversion steps. First, we use FuturesToTokioAsyncRead (provided by hypershell-tokio-components) to convert a futures::AsyncRead into tokio::AsyncRead. Then, we use AsyncReadToStream (also provided by Hypershell) to convert a tokio::AsyncRead into a TryStream. These two levels of conversion are necessary because, unfortunately, there's no simple direct way to convert a futures::AsyncRead into a TryStream.\nFinally, we use PipeHandlers to combine the three handler providers into a single Handler provider. Notice that while Pipe is an abstract syntax that works with a list of inner handler syntaxes, PipeHandlers is a provider for Handler that works with a list of inner handler providers.\nExample Program\nWith the new ExtendedHypershellPreset defined, we can now define an example Hypershell program that utilizes the new Checksum and BytesToHex syntaxes:\n\nWith the new syntaxes in place, our program becomes much simpler compared to having to explicitly call shell commands. Next, we define a concrete context that uses our ExtendedHypershellPreset to run the program:\n\nInstead of extending from HypershellPreset, our context provider MyAppComponents now extends from ExtendedHypershellPreset. With this change, it can now support the new syntaxes we've introduced into our Hypershell program.\nWith everything defined, we just need to write a main function that builds a MyApp context and calls the Hypershell program with it:\n\nThe full example code is available in the project repository, and the checksum implementation is available as the hypershell-hash-components crate. We can run the example program, and it should produce the same output as the previous example that called the sha256sum command:\n\nLanguage Extension Made Easy\nAs we've seen with the final example, with just a few dozen lines of code, we've successfully extended the Hypershell language and added new syntaxes and features. Beyond this simple checksum example, we can imagine more complex features being added to Hypershell in similar ways.\nThe real beauty of this approach is that a language extension doesn't affect Hypershell's core implementation or require any upstream patches or coordination. Anyone can build a language extension for Hypershell without needing permission from the Hypershell project or having to fork it.\nFurthermore, an application that doesn't need the extension can choose to continue using only the core implementation, avoiding bloat from the extension's dependencies. As a result, developers can freely experiment with and extend the core language without worrying about negatively affecting all users of the language.\nWith the decoupling of the language syntax from its implementation, we're also able to separate the design of new syntaxes from their concrete implementation. For example, we could imagine the Checksum syntax being hosted in a dedicated crate, complete with RFC-like documentation describing its expected behavior. This would allow multiple alternative implementations to coexist and encourage community coordination beyond just library APIs.\nFor some readers, it might seem like overkill to introduce a feature like a checksum as an extension to a language like Hypershell. However, our main goal here is for you to imagine how to apply similar techniques to more complex languages and extensions, especially in problem domains where such decoupling could be highly beneficial.\nFuture Exercises\nThe checksum extension example we demonstrated was intentionally simplified to avoid overwhelming you with too many details. As a result, there are a few straightforward improvements that could enhance the extension's quality. I'll leave these as exercises for you to implement, serving as a practical first step to getting hands-on with Hypershell and CGP.\nAbstract Hasher Syntax\nWhile the Checksum&lt;Hasher&gt; syntax itself is abstract, the HandleStreamChecksum implementation currently requires the Hasher type to directly implement the Digest trait. Consequently, users of Checksum are forced to include sha2 as a dependency in their program to use types like Sha256 from that crate.\nAs an exercise, try to define your own structs (e.g., struct Sha256;) as abstract syntaxes in the crate to be used with Checksum. Then, utilize dependency injection in HandleStreamChecksum to \"convert\" the abstract Hasher type into a type that implements Digest.\nAs a hint, you might need to define an additional trait to provide this mapping, such as:\n\nInput-Based Dispatch\nIn the wiring of ExtendedHandlerPreset, we defined a pipeline handler for Checksum to process input as a futures::AsyncRead stream. This design means you would encounter type errors when trying to use Checksum with the output from other handlers, such as SimpleExec.\nThe Handler component from CGP also provides a UseInputDelegate wrapper. This wrapper dispatches the Handler implementation to inner providers based on the Input type rather than the Code type. Try to figure out how you can use UseInputDelegate to define different input conversion pipelines depending on the Input type.\nYou can look for example implementations within Hypershell itself, where UseInputDelegate is already used to support multiple input stream types.\nAlternative Providers\nOur original examples performed the checksum computation using the sha256sum command. This implies that the Checksum syntax could technically also be implemented using the sha256sum command. Try to devise a way to define a second extension preset that contains wiring to forward the Checksum&lt;Sha256&gt; implementation to StreamingExec.\nAs a hint, Hypershell provides a Call provider that you can use to implement a provider that \"calls\" another Hypershell program to implement a given program. Look for how Call is used in the codebase to understand its usage.\nYou may also need to decide whether Checksum should produce the checksum as raw bytes or a hex string. This is because HandleStreamChecksum currently implements Checksum by returning raw bytes.\nAs a hint, if you want Checksum to return a hex string, you should add BytesToHex after HandleStreamChecksum within the pipeline for the Checksum's wiring. Otherwise, you should implement a HexToBytes handler to convert the hex string returned from sha256sum into bytes.\nDiscussions\nWe've finally reached the end of this blog post. Thank you for your patience if you're still reading! Although this was a lengthy read, I hope it has covered all essential topics, helping you understand the strengths of Hypershell and CGP.\nHopefully, by now, you've grasped enough about CGP to be interested in learning more. If you're intrigued by the project, this section summarizes some follow-up discussions and future work for CGP.\nBackground\nHere's a little backstory about the name \"Hypershell\". Many years ago, around 2012, I started a project called Hypershell, sparked by the idea of designing HTTP APIs to be pipeable, similar to CLI applications. The idea didn't last long, as I eventually discovered better levels of abstraction than the raw HTTP protocol that could achieve similar shell-like pipelines.\nNevertheless, the concepts behind Hypershell and the learning experience ultimately led to the development of CGP. Compared to my initial idea, CGP is far more general and supports more than just constructing pipelines between shell-like applications.\nMore recently, while searching for suitable examples for CGP, I remembered Hypershell and thought it would serve as a fitting homage to the original project I started.\nMany years have passed since then, and the word \"Hypershell\" has become much more popular than when I first came up with the name, now used for various products and projects. Nonetheless, I still like to reuse the name for this project, as it holds personal meaning for my programming journey.\nAdvantages\nLet's discuss the pros and cons of using the approach outlined in this blog post to implement a DSL in Rust with CGP.\nThe greatest advantage of our approach is the extensibility and interoperability it offers. With CGP as the base framework, the DSL can decouple its syntax from its semantics, allowing language extensions to be implemented as new presets.\nFurthermore, the ease of extension makes it very straightforward for DSL programs to interoperate seamlessly with Rust, without needing interoperability layers like FFI. CGP even facilitates interoperability between multiple DSLs, as, at the end of the day, we're simply writing CGP programs that happen to resemble DSLs.\nAdditionally, by hosting the DSL programs as types and interpreting them at compile time, we can bypass any runtime overhead associated with hosting a DSL, allowing it to run at native speed.\nDisadvantages\nSteep Learning Curve\nThe primary drawback of building a CGP-based DSL is the potentially high learning curve, especially due to the need to learn CGP itself. Despite this lengthy blog post, we've only scratched the surface of CGP and haven't even delved into the actual code that powers it. However, this learning curve barrier is more applicable to DSL developers than to DSL users, who generally don't need extensive CGP knowledge to write programs for that DSL.\nPoor Error Messages\nThat said, a significant barrier for DSL users is the potentially poor experience when encountering errors. A major problem is that when a type error occurs, users would see errors displayed for the entire DSL program. Furthermore, with many levels of indirection, even a single mistake can trigger dozens of error messages from the Rust compiler.\nThere are potential ways to improve the Rust compiler to show more helpful error messages. However, this work could take a long time and might require sufficient demand from CGP users to justify the requested changes.\nAs an alternative, some preliminary experiments have shown AI editors like Cursor are getting pretty good at deciphering the error messages and give the right intuitions on how to fix the errors.\nIn fact, I have a feeling that DSLs might be much better suited for \"vibe coding\" compared to general-purpose languages, as they are closer to human languages and thus easier for both humans and AI to work with.\nDynamic Loading\nAnother disadvantage of our DSL approach is the flip side of its strength: since the DSL is hosted at compile time, this technique cannot be easily used to run DSL programs loaded into a host application during runtime. This means that, at least for now, we cannot use this technique to build DSLs for use cases such as configuration files, plugins, or game mods.\nWhile I have some ideas to blend static and dynamic approaches for building DSLs, that research will likely only occur in the distant future.\nSlow Compilation Time\nLastly, there's a more general problem of slow compile times for CGP-based programs, especially when the final executable is built. Since CGP programs are written as highly generic code with minimal dependencies, most CGP crates can actually compile much faster than regular Rust dependencies. However, as most abstract implementations are only instantiated lazily at the end when a method is called on the concrete type, that's when compilation becomes very slow.\nIn particular, CGP program compilation becomes slow when Rust builds executables and tests that contain main functions. This is especially problematic when multiple executables need to be compiled. This is likely because each executable triggers its own generic instantiation that isn't shared between other compilation units, so nothing speeds up subsequent builds even when they're instantiated with the same generic parameters.\nWhen using CGP with DSLs, slow compilation can potentially worsen, as each DSL program would trigger unique generic instantiations that need to be compiled separately. Additionally, even though we can easily define new CGP contexts that share the same preset, doing so would likely cause Rust to recompile all generic code with the new context, significantly slowing down compilation.\nOn the other hand, I've conducted some rough experiments to test whether the size of a DSL program affects compilation time. It appears that doubling the program size results in relatively little increase in compile time, at least if the same set of features are used in the program. This suggests that the main penalty occurs the first time a heavyweight dependency is loaded, such as when the provider that uses reqwest is loaded. After that, it matters less whether our DSL program uses the same provider once or many times.\nRelated Work\nLet's briefly discuss some related work that influenced the design of Hypershell and CGP. It would be impractical to list all related work, so I'll only cover the topics I find most interesting.\nTagless Final\nFirst and foremost, the techniques used by CGP and Hypershell are closely related to the tagless final style of programming. In particular, we make extensive use of traits (typeclasses) to implement and compose each part of the DSL into a full language.\nHowever, our approach differs enough from tagless final that I want to avoid people thinking they're identical. Specifically, CGP focuses on having an additional Context parameter that provides dependency injection, and provider traits with unique Self types. The original tagless final approach lacks such a context type or provider type, making it less flexible in modularizing the DSL implementation.\nFurthermore, many DSL approaches, including tagless final, focus on defining the DSL program at the term-level, whereas Hypershell DSL programs are defined at the type-level.\nServant\nOur approach of defining DSL programs as types shares many similarities with the type-level DSL techniques used by Servant, which provides a DSL for defining server-side web APIs. Similar to Hypershell, Servant also defines abstract syntaxes as dummy types and performs type-level interpretation using typeclasses.\nCompared to Hypershell, Servant implements its traits directly on its syntax types. This is similar to a simpler CGP programming pattern called higher-order providers. On the other hand, Hypershell decouples the implementation of provider traits from the definition of abstract syntax. This allows Hypershell users to replace a syntax's underlying implementation with a different provider. With Servant, the DSL can only support language extension with new syntaxes by directly implementing typeclass instances for that new syntax.\nErgonomically, Servant is heavily based on the Handler monad, while Hypershell provides the same functionality through the Handler trait without directly exposing monads to users. Although this might be less powerful than using full-blown monads, Hypershell's approach aligns better with Rust's ergonomics and reduces the learning barrier for potential users who may be unfamiliar with functional programming jargon.\nFuture DSLs\nAs mentioned earlier, Hypershell is only the first DSL built using CGP. Using the same DSL techniques, we can build other DSLs that could potentially be more useful in solving practical real-world problems. This section outlines some DSL ideas that I'd like to see developed in the near future, either by me or perhaps by some of you in the community.\nLambda Calculus\nOne idea I'd like to try after this blog post is to implement a simple lambda calculus DSL using the same programming techniques outlined here. While embedding lambda calculus itself isn't particularly interesting, the groundwork of this experiment will explore the feasibility of embedding general-purpose languages as type-level DSLs in Rust.\nIn particular, if we can demonstrate that it's possible to build a Turing-complete DSL with CGP, it will open doors to new ways of implementing programming languages with CGP and Rust. A follow-up to this experiment would also include mixing both static and dynamic interpretation of the language, along with some just-in-time optimization techniques to run a scripting language with CGP.\nThis experiment will probably involve a more complex procedural macro that desugars a surface syntax containing named variables into an abstract syntax that works with De Bruijn indices, since we likely can't perform generic named field access over an anonymous product type for closures due to coherence restrictions.\nHTML\nAn idea I've been keen to work on is to use CGP to build a DSL for HTML, or more generally, web frontends, so I can rebuild this current website using CGP.\nThe idea behind an HTML-based DSL is quite simple: whether we're building a static webpage, performing server-side rendering, or client-side rendering, we're essentially writing our frontend code as an abstract DSL program that is interpreted by different contexts based on the use case.\nA static webpage would then be a simple program with minimal dependencies that can run with all concrete contexts, just as a Hypershell program that only uses CLI features can be run by both HypershellCli and HypershellHttp. On the other hand, a more complex program that utilizes more dependencies might only run with a more feature-complete context, such as one that works with client-side rendering.\nWhile I believe there's potential for solving frontend development with CGP, I've opted to start with Hypershell as a proof of concept, as it has significantly less complexity than frontend development. Furthermore, even if we had a proof-of-concept version of the HTML DSL, there might be never-ending rabbit holes to fill before the prototype becomes \"production-ready\" enough to rival React or Leptos.\nAside from that, although I would love to explore developing frontend applications using CGP, the future prospects of becoming a professional frontend developer who needs to convince everyone else to use Rust/CGP don't align well with my long-term career goals. As a result, I've personally tried not to associate CGP too closely with web development to avoid accidentally falling back into the wrong career track.\nParsers\nAnother idea I'm keen to work on is building parsers as a CGP DSL, particularly for parsing Rust's TokenStream as a starting point. The DSL approach we use here is quite similar to parser combinator techniques but with further modularity for even more flexible parsing.\nThe initial use case for this would be for dog-fooding — implementing the CGP procedural macros using CGP itself. Currently, the CGP macro implementation contains a lot of ad-hoc parsing code implemented using syn and the Parse trait. As CGP's surface syntax becomes more complex, there's an increasing need to leverage CGP in its own procedural macros to modularize how macros like delegate_components! and cgp_preset! are implemented.\nThe implementation of this CGP-based parser DSL will share some similarities with the unsynn crate, which already offers a more declarative parsing approach compared to syn. However, with CGP, there should be less need to declare structs and syntax rules inside macros, as we can use CGP itself to perform the wiring and generic implementations.\nThat said, there's still a feature lacking in CGP that I need to implement first: the builder pattern. In short, the CGP builder pattern involves defining partial structs that may contain uninitialized fields, which will be filled incrementally by different parser providers. Just as the CGP accessor pattern supports generic access to fields using HasField, the CGP builder pattern will support generic construction of struct fields using new traits that will be introduced.\nAs a result, we may need to wait until the next major version of CGP is released before we can start building a parser DSL with CGP.\nMonadic Computation\nIn a longer time horizon, once we've proven the feasibility of implementing lambda calculus with CGP, a potential avenue I'd like to explore is enabling monadic computation as a DSL with CGP. The main use case for this is to better support property testing and model checking in Rust, but it could also be extended further to support full algebraic effects.\nThe main idea here is to enable something similar to Haskell's do-notation as a DSL, without directly exposing monads in Rust programs. This DSL is expected to be used only for writing very high-level core logic, where method calls may return non-deterministic results. With this, a test context can use monads to perform non-deterministic computation on the logic, while a production context can run the same program without using monads at all.\nIt's worth noting that we aim to introduce monads as a DSL not for writing \"fancy\" functional programs, but out of necessity for writing better tests in Rust. For instance, the Arbitrary monad used by property testing frameworks like QuickCheck is essential for writing property test code with cleaner syntax. Without monads, Rust crates like proptest resort to complex macros and ad-hoc type signatures to emulate what could easily be done with monads and the do notation.\nMore generally, having support for non-deterministic monads will allow us to write some form of model checking code similar to TLA+, but directly within Rust. At the moment, similar functionality can also be achieved using Kani; however, that requires dedicated toolchains to compile the Rust code to run with external verifiers.\nOn one hand, I think CGP has great potential to make Rust code play well with Kani by decoupling application code from complex libraries that cannot run easily with Kani. On the other hand, I'm also curious to explore how much model checking we can do within Rust itself without external tools like Kani, if we had some form of access to the full power of monads in Rust.\nNon-DSL Use Cases\nWhile this blog post focuses on building DSLs, it's entirely feasible to create modular applications using only CGP, without turning them into DSLs. We'll explore normal application development with CGP in future posts.\nThe CGP project is currently prioritizing DSL development, mainly because it's a relatively unexplored niche in Rust, making it easier to gain traction, as compared to the negative connotation that is often associated to the term \"framework\". Furthermore, DSLs have a clearer separation between two groups of people: the implementor of the DSL and its users.\nIn contrast, normal application development has less defined boundaries, reducing the appeal of modularity. While there are clear technical benefits of modularity even for single-party software, such as improved maintainability and testability, these are often overlooked by development teams focused on short-term business gains. Therefore, CGP shines best when developers build reusable components for other developers, creating a separation between those who value modularity and those who simply consume it.\nA potential use case for CGP is building modular web frameworks with reusable components for cross-cutting concerns like authentication, caching, and logging. However, similar to the HTML DSL, the web framework space is crowded and competitive, and I want to avoid associating CGP or my career too closely with web development. This will likely be a lower priority until after CGP establishes itself in areas like DSL development.\nCGP could also be well-suited for specialized domains like database design, game development, or machine learning. However, my limited expertise in these areas and the demands of developing CGP in my free time make it challenging to build sufficiently advanced solutions for these problem domains.\nUltimately, it's unrealistic for one individual to address every problem that CGP could solve. This is where you and the early adopter community can contribute.\nContribution and Support\nAs mentioned, I see my role as enabling developers who value modularity to produce reusable components for other developers (or machines) to consume without needing to value CGP or modularity. This way, everyone benefits from CGP, regardless of their views on software development.\nWhile I'd love to build every potential solution offered by CGP myself, I lack the capacity, expertise, and motivation, especially given my need to earn a living through other means. My goal is to provide enough examples to demonstrate CGP's potential and foster a community of developers around it.\nIf you're convinced of CGP's potential and want to help, here are some ways to get involved:\nJoin the Community\nWe now have a community Discord for CGP! It's likely to be small initially, so feel free to start discussions about CGP without worrying about noise. Since many CGP concepts are new and undocumented, please ask any questions you have in the Discord, no matter how basic they seem.\nBesides the Discord, we also have a GitHub Discussions forum and a Reddit community for more formalized public discussions.\nBuild Your Own DSL and Libraries\nFeel free to use the project ideas I outlined earlier, or develop your own and start a CGP project. Given the limited available resources, please ask questions in the Discord if you encounter any difficulties understanding the concepts.\nSponsor Me\nIf you appreciate my work and want to see CGP gain wider adoption, the best way to support it is to sponsor me, regardless of the amount. I have sponsorship pages on Github Sponsor, Patreon, and Ko-Fi.\nAs with most open-source projects, I don't expect sponsorship to be enough to allow me to quit my job and work full-time on CGP, or even with CGP. However, any financial support will significantly boost my confidence in the value of my work and encourage me to continue dedicating hundreds of hours of my free time to it instead of other pursuits.\nI do hope to eventually spend a year or two working full-time on CGP using my personal savings, even if sponsorships don't cover my living expenses. However, exponential growth is important, and if I could secure around a quarter of my living expenses through monthly sponsorship, it would reduce some risk and suggest a higher chance of CGP becoming self-sustaining later on.\nLearn More\nFinally, thank you to everyone who reached the end of this blog post. Please visit the project homepage to learn more about CGP, and let's start writing context-generic code!\n","id":"https://www.contextgeneric.dev/blog/hypershell-release/","title":"Hypershell: A Type-Level DSL for Shell-Scripting in Rust"},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"body":"Summary\nI'm excited to announce the release of v0.3.0 of the cgp crate, along with several new chapters of the CGP Patterns book! This post highlights some of the key features and updates included in this release.\nNew Book Chapters\nWe’ve added a few new chapters to the CGP Patterns book. Below is a brief summary of the newly published content.\nAssociated Types\nIn the launch announcement for CGP, some readers remarked that CGP seemed to be primarily a dependency injection framework in Rust. While this observation captured part of its functionality, a key feature not yet covered was CGP's ability to use abstract types in conjunction with the dependency injection of types.\nIn the new chapter of the book, we explore this powerful feature with a motivating example: implementing a context-generic authentication token validator that is not only generic over the Context but also over abstract Time and AuthToken types. The chapter also demonstrates how to use the cgp_type! macro to streamline the declaration of abstract type traits and how to employ UseType in component wiring to instantiate abstract types.\nError Handling\nCGP introduces a novel approach to error handling that differs significantly from the conventional patterns used in Rust today. In the new chapter of the book, we begin by leveraging an abstract Error type from HasErrorType to define error-returning method signatures. The chapter then delves into how CanRaiseError and CanWrapError can be used to produce abstract errors within context-generic provider implementations. Further, the chapter discusses how to define context-generic error raisers and leverage the UseDelegate pattern for static dispatching of error handling to various providers.\nField Accessors\nCGP provides a robust mechanism for dependency injection using impl-side dependencies. However, since these dependencies are expressed through traits and constraints, we need to define accessor traits to retrieve field values from a generic context.\nIn the new chapter, we explore different approaches for defining, using, and implementing accessor traits in CGP. This chapter explains how the #[derive(HasField)] macro operates and dives into the internal workings of HasField and Symbol!. It also introduces the #[cgp_auto_getter] and #[cgp_getter] macros, which automatically generate accessor provider implementations that work with HasField.\ncgp v0.3.0 Release\nThe cgp crate has been upgraded from v0.2.0 to v0.3.0, introducing new features that significantly enhance usability and include minor breaking changes. You can view the full release notes here. Additionally, the Hello World example on the project homepage has been updated to showcase a simplified implementation using the latest CGP constructs.\nBelow is a summary of key updates in this release.\ncgp_type! Macro\nThe new cgp_type! macro streamlines the process of declaring abstract type traits, enabling you to define them in a single line of code. For instance, the HasErrorType trait in cgp is now defined as:\n\nThe cgp_type! macro expands this short declaration into the following:\n\nFor a detailed explanation of cgp_type! and its usage, check out the new Associated Types chapter in the CGP Patterns book.\n#[cgp_auto_getter] Macro\nThe #[cgp_auto_getter] macro simplifies the process of defining accessor traits with blanket implementations based on HasField. When a trait is marked with #[cgp_auto_getter], any context deriving HasField that has the required fields and types will automatically implement the specified trait without additional boilerplate.\nHere’s an example illustrating how it works:\n\nIn this example, the Person struct derives the HasField trait, which automatically implements the HasName trait without any additional code. This means that an accessor trait like HasName can be defined in separate crates or modules, and it will still be automatically implemented for all structs that derive HasField with the necessary fields.\nFor more details on #[cgp_auto_getter], refer to the Generic Accessor Providers chapter in the CGP Patterns book.\n#[cgp_getter] Macro\nThe #[cgp_getter] macro, like #[cgp_auto_getter], generates blanket implementations that make use of HasField. However, #[cgp_getter] extends functionality by also creating full CGP constructs for the trait, similar to #[cgp_component]. This requires explicit wiring in the context using delegate_components!. Additionally, #[cgp_getter] derives a blanket implementation for the UseFields provider, so that it can be used inside the component wiring as follows:\n\nFor additional information on #[cgp_getter], refer to the Generic Accessor Providers chapter of the CGP Patterns book.\nCanWrapError Trait\nThe CanWrapError trait has been introduced to streamline the process of wrapping existing errors. Its definition is as follows:\n\nPreviously, error wrapping relied on using CanRaiseError with a tuple, such as CanRaiseError&lt;(Self::Error, Detail)&gt;. However, this approach was cumbersome and less intuitive. The CanWrapError trait addresses this issue by providing a cleaner and more straightforward way to raise wrapped errors.\nFor more details about the usage of CanWrapError, refer to the Error Wrapping chapter in the CGP Patterns book.\ncgp-error-anyhow Crate\nWe have published a new cgp-error-anyhow crate, which provides context-generic error raisers for anyhow::Error. This addition complements the previously published cgp-error-eyre and cgp-error-std crates, which support CGP error handling with eyre::Error and Box&lt;dyn core::error::Error + Send + Sync + 'static&gt;. Given the popularity of anyhow::Error, this crate extends support for its usage.\nDetails on using cgp-error-anyhow for error handling can be found in the Error Handling chapter of the CGP Patterns book.\ncgp-runtime Crate\nThe new cgp-runtime crate introduces standardized interfaces for runtimes, paving the way for future discussions on asynchronous programming in the CGP Patterns book.\nThe constructs provided by cgp-runtime, which are re-exported by cgp, include:\n\nStay tuned for updates to the CGP Patterns book for more information on using pluggable async runtimes with CGP.\nFuture Work\nThere are several additional features and improvements I had hoped to include in this update. However, with my New Year vacation coming to an end, I need to wrap up the current progress. Below are some of the tasks deferred to future updates.\nDocumenting the cgp Crate\nWhile the CGP Patterns book offers extensive conceptual coverage, the cgp crate currently lacks comprehensive Rustdoc documentation. Many constructs remain undocumented, and users must rely on the CGP Patterns book or this website for detailed guidance.\nIn future updates, I plan to add concise Rustdoc comments to these constructs and include links to relevant chapters in the CGP Patterns book. This will help bridge the gap and provide in-crate documentation to enhance usability. For now, all detailed information about CGP is accessible only through the book and website.\nTutorials with More Complex Use Cases\nDuring the launch announcement, many readers noted the lack of practical examples demonstrating how CGP can address more complex, real-world problems. While I had planned to create such tutorials, much of my time was spent completing relevant chapters and updating the cgp crate. I ask for your patience as I work on delivering concise, compelling examples to better illustrate CGP's utility.\nIn the meantime, the simplified examples in the recently added Associated Types, Error Handling, and Field Accessors chapters provide a glimpse into CGP's practical applications. These include examples like validating whether an authentication token has expired and making HTTP API calls to fetch messages. While not exhaustive, these examples go beyond the basic \"Hello World\" tutorial on the homepage and offer a clearer picture of how CGP can be applied to your projects.\nAcknowledgement\nA big thank you to @marvin-hansen for his enthusiastic involvement in discussions, testing CGP with real-world projects, and providing invaluable feedback! The implementation of the #[cgp_getter] and #[cgp_auto_getter] macros was primarily motivated by his input, highlighting that the direct use of HasField could be too complex for beginners. Thanks to his suggestions, CGP now offers a more seamless and intuitive experience for declaring and using field accessor traits.\nThanks also to everyone who contributed feedback to the launch announcement on Reddit and Lobsters! Your insights have been incredibly helpful in shaping the direction of CGP and prioritizing upcoming work. There’s still a long journey ahead before CGP reaches v1.0 and is ready for widespread use, and I appreciate your continued support as we work toward that goal!\n","id":"https://www.contextgeneric.dev/blog/v0-3-0-release/","title":"CGP Updates: v0.3.0 Release and New Chapters"},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"body":"Summary\nIt's been a while since the last update, but the wait is over! I'm thrilled to announce the release of v0.4.0 of the cgp crate. This version is packed with tons of new features and delivers a dramatically smoother developer experience!\nThis post highlights the major updates developed over the past few months, alongside some personal news.\nGame-Changing Improvement: Debugging is Finally Easy!\nHave you ever been frustrated by cryptic CGP errors related to unsatisfied dependencies? Previously, this was a major barrier to cgp's wider adoption, as debugging cgp programs was virtually impossible due to Rust hiding the information necessary to fixed the error.\nCrucially, this update changes everything! The most significant improvement in v0.4.0 is that it's now significantly easier to debug cgp errors that arise from unsatisfied dependencies. We've developed new techniques to overcome this challenge and make Rust show all errors that were previously hidden.\nIsProviderFor Trait\nIn short, the technique works by introducing a new IsProviderFor trait in #63, defined as follows:\n\nThe IsProviderFor trait itself isn't inherently complex, but it's designed to be implemented by providers with additional constraints hidden within the trait implementation. The trait then acts as a \"trait-erased\" trait to carry around the constraints that the provider used to implement the original provider trait.\nUsers of CGP don't need to understand the details of how IsProviderFor works, only that it's used behind the scenes by cgp to show better error messages.\nCanUseComponent Trait\nAlong with IsProviderFor, a new CanUseComponent blanket trait is introduced as a shorthand to check that a context's provider has implemented the IsProviderFor trait. It's defined as follows:\n\nRather than being implemented by provider types, CanUseComponent is instead automatically implemented by a context type. This makes it more ergonomic to reason about the implementation of a CGP component on a context.\n#[cgp_provider] Macro\nThe main change required for the new debugging to work is that users must now annotate CGP provider implementations using the #[cgp_provider] or #[cgp_new_provider] macros. For example:\n\nThe macro then generates the following IsProviderFor implementation, which includes the Context: HasName constraint within it:\n\nThe main difference between #[cgp_provider] and #[cgp_new_provider] is that #[cgp_new_provider] also generates the provider struct definition (e.g., struct GreetHello;), allowing even less code to be written by hand.\nUpdate to delegate_components!\nIn addition to generating DelegateComponent implementations, delegate_components! now also generates IsProviderFor implementations, so that IsProviderFor can remain working across component delegations.\nAs an example, the following:\n\ngenerates the following trait implementations:\n\ncheck_components! Macro\nAlong with the IsProviderFor trait, #78 also introduces the check_components! macro to allow users to write compile-time tests to check for the correctness of component wiring for a CGP context. For example:\n\nThe code above generates a check trait called CanUsePerson, which verifies whether the Person context implements the consumer trait for GreeterComponent (i.e., CanGreet):\n\ndelegate_and_check_components! Macro\nPR #84 introduces a new delegate_and_check_components! macro, which combines both delegate_components! and check_components!, allowing both delegation and checks within a single macro call. This is useful for the majority of simple cases, providing immediate feedback on whether the wiring works as intended.\nAs an example, given the following code:\n\nis equivalent to writing the two separate macro calls:\n\nIt's worth noting that in more advanced cases, it may still be necessary to call delegate_components! and check_components separately. This applies to cases where the CGP traits contain additional generic parameters, or when the new preset feature (discussed later) is used.\nUpdated Chapter\nFor further details on these debugging breakthroughs, the CGP book has been updated with a new chapter that explains this improved debugging support in detail.\nRework #[cgp_type] Macro\nThe cgp_type! macro has been reworked in #68 to become an attribute macro. Previously, in v0.3.0, an abstract type was defined as:\n\nFrom v0.4.0 onward, the macro becomes an attribute macro that follows the same style as #[cgp_component]:\n\nAlthough it is more verbose, the new syntax unlocks the ability to define more advanced abstract types with the same macro, such as adding generic parameters or supertraits on the type trait.\nAside from that, #[cgp_type] also generates default names that follow a new naming convention. When left empty, the provider trait is now named \"{Type}TypeProvider\" instead of \"Provide{Type}Type\", and the component is named \"{Type}TypeProviderComponent\" instead of \"{Type}TypeComponent\".\nSo the example above is a shorthand for writing:\n\n#[cgp_context] Macro\nA new #[cgp_context] macro has been introduced in #66, and can be applied to context types to simplify the wiring of providers with a context. For example, given the following:\n\nThe macro automatically generates the context provider struct and the HasCgpProvider implementation, which previously had to be hand-implemented manually:\n\nThe HasCgpProvider trait was previously called HasComponents in v0.3.0 and has been renamed in #97 to better reflect its purpose.\nAlthough the boilerplate reduction is minimal, the #[cgp_context] macro significantly reduces the aesthetic and psychological barrier to defining CGP contexts, making them almost as trivial as defining plain structs.\nAdditionally, #[cgp_context] also brings support for inheritance of a collection of providers in the form of presets, which we will cover in a moment.\nImproved Getter Macros\nThe getter macros #[cgp_getter] and #[cgp_auto_getter] have been enhanced with several improvements, making them more usable in broader use cases and boosting developer convenience.\nFirst, with #81 and #87, the macros are now smarter in handling several common special cases, such as the use of &amp;str and Option&lt;&amp;T&gt;. Below are some examples of the new method signatures that are now supported:\n\nAdditionally, with #64 and #76, the getter macros also support generic parameters and accept a second optional PhantomData argument to help with type inference. For example:\n\nIn #94, we've also added support for using getter combinators to implement more complex getters to access fields that are nested within other structs in a context. For example, the following code allows the getter for listen_port to be implemented via context.config.network.listen_port:\n\nImproved #[cgp_component] Macro\nWe've improved the UX for #[cgp_component] to allow the provider name to be specified directly when there are no other parameters passed. For example, we can now write:\n\ninstead of the original form:\n\nwhich in turn is shortened from the fully-expanded form:\n\nOther than that, #95 also brings support for using const items inside CGP traits. With that, we can for example define traits such as:\n\nInitial Support for Datatype-Generic Programming\nPR #84 brings initial support for datatype-generic programming to Rust and CGP. A new #[derive(HasFields)] macro has been introduced, together with the relevant traits HasFields, HasFieldsRef, FromFields, ToFields, and ToFieldsRef.\nThe introduced constructs make it possible for context-generic providers to access all fields in a context struct or enum without requiring access to the concrete types. This enables context-generic implementations for use cases such as encodings without requiring the concrete context to derive anything other than #[derive(HasFields)].\nFor example, given the following code:\n\nThe derive macro would generate the following HasField implementation:\n\nThe constructs introduced are currently incomplete, and future development is still needed to bring in the full capabilities for datatype-generic programming.\nAdditionally, #85 introduces the use of Greek alphabets to shorten the type representation of field types. For example, given the macro:\n\nThe original expansion would be shown as follows in the IDE and error messages:\n\nBut with the new version, it would be shown in a shorter form as:\n\nAlthough this may look very confusing at first, hopefully it will become more readable once readers understand how each Greek alphabet is mapped to its full name, offering a more compact representation in IDEs and error messages.\nPresets and Inheritance: A New Way to Extend Component Wirings\nAnother major feature introduced is a completely overhauled implementation of presets, over a number of major PRs. (#70, #71, #72, #91)\nA proper full introduction to presets will require its own dedicated chapters in the CGP book. But until that's written, I'll provide a very high-level walk-through of CGP presets here.\nComponent Delegation as Type-Level Lookup Table\nConceptually, we can think of the use of delegate_components! being defining a key-value dictionary at the type-level, with the trait DelegateComponent serving as a type-level lookup function. In CGP, when we apply component wirings through delegate_components!, we are effectively building a type-level lookup table with the component name as the key, and the delegated provider as the value.\nWith that in mind, it becomes natural to think about whether it is possible to \"merge\" two of such tables to form a new table. For example, given one crate containing:\n\nand another crate containing:\n\nHow do we enable the merging of ComponentsA and ComponentsB while also handling conflicting entries? In OOP, this merging operation is commonly known as inheritance.\nUnfortunately, the coherence restriction of Rust prevents us from implementing such a merging operation using generics and blanket implementations directly. Instead, we've developed macro-based approaches to emulate such merging at the syntactic level. The result is the preset system developed in this update, offering a powerful way to manage and compose component wirings.\nPreset Macros\nCGP presets are made of extensible collection of key/value mappings, that can be inherited to form new mappings.\nInstead of defining regular structs and build mappings with delegate_components!, presets are constructed as modules using the cgp_preset! macro together with the #[re_export_imports]. For example, the same mappings earlier would be rewritten as:\n\nThe #[cgp::re_export_imports] macro is used over a surrogate mod preset, which wraps around the inner module to re-export the imports, so that they can be reused during the merging. This is required, because the merging works through macros, which don't have access to the actual type information. Aside from that, the macro re-exports all exports from the inner module, so that we can write regular code as if the mod preset modifier never existed.\nThe macro cgp_preset! works similar to delegate_components!, but it defines a new inner module that contains the mapping struct, together with macros and re-exports to support the merging operation.\nSimilarly, the second preset would be re-written as:\n\nTo merge the two presets, we can define a new PresetC that inherits from both PresetA and PresetB, like follows:\n\nAs we can see, CGP supports multiple inheritance for presets by using macros to \"copy\" over the entries from the parent preset. To resolve conflicts or override entries from the parent presets, the override keyword can be used to exclude a given mapping from being copied over and instead use the local definition. And since the underlying implementation still uses DelegateComponent to implement the lookup, any non-overridden conflicts would simply result in a trait error due to overlapping instances, thus preventing the diamond inheritance dillema.\nSingle Inheritance with Context Provider\nCGP also supports single inheritance of presets for use with with CGP contexts. For example, the final PresetC can be used in a context by writing:\n\nThe first optional argument to #[cgp_context] is the name of the new provider struct that is used to implement the wirings for the context. It is then followed by an optional : ParentPreset argument, which would inherit all entries from the parent preset.\nBehind the scenes, the single inheritance works through special traits defined in the preset module. As a result, it works with fewer quirks than the macro-based implementation of nested and multiple inheritance between presets. The reason two separate techniques are used is that the trait-based approach can only work with at most one level of inheritance – having a single parent with no further trait-based grandparents.\nComparison with OOP Inheritance\nThe preset inheritance works very similarly to how inheritance is typically understood in OOP. However, there are several key differences that distinguish CGP presets from OOP inheritance in Rust.\nFirst, presets only work as type-level lookup tables, with no ability to directly implement \"methods\" on the preset itself. Hence, it works more like prototypal inheritance in languages such as JavaScript. Furthermore, the lookup table only exists at the type level, meaning it doesn't exist at runtime and thus introduces no runtime overhead.\nMore importantly, CGP and Rust do not support the notion of subtyping. This means that two contexts that \"inherit\" from the same preset are treated as completely distinct types, and there's no mechanism to \"upcast\" the values to a common preset \"parent\" type (which doesn't exist). This means that in contrast to OOP, CGP preset inheritance only exists on the \"provider\"-side for implementation re-use, but not on the \"consumer\"-side for polymorphic consumption.\nAsync Trait Update\nThe Async trait was defined to be a trait alias to Send + Sync + 'static, to make it esier for users to define abstract types that can be used within async functions that return impl Future + Send.\nHowever, practical experience has shown that the 'static bound isn't really needed in most cases, and was thus removed in #89 from the default recommended trait bound. The removal of 'static will make it easier to instantiate abstract types with concrete types that do not contain 'static lifetimes.\nOn the other hand, the default inclusion of Send + Sync is almost a necessary evil given the current state of async Rust. However, this may soon change when Return Type Notation (RTN) gets stabilized in Rust in the near future in rust#138424. Once that is stabilized, the Async trait itself can entirely be deprecated or removed.\n#[blanket_trait] Macro\n#79 and #82 introduces a new #[blanket_trait] macro, which can be used to define trait aliases that contain empty body and trivial blanket implementations. Developers can use the #[blanket_trait] macro to define trait aliases, as well as abstract type aliases for more advanced cases.\nFor example, given the following:\n\nautomatically generates the following blanket implementation:\n\nPersonal Updates\nAside from all the feature updates, I also have some personal updates related to the development of CGP.\nPersentation at Leipzig Rust Meetup\nI gave a presentation of CGP at the Leipzig Rust meetup in February. Although there were no video recording, you can check out the presentation slides if you are interested.\nBank Transfer Example\nAlong with the meetup presentation, an example bank transfer application has been drafted to demonstrate the use of CGP in practical applications. The example code is not yet sufficiently documented, but hopefully it can serve as a sneak preview for readers who would like to see more complex examples of CGP programs.\nMore Active Development Ahead\nIt has been 4 months since our last update. It's been challenging to manage a side project while juggling a full-time job and childcare without support from grandparents. On the bright side, I have managed to get a short 3-month sabbatical from May to July before starting a new job.\nThis means you can expect to see much more active development from me during the next 3 months as I push CGP towards wider adoption. If you have suggestions on what should be developed during this time, or how I can make the project more sustainable, please let me know in the comments! Your feedback is invaluable.\nAttending RustWeek\nI will be attending RustWeek in person next week (May 13-17 2025). Although I did not manage to get a presentation slot, I would love to meet up with Rust developers and discuss how CGP can be used to help solve real world problem in their Rust applications.\nIf there's interest, I' woul'd also like to organize Hackathon sessions during the last day to have coding sessions for CGP. Otherwise, I might look around and try to apply CGP on one of the Hackathon projects. If you are interested to attend or suggest any activities, do sign up here or ping me on BlueSky.\nThank you for reading, and stay tuned for more updates on CGP!\n","id":"https://www.contextgeneric.dev/blog/v0-4-0-release/","title":"CGP v0.4.0 is Here: Unlocking Easier Debugging, Extensible Presets, and More!"},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"body":"Overview\nWe are excited to announce the release of CGP v0.4.1! This release brings several new features, quality-of-life improvements for macro usages, and a new crate cgp-handler.\nHere are some of the highlights:\n\nNew cgp-handler crate: Provides abstract interfaces for defining components with common method signatures.\ncgp_preset! macro improvement: Now supports wrapping of Preset::Provider.\n#[cgp_component] macro improvement: Now supports automated derivation of UseDelegate.\nImproved Documentation: Added inline Rust documentation for common CGP constructs.\n\nBelow we will go through some of the most significant changes in this release.\nNew cgp-handler Crate\nThis release introduces a new cgp-handler crate, which offers abstract interfaces for defining components with common method signatures. This helps in creating reusable and composable handlers for various tasks.\nAs a semi-stable and non-essential crate, the cgp-handler crate is re-exported by cgp-extra, and is available from cgp::extra::handler.\nThe introduction of cgp-handler is mainly to support the development of Hypershell, which makes heavy use of the Handler component to design and implement its DSL providers.\nThe crate introduces three main components: Handler, Computer, and Producer.\nHandler\nThe Handler component provides the most commonly used interface for performing asynchronous operations that may fail:\n\nComputer\nThe Computer component mirrors a pure function that takes some input, performs some computation, and produces an output.\n\nProducer\nThe Producer component mirrors a global singleton function to produce an output value. It is useful to emulate global values that cannot be constructed through the const context in Rust, such as String.\n\nCode Parameter\nAll the traits in cgp-handler contain a phantom Code parameter that can be used for building type-level DSLs such as Hypershell. They can also be used as type-level identifiers for dispatching, such as in API handlers.\ncgp_preset! Macro Improvements\nThis release also brings minor improvements to our cgp_preset! macro, supporting the definition of CGP presets for more diverse use cases.\nSupport for Wrapping Preset::Provider in cgp_preset!\nThe cgp_preset! macro now allows users to specify a #[wrap_provider] attribute to wrap the Preset::Provider type. This is particularly useful when using CGP presets to define extensible mappings for generic dispatch through the UseDelegate pattern.\nWrapping the provider makes it easier to extend non-provider mappings across multiple levels of preset inheritance. The wrapped Preset::Provider type will implement the expected provider trait, making it a valid delegation target.\nExample\nGiven the following preset definition:\n\nThe macro generates the following implementation:\n\nAutomated UseDelegate Derivation in #[cgp_component]\nThe #[cgp_component] family of macros now includes a derive_delegate field, which allows for the automated implementation of UseDelegate for CGP components. This reduces boilerplate code that was previously required to be implemented manually.\nExample\nThe updated ErrorRaiser component can now be defined as:\n\nThis will automatically derive the UseDelegate implementation:\n\nOther Improvements\nThis release also includes several other minor improvements and fixes:\n\nImproved Documentation: We have added inline Rust documentation for many common CGP constructs, making it easier for developers to understand and use them. This is part of our ongoing effort to improve the developer experience.\nStatic Char Formatting: The Char type can now be formatted statically without requiring self, which allows type-level strings to be formatted without constructing any value.\nUse __Self__ instead of T when deriving Preset::IsPreset to avoid identifier conflicts when users use T in their generic parameters.\nIncluded trait bound identifiers in Preset::components re-export.\n\n\nWe hope you enjoy the new features and improvements in this release. As always, we welcome feedback and contributions from the community. Check out the project on GitHub and the full changelog for more details.\n","id":"https://www.contextgeneric.dev/blog/v0-4-1-release/","title":"CGP v0.4.1 Release"},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"body":"Overview\nCGP v0.5.0 has been released, bringing a range of new features and some breaking changes as part of the ongoing effort toward stabilization. This version introduces several improvements to make CGP more practical, expressive, and easier to use in real-world Rust projects.\nThe highlights of this major release are summarized below. Also check out the changelog for the full list of changes.\n\nNew Features\n#[derive(CgpData)] Macro\nThe new #[derive(CgpData)] macro provides a unified way to turn any struct or enum into an extensible data type.\nFor example, given:\n\nThis macro automatically derives all the extensible data traits for you, including HasField, FromVariant, HasFields, BuildField, and ExtractField.\nBefore v0.5.0, you had to derive these traits separately, as shown below:\n\nWith #[derive(CgpData)], the process is now simpler, cleaner, and less tedious.\n#[cgp_auto_dispatch] Macro\nThe new #[cgp_auto_dispatch] macro allows automatic dispatch of trait implementations for enums when all their variants implement the same trait.\nConsider the following example with a Shape enum:\n\nSuppose we want to define a trait HasArea for computing the area of shapes. We can define and implement it as follows:\n\nWith this setup, HasArea is now automatically implemented for Shape without the need to manually write any additional impl blocks.\nBehind the scenes, the #[cgp_auto_dispatch] macro generates a blanket implementation of HasArea using extensible visitors to dispatch calls to the appropriate variant. Because Shape uses #[derive(CgpData)], it already includes the extensible variant constructs needed for the blanket implementation.\nAn important detail is that #[derive(CgpData)] and #[cgp_auto_dispatch] work seamlessly across crate boundaries. The trait and the enum do not need to know about each other for the blanket implementation to take effect. Everything just works.\nA deeper explanation of how #[cgp_auto_dispatch] operates will be covered in a future blog post. For now, you can experiment with it directly in your projects. Even if you are not yet using the rest of CGP, this macro can simplify your code right away.\nUpdateField Trait\nA new UpdateField trait has been introduced to generalize the process of updating extensible records:\n\nThe UpdateField trait allows you to replace a wrapped value within a partial record with another wrapped value. It is automatically derived by #[derive(CgpData)], which means that field update operations can rely on UpdateField without requiring any manual derivation.\nFor instance, the BuildField trait is now implemented as a blanket implementation that builds upon UpdateField:\n\nIn essence, BuildField is implemented by transforming a field that is initially IsNothing in a partial record into an IsPresent field, using UpdateField as the underlying mechanism.\nFinalize extensible builder with default values\nThe extensible builder pattern now supports finalizing a partial record by filling in any uninitialized fields using their Default values. This functionality is provided by the new finalize_with_default method.\nFor example, consider the following extensible record:\n\nYou can now construct a FooBar instance while letting the bar field fall back to its default value of 0:\n\nBehind the scene, finalize_with_default works by using the UpdateField trait to perform a natural transformation on each field modifier. It applies the Default implementation to convert IsNothing fields into IsPresent, completing the record automatically.\nExtensible builder with optional field status\nThe original design of the extensible builder uses the typestate pattern to track whether each field in a partial record has been set. In this pattern, IsPresent indicates that a field has been assigned a value, while IsNothing indicates that it has not.\nAlthough this approach provides strong compile-time guarantees, it also means that each state of the partial record has a distinct type. For example, __PartialFooBar&lt;IsPresent, IsNothing&gt; and __PartialFooBar&lt;IsNothing, IsPresent&gt; are considered different types. This can be inconvenient in scenarios where the builder needs to maintain a single type throughout the build process, such as when dynamically deserializing JSON data into a partial record.\nTo address this limitation, a new IsOptional field state has been introduced. It allows a partial record to retain the same type even as fields are updated. This is achieved by mapping field values to Option, so that the status of each field is determined at runtime. Using this approach, a partial record like __PartialFooBar&lt;IsOptional, IsOptional&gt; can serve as an optional builder.\nYou can create and use an optional builder with the optional_builder, set, and finalize_optional methods as shown below:\n\nUnlike the original typestate builder, the type of the builder remains __PartialFooBar&lt;IsOptional, IsOptional&gt; after each call to set. The finalize_optional method returns a Result, producing an error if any field contains a None value. This check is necessary because, without the typestate guarantees, the compiler cannot ensure at compile time that all fields are initialized.\nYou can also use the optional builder with finalize_with_default if all fields in the extensible record implement Default. In that case, you can safely finalize the record without handling a potential error:\n\nThe optional builder is used by cgp-serde to implement generic deserialization for extensible records.\nExtensible visitor dispatchers\nThe extensible visitor providers have been redesigned to support a wider range of use cases. The library now includes the following dispatchers:\n\nMatchWithValueHandlers – matches and dispatches on an owned input Value.\nMatchWithValueHandlersRef – matches and dispatches on a borrowed input &amp;Value.\nMatchWithValueHandlersMut – matches and dispatches on a mutably borrowed input &amp;mut Value.\n\nThese dispatchers are compatible with both the owned and borrowed variants of the handler traits, such as Computer and ComputerRef. Within Computer, the borrowed value, including the reference, is used as the Input parameter. For example:\n\nand also:\n\nIn addition, tuple variants of the matchers have been introduced to handle input values alongside additional arguments:\n\nMatchFirstWithValueHandlers – matches and dispatches on an owned Value within an input (Value, Args).\nMatchFirstWithValueHandlersRef – matches and dispatches on a borrowed &amp;Value within an input (&amp;Value, Args).\nMatchFirstWithValueHandlersMut – matches and dispatches on a mutably borrowed &amp;mut Value within an input (&amp;mut Value, Args).\n\nThese matchers are designed to support the implementation of #[cgp_auto_dispatch], enabling extra arguments to be passed through the dispatchers without being directly matched on. They can also be used in advanced extensible visitor scenarios where additional arguments need to be forwarded to the visitors.\nIt is important to note that the handlers do not implement the reference variants of the handler traits. For instance:\n\nis implemented, but not:\n\nThis is because ComputerRef converts the entire input type into a reference, making it difficult to pass an owned value within Args.\nThis distinction highlights that the Computer trait is more flexible than ComputerRef, since it can work with borrowed values as input types. By contrast, ComputerRef is simpler for developers who are new to the framework, as it allows working with borrowed values without needing to understand higher-ranked trait bounds. For more advanced use cases that involve extra arguments, it is generally more straightforward to use Computer directly rather than extending ComputerRef to accommodate those patterns.\nInternally, all dispatchers share the same core abstraction that powers extensible visitors. This means the library does not reimplement the same logic multiple times for each of the six dispatchers. It also allows advanced users to build on these abstractions to define custom dispatchers for specialized use cases.\nFor a detailed explanation of how these dispatchers are implemented, see the section on extensible visitors. Additional blog posts will follow to explore these extended features in greater depth.\nAsyncComputer Trait\nA new AsyncComputer trait has been introduced as the asynchronous counterpart to Computer. It is defined as follows:\n\nThe AsyncComputer trait is more general than Handler because it does not require the function to return a Result. This design creates a clearer symmetry between the synchronous and asynchronous variants of the computation traits: AsyncComputer serves as the async version of Computer, while Handler serves as the async version of TryComputer.\nWith this addition, abstractions such as extensible visitors and monadic computations now implement their asynchronous logic using AsyncComputer rather than Handler. The same promotion pattern used in the synchronous counterparts is then applied to lift these implementations to TryComputer and Handler, maintaining consistency across both sync and async components.\nMonadic computation pipeline\nThe cgp-monad crate has been introduced to provide foundational support for monadic computation. This functionality simplifies the implementation of extensible visitors by introducing a structured yet flexible way to handle composable computations.\nUnlike the standard definition of monads in languages such as Haskell, the monadic implementation in CGP is retroactive. This means that existing Rust types like Result and Option can be treated as monads without requiring direct trait implementations on those types.\nFor example, instead of defining a monad as a higher-kinded type, CGP allows the extraction of inner value types from a monadic type using a monadic provider:\n\nIn this example, the ContainsValue trait matches on an Output type and yields its underlying Value type. The ErrMonadic provider implements ContainsValue by extracting the value type T from a Result&lt;T, E&gt;.\nInstead of relying on the standard monadic bind operation, CGP introduces a lifting mechanism that wraps the input of a Computer provider:\n\nIn this case, the provider BindErr&lt;ErrMonadic, Cont&gt; wraps a provider Cont that implements Computer with an input type of T1 and an output type of Result&lt;T2, E&gt;. It transforms it into a Computer provider that accepts Result&lt;T1, E&gt; as input and produces Result&lt;T2, E&gt; as output.\nConceptually, this corresponds to the following Haskell signature:\n\nwhich reverses the argument order of the standard bind operator (&gt;&gt;=):\n\nBy reversing the argument order, CGP effectively turns the bind operator into a higher-order function that lifts monadic functions, allowing them to be composed afterward through ordinary function composition.\nAt present, CGP’s monadic implementation requires separate bind implementations for synchronous and asynchronous computations. This limitation exists because stable Rust does not yet support impl trait in type aliases, which prevents us to name anonymous impl Future as the Output type in Computer. Once this feature becomes stable, CGP will be able to extend monadic support to opaque types behind impl Trait, including Future, Stream, and Iterator.\nA complete introduction to monadic computation within CGP deserves its own dedicated article. For now, the key takeaway is that CGP v0.5.0 establishes a foundational monadic layer that enables the development of more advanced abstractions, such as those seen in extensible visitors, and paves the way for future extensions of the framework.\nGenerate &amp;'static str from symbols\nThe type produced by the Symbol! macro can now generically produce a &amp;'static str value that can be used within generic code. For example:\n\nThis functionality is provided through the StaticString trait along with a blanket implementation, defined as follows:\n\nThis represents a major breakthrough, as it allows actual &amp;'static str values to be “passed” as types through generic parameters by encapsulating them in CGP symbol types, without requiring ad hoc implementations to be written.\nInternally, a symbol such as Symbol!(\"abc\") is expanded into:\n\nor, in a more human-readable form:\n\nThe value 3 in the first position represents the length of the symbol. This metadata is generated by the Symbol! macro starting from v0.5.0, enabling the reconstruction of the corresponding &amp;'static str value during const evaluation.\nThis approach is necessary because, without it, full const generics support would be required to “count” the number of characters in a type, which is not yet available in stable Rust. By precomputing the length inside the Symbol! macro, it becomes possible to construct an array of the correct size and iterate within const evaluation to recreate the string value.\nThe ability to produce static strings is particularly valuable in generic code that needs to pass &amp;str values to other functions, such as in cgp-serde. Without this feature, a new String value would have to be reconstructed every time a function is called, which would significantly impact the performance of using symbols as string values.\n\nBreaking Changes\nAlongside the new features, v0.5.0 introduces several breaking changes. These updates are part of the ongoing effort to prepare for eventual v1 stabilization, ensuring that any necessary breaking changes are made early rather than later.\nRemoval of Async and Send bounds for async constructs\nThe most significant breaking change in this release is the removal of the Async trait, which was previously defined as:\n\nIn earlier versions of CGP, the Async trait served as an alias for Send + Sync. It was used in trait bounds for abstract types and generic parameters to ensure that the Future returned by generic async functions could implement Send. This requirement is common in functions such as tokio::spawn, and it has traditionally been one of the main reasons Rust developers annotate Send + Sync throughout their code.\nIn order to support Send-able futures, CGP code used to be full of boilerplate of the use of Async. It also makes it more complicated to support both async and sync use cases in CGP.\nPrior to v0.5.0, CGP’s codebase relied heavily on Async bounds to helps ensure that generic async functions can be called within tokio::spawn, but it also introduced considerable boilerplate. It also made it cumbersome for CGP to support both synchronous and asynchronous use cases, requiring traits such as HasAsyncErrorType to act as aliases for HasErrorType&lt;Error: Async&gt; + Async. Maintaining both async and sync versions of similar traits was necessary so that non-async users could instantiate abstract types like Error with values that were not Send.\nTo improve ergonomics around Send-able futures, the Rust compiler team has been developing Return Type Notation (RTN). RTN will allow developers to impose the Send bound on a Future retroactively, at the point where it is actually needed, such as when passing it to tokio::spawn. With RTN, async code using CGP could avoid the need for pervasive Send + Sync annotations.\nHowever, RTN does not appear to be close to stabilization. As a result, CGP originally planned to keep the Async constructs for compatibility in the short term. The good news is that an alternative approach has been found to retroactively add the Send bound to futures without relying on RTN. This allows CGP to simplify its design and remove the redundant Async abstractions entirely, while still maintaining compatibility with common async workflows.\nEmulating RTN\nThe key idea is to introduce a second proxy trait that provides the same method as the original, but with the returned Future implementing Send. This proxy trait must be implemented manually by a concrete context, outside of CGP, but the implementation can forward to the original trait, which can still be implemented using CGP.\nA complete example demonstrating the use of tokio::spawn is available here and here. The example uses the CanRun trait, defined as:\n\nTo use run inside tokio::spawn, we define a proxy trait that adds the Send bound to the returned Future:\n\nThe Runner trait can still be used to implement context-generic providers, so we do not need to require Send on generic types. For example:\n\nIf we need to call CanRun inside tokio::spawn within generic code, we can instead use CanSendRun:\n\nWhen implementing a concrete context, we delegate Runner to RunWithFooBar and manually implement SendRunner by forwarding to Runner:\n\nBy directly implementing SendRunner for App, the trait system can access the concrete type and its associated types, allowing it to retroactively determine that the future returned by run implements Send. This effectively emulates RTN by implementing the proxy trait at the top level.\nUsing this approach, CGP is able remove all uses of Async without waiting for RTN to stabilize. Meanwhile, users who need Send-bound futures can rely on the proxy trait technique to recover the Send bound through the concrete context.\nThis hack is expected to be temporary. Once RTN is stabilized, the proxy traits can be eliminated entirely. Migrating to the proxy trait approach now is simpler than retaining Async long-term, and it avoids a potentially painful migration in the future if CGP becomes widely adopted.\nMigration Advice\nFor existing codebases that still rely on Async and the Send-safe variants such as HasAsyncErrorType, you can copy these definitions locally to continue using them in your projects.\nAlthough CGP has removed the Async constructs, this does not prevent developers from enforcing Send bounds in their own code. The main impact is that all async traits officially defined by the cgp crate no longer impose a Send bound on the returned Future. If your project defines traits that require returned futures to implement Send, you may encounter issues when calling CGP’s async traits. In other words, the split between Send and non-Send only becomes an issue if your project aims to interop with the remaining CGP ecosystem.\nIn the short term, the easiest way to address this is to remove all Send bounds of async functions in your own codebase. If that is not practical, the simplest workaround is to define your own versions of the relevant CGP traits that explicitly include Send in the returned Future.\nCurrently, there are only a small number of async traits in CGP, such as CanRun, CanComputeAsync, and CanHandle. Unless your project heavily relies on these abstractions, redefining these traits locally to include Send should be straightforward and require minimal effort.\nDesugaring of Symbols!\nThe symbol! macro has been renamed to Symbol! to better indicate that it desugars to a type rather than a value. In addition to the renaming, the macro now desugars to a different form.\nBefore v0.5.0, symbol!(\"abc\") desugared to:\n\nStarting from v0.5.0, it desugars to:\n\nThe ι identifier has been replaced with ζ because using ι could trigger Rust’s confusable_idents warning if the variable i appears elsewhere in the code. Choosing ζ reduces the likelihood of such warnings.\nAdditionally, ψ is added at the head of the symbol type along with the length metadata. This enables the implementation of StaticString, allowing the construction of a &amp;'static str without waiting for full const-generic support in Rust.\nFinally, the Char type, previously an alias for ζ, has been renamed to Chars to better reflect that it represents a list of characters rather than a single character.\nReorganize exports in cgp-field\nThe cgp-field crate has grown significantly, so the exports have been reorganized into several submodules. For example, the HasField trait is now exported from cgp::fields::traits::HasField instead of the top-level path cgp::fields::HasField.\nAdd __Partial prefix to derived partial data types\nPartial data types generated by extensible data type macros now receive a __Partial prefix. This makes them effectively hidden and reduces the likelihood of name conflicts with user-defined structs.\nFor example, given:\n\nThe derived partial data type is now named __PartialPerson:\n\nPrior to v0.5.0, the partial type was named PartialPerson, which could easily conflict with a user-defined struct of the same name in the same module.\nThis breaking change should not affect most existing code, as partial data types are not intended to be used directly by end users.\nAdd Code parameter to CanRun\nThe CanRun trait has been updated to include a Code parameter:\n\nPrior to v0.5.0, the trait was defined as:\n\nThe Code parameter allows embedding type-level DSLs for running top-level functions, similar to how Code is used in Computer and Handler for DSLs like Hypershell.\nFor existing users who wish to continue using the original CanRun trait without migrating, you can copy the previous definition into your project and continue using it locally.\nRemoval of HasInner trait\nThe HasInner trait has been removed, along with the cgp-inner crate. It was previously defined as:\n\nThe functionality provided by HasInner has largely been superseded by the UseField pattern, which enables more flexible composition of multiple contexts.\nFor existing users who wish to continue using the original HasInner trait without migrating, you can copy its previous definition into your project and use it locally.\nImprovements\nSeveral improvements have been made to existing constructs in CGP. Here are some highlights.\nAllow non-self argument in getter methods\nIt is now possible to use #[cgp_getter] and #[cgp_auto_getter] with target types other than Self. For example, you can now define a trait like:\n\nWith this, the provider UseField&lt;Symbol!(\"bar\")&gt; would implement FooBarGetter&lt;Context&gt; if Context::Foo implements HasField&lt;Symbol!(\"bar\"), Value = Context::Bar&gt;.\nSupport use of lifetime parameters inside CGP traits\nLifetimes can now be included inside component trait parameters. For instance, cgp-serde defines a component corresponding to serde's Deserialize as follows:\n\nWithin the type parameters of IsProviderFor, the lifetime 'de is captured as Life&lt;'de&gt;, which is defined as:\n\nUsing Life, the lifetime can be referred to inside check_components!, as in the following example:\n\nShortcut for overriding provider names in #[cgp_type] and #[cgp_getter]\nYou can now customize only the name of the provider trait in #[cgp_type] and #[cgp_getter] without using the fully qualified key-value syntax.\nFor example:\n\nis equivalent to:\n\n\nBug Fixes\nFix use of new in delegate_components! when keys array is used\nA bug in delegate_components! has been fixed that occurred when value expressions like UseDelegate&lt;new InnerComponents { ... }&gt; were used with multiple keys in a list.\nFor example:\n\nPreviously, the inner struct InnerComponents would be expanded twice. With this fix, InnerComponents is expanded only once, regardless of the number of keys in the delegate entry.\nOther Updates\nRustLab Presentation\nNext month in November, I will be presenting about CGP at RustLab in Florence. The presentation is titled How to Stop Fighting with Coherence and Start Writing Context-Generic Trait Impls.\nIf you are interested in attending, you can use the discount code SP20FR for a 20% discount.\ncgp-serde\nAlongside the RustLab presentation, I am working on cgp-serde, which provides an extensible version of the popular serde crate. Here is a sneak preview of its capabilities.\nThe crate offers context-generic versions of the Serialize and Deserialize traits:\n\nThe cgp-serde traits remain compatible with the original serde traits. This allows reuse of existing serde implementations without reimplementing them for cgp-serde.\nIn addition, cgp-serde allows customizing how specific field types are serialized. For example, Vec&lt;u8&gt; or Datetime can be serialized in a custom manner without being restricted by trait coherence rules.\nAnother key feature of cgp-serde is that it enables the use of context and capabilities patterns with serde. For instance, here is a provider implementation that allocates memory for a value type using an arena allocator provided by the context:\n\nThis allows the implementation of a deserialization context that provides an arena allocator and uses it to deserialize into a &amp;'a Value.\nAn example of a deserializer context with custom deserializer providers is shown below:\n\nAs we can see in the above example, within the wiring for ValueDeserializerComponent, we use UseDelegate to create a table lookup for deserialization implementations corresponding to different value types. First, UseSerde is used to implement deserialization via the original Deserialize trait from serde. After that, DeserializeHex handles the conversion of a hex string into a Vec&lt;u8&gt;.\nNext, DeserializeRecordFields is applied to deserialize each field in the Payload struct using their respective value deserializers. This functionality is enabled by the #[derive(CgpData)] attribute on Payload. The example also illustrates that it is not necessary to derive any serialization traits on Payload to make it work with cgp-serde.\nFinally, DeserializeAndAllocate is used to deserialize a &amp;'a Payload value by allocating the payload in the arena allocator provided by the context.\nThere are many additional details that will be explained further with the official release of cgp-serde. The crate is nearly ready, with the remaining work focused on documentation. I will also demonstrate cgp-serde at RustLab. If you are interested in learning more, join the conference to see it in action.\nAcknowledgement\nThank you April Gonçalves, Abhishek Tripathi and Dzmitry Lahoda for sponsoring the development of CGP!\n","id":"https://www.contextgeneric.dev/blog/v0-5-0-release/","title":"CGP v0.5.0 Release - Auto dispatchers, extensible datatype improvements, monadic computation, RTN emulation, modular serde, and more"},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"body":"Overview\nIt has only been two weeks since v0.5.0 was released, yet we are already introducing another major update. CGP v0.6.0 brings significant improvements to the ergonomics of implementing providers and contexts, making it easier and more intuitive for developers to build on top of CGP.\nSimplified provider implementation with #[cgp_impl]\nThe highlight of v0.6.0 is the introduction of the new #[cgp_impl] macro, which replaces #[cgp_provider] and greatly simplifies the way provider traits are implemented in CGP.\nEssentially, #[cgp_impl] lets you write a provider trait implementation as if it were a blanket implementation for the consumer trait. This makes implementing CGP providers feel as natural as working with regular Rust traits, reducing boilerplate and making the intent clearer.\nExample\nConsider the following example trait:\n\nWith #[cgp_impl], you can now implement a provider like this:\n\nPreviously, the same functionality required using #[cgp_provider], which looked like this:\n\nAs shown above, #[cgp_impl] produces syntax that is much closer to standard Rust trait implementations, making provider definitions easier to read and write.\nBehind the scenes, #[cgp_impl] expands to the same form as a manually written provider implementation using #[cgp_provider]. Understanding how provider traits work remains important, especially when debugging or exploring the generated code.\nDirect component delegation on context types\nIn v0.6.0, we can now use delegate_components! directly on the context type itself, without requiring a separate provider struct. This makes it possible to write code like the following:\n\nPreviously, it was necessary to use a separate provider for the context:\n\nThis new approach significantly simplifies how components are wired to a concrete context. There is no longer a need to introduce an extra AppComponents struct just to serve as a type-level lookup table. The lookup table is now embedded directly in the App type itself.\nThis change can also yield a small improvement in compile times, since there is one fewer level of indirection for the trait solver to handle when resolving provider relationships.\nDirect implementation of consumer traits\nA major benefit of this improvement is the ability to implement consumer traits directly on a concrete context type. For example:\n\nIn earlier versions, you would have needed to write the following instead:\n\nThis older style often made code appear verbose and confusing, particularly for newcomers. The new approach is cleaner and more intuitive, aligning better with standard Rust trait conventions.\nUnlock use of #[cgp_component] on any trait\nThis simplification also enables #[cgp_component] to be applied to nearly any existing Rust trait without breaking existing code. This is a major step toward making CGP easier to adopt, since developers can start integrating it gradually without needing to first learn all its concepts.\nFor example, in principle it is now possible to annotate the standard library’s Hash trait with #[cgp_component]:\n\nThis does not affect existing code that uses or implements Hash, but it allows new overlapping implementations such as:\n\nYou can then reuse this implementation on any type using delegate_components!:\n\nWith this capability, CGP can now enhance any existing Rust trait without changing how those traits are implemented. By supporting overlapping and orphan implementations safely, CGP v0.6.0 makes it far easier and more appealing for developers to experiment with the framework, since the onboarding cost is now significantly lower.\nRemoval of HasCgpProvider trait\nConsumer traits can now be implemented directly because CGP has removed the HasCgpProvider trait. Instead of relying on HasCgpProvider, blanket implementations for consumer traits now use DelegateComponent, just as provider traits do.\nFor example, the HasName trait introduced earlier now expands into the following blanket implementation:\n\nPreviously, the generated code looked like this:\n\nThe old design had an important limitation: any type implementing HasCgpProvider could not also implement the corresponding consumer trait directly, because the blanket implementation would already cover it. With the new approach, this restriction no longer applies. A type that implements DelegateComponent can still define its own consumer trait implementation, as long as there is no conflicting implementation for the same component key. This means developers can freely implement consumer traits on their context types without running into conflicts, as long as the delegation remains unambiguous.\nBackward Compatibility\nSince many projects already use CGP, removing context providers entirely could cause extensive breakage. To avoid this, the new version modifies the behavior of #[cgp_context] so that it automatically provides blanket DelegateComponent&lt;Name&gt; implementations for all component names, preserving compatibility with existing code.\nFor instance, consider the following context definition:\n\nThe macro now generates the following code:\n\nThis bulk delegation plays the same role that HasCgpProvider once did, ensuring that older codebases continue to function correctly. Previously, the generated code would have looked like this:\n\nBy automatically generating the bulk delegation, CGP v0.6.0 maintains backward compatibility while adopting a cleaner and more flexible design.\nBackground\nTo understand why HasCgpProvider was used in the first place, it helps to look back at CGP’s early design. The original idea was to allow multiple concrete contexts to share a single provider “table.” For example:\n\nIn this design, different applications could reuse the same wiring setup without reconfiguring components each time. However, in practice, many contexts shared most of their wiring but required small customizations. This need for partial reuse led to the introduction of the preset feature, which provided the same flexibility without the drawbacks of shared context providers.\nOver time, the HasCgpProvider system became a remnant of CGP’s early architecture. It persisted mainly out of concern for backward compatibility. After reevaluating the issue, it became clear that generating DelegateComponent implementations through #[cgp_context] could preserve compatibility while removing unnecessary complexity. This realization made it possible to remove HasCgpProvider entirely in v0.6.0, simplifying the design and improving flexibility without disrupting existing users.\nIntroduce #[cgp_inherit] macro\nWith the deprecation of #[cgp_context], CGP v0.6.0 introduces a new and clearer way for concrete contexts to inherit from a preset. The new #[cgp_inherit] macro provides this functionality directly, allowing a context to build upon a preset without the need for an additional provider type.\nExample\nGiven the following:\n\nis roughly equivalent to the previous way of expressing preset inheritance with #[cgp_context]:\n\nThe key difference is that with #[cgp_inherit], the preset inheritance happens directly on the App context itself. There is no need to generate an intermediary AppComponents provider type that inherits from MyPreset. This makes the inheritance mechanism simpler and more transparent.\nBehind the scenes, #[cgp_inherit] generates code similar to the following:\n\nThis generated implementation delegates component resolution to the preset whenever the component key is part of that preset. At the same time, the design allows for flexibility: even with these blanket implementations, you can still implement consumer traits directly on the App context for any component keys that are not provided by the preset.\nMigration Guide\nIn most cases, upgrading to v0.6.0 should not require any changes to existing code. The update has been designed with backward compatibility in mind, allowing projects to transition smoothly while taking advantage of the new ergonomic improvements.\nRemoval of HasCgpProvider trait\nThe most significant breaking change in v0.6.0 is the removal of the HasCgpProvider trait and the change in how consumer trait blanket implementations are generated. However, most CGP users do not directly interact with these internal constructs, so existing code should continue to compile without modification. The change primarily affects macro-generated code and internal delegation logic rather than user-defined traits or providers.\nDeprecation of #[cgp_context]\nThe #[cgp_context] macro has been retained for backward compatibility, ensuring that existing projects using context providers will continue to function as before. However, it is strongly recommended to remove #[cgp_context] when upgrading to v0.6.0. Doing so allows your context types to directly implement consumer traits, taking full advantage of the simplified delegation system and cleaner trait relationships introduced in this release.\nDeprecation of #[cgp_provider]\nThe introduction of the #[cgp_impl] macro replaces the need for #[cgp_provider] when defining provider implementations. Existing uses of #[cgp_provider] will still compile and function correctly in v0.6.0, but developers are encouraged to migrate to #[cgp_impl] for new code. The new syntax is closer to standard Rust trait implementations, making provider definitions easier to read and reason about.\nIt is also advisable to migrate all existing provider implementations to use #[cgp_impl], especially in projects with multiple contributors. Mixing both macros can lead to confusion among developers unfamiliar with CGP, as they may wonder why two different styles exist. In contrast, #[cgp_impl] is intuitive to Rust users, since it effectively represents a named blanket implementation and requires no prior knowledge of CGP’s internal model.\n\nUpdates\nRustLab Presentation\n\nThe time is drawing near, and I will be presenting How to Stop Fighting with Coherence and Start Writing Context-Generic Trait Impls at RustLab on November 3rd. I look forward to meeting everyone attending the conference!\nAcknowledgement\nThank you April Gonçalves and Dzmitry Lahoda for sponsoring the development of CGP!\n","id":"https://www.contextgeneric.dev/blog/v0-6-0-release/","title":"CGP v0.6.0 Release - Major ergonomic improvements for provider and context implementations"},"https://www.contextgeneric.dev/contribute/":{"body":"Contribution\nWe welcome contributors who are passionate about promoting CGP within the Rust ecosystem. Whether you're a beginner or an experienced Rust developer, there are numerous ways you can contribute to the project.\nIn this page, we'll explore different ways you can get involved and help grow the CGP community. Your contributions, regardless of your level of expertise, are valuable and appreciated!\nParticipate in Discussions\nJoin the conversation on platforms like Discord, GitHub or Reddit. Whether you have questions about CGP or ideas for new topics or content, these forums are great places to share your thoughts and engage with the community.\nRead The Documentation\nWe encourage you to explore the documentation available on this website, including the CGP Patterns book. Your feedback is invaluable to us—if you encounter anything confusing or unclear, please let us know so we can improve the content and make it more accessible to everyone.\nPublish Your own CGP Components\nThe modularity provided by CGP can benefit everyone, even for those who do not care about modularity. An ideal future for CGP is to have a community that publishes large amount of reusable components, that can be used by anyone to build modular applications with minimal application-specific code.\nWhen that happens, it would become possible for CGP to be used by anyone, without having to write their own context-generic code. Instead, the majority of the users will only need to define the wirings of existing components that have been published by the community.\nIf you care about modularity and would like to contribute, the best way is to start publishing context-generic components, and help build up an ecosystem that benefits the rest of developers.\nSpread on Social Media\nHelp raise awareness of CGP by sharing it on social media. Follow our official BlueSky account @contextgeneric.dev to stay updated on CGP’s development and latest news.\nWrite About It\nIf you find CGP interesting, consider writing your own blog posts or tutorials to share your learning journey. Sharing your insights can help others learn CGP in different ways, and even if the topic is\nalready covered on the official site, your perspective might make it clearer to others.\nSponsor Me\nIf you appreciate my work and want to see CGP gain wider adoption, the best way to support it is to sponsor me, regardless of the amount. I have sponsorship pages on Github Sponsor, Patreon, and Ko-Fi.\nAs with most open-source projects, I don't expect sponsorship to be enough to allow me to quit my job and work full-time on CGP, or even with CGP. However, any financial support will significantly boost my confidence in the value of my work and encourage me to continue dedicating hundreds of hours of my free time to it instead of other pursuits.\nI do hope to eventually spend a year or two working full-time on CGP using my personal savings, even if sponsorships don't cover my living expenses. However, exponential growth is important, and if I could secure around a quarter of my living expenses through monthly sponsorship, it would reduce some risk and suggest a higher chance of CGP becoming self-sustaining later on.\nAcknowledgement\nCGP is created by Soares Chen, with inspiration drawn from various programming languages and paradigms, particularly Haskell typeclasses.\nThe development of CGP would not have been possible without the strong support of my employer, Informal Systems. CGP was initially introduced and refined as part of the Hermes SDK project, which leverages CGP to build a highly modular relayer for inter-blockchain communication.\n","id":"https://www.contextgeneric.dev/contribute/","title":"Contribute"},"https://www.contextgeneric.dev/overview/":{"body":"Overview\nThis page provides a quick overview and highlight the key features of CGP. For a deeper dive into the concepts and patterns of CGP, explore our comprehensive book, Context-Generic Programming Patterns.\nKey Features\nThis section highlights some of the key advantages that Context-Generic Programming (CGP) offers.\nModular Component System\nCGP leverages Rust's powerful trait system to define generic component interfaces that decouple the code that consumes an interface from the code that implements it. This is achieved by introducing:\n\nProvider traits, which define the implementation of a component interface.\nConsumer traits, which specify how a component interface is consumed.\n\nBy separating provider traits from consumer traits, CGP enables multiple context-generic provider implementations to coexist. This approach circumvents Rust's usual limitation on overlapping or orphaned trait implementations, offering greater flexibility and modularity.\nHighly Expressive Macros\nCGP empowers developers to write abstract programs that are generic over a context, including all its associated types and methods. This capability eliminates the need to explicitly specify an extensive list of generic parameters in type signatures, streamlining code structure and readability.\nAdditionally, CGP offers powerful macros for defining component interfaces and simplifies the process of wiring component implementations for use with a specific context.\nWith CGP, Rust code can achieve a level of expressiveness comparable to, if not exceeding, that of other popular programming paradigms, such as object-oriented programming and dynamically typed programming.\nType-Safe Composition\nCGP leverages Rust's robust type system to guarantee that all component wiring is type-safe, ensuring that any missing dependencies are caught at compile time. It operates entirely within safe Rust, avoiding dynamic typing techniques such as dyn traits, Any, or runtime reflection.\nThis strict adherence to type safety ensures that no CGP-specific errors can occur during application runtime, providing developers with greater confidence in their code's reliability.\nNo-Std Friendly\nCGP enables the creation of fully abstract programs that can be defined without relying on any concrete dependencies — except for other abstract CGP components. This abstraction extends to dependencies such as I/O, runtime, cryptographic operations, and encoding schemes, allowing these concerns to be separated from the core application logic.\nAs a result, the core logic of an application can be seamlessly instantiated with specialized dependencies, making it compatible with no-std environments. These include embedded systems, operating system kernels, sandboxed environments like WebAssembly, and symbolic execution platforms such as Kani.\nZero-Cost Abstraction\nCGP operates entirely at compile-time, leveraging Rust's type system to ensure correctness without introducing runtime overhead. This approach upholds Rust's hallmark of zero-cost abstraction, enabling developers to use CGP's features without sacrificing runtime performance.\nProblems Solved\nHere are some common problems in Rust that CGP helps to address.\nError Handling\nRather than being tied to a specific error crate like anyhow or eyre, CGP's HasErrorType and CanRaiseError traits allow the decoupling of core application logic from error handling. This enables concrete applications to choose their preferred error library and select the error-handling strategy that best suits their needs, such as deciding whether or not to include stack traces in errors.\nFor more detailed information on error handling, refer to the error handling chapter in our book\nAsync Runtime\nRather than committing to a specific runtime crate like tokio or async-std, CGP enables the application core logic to rely on an abstract runtime context that provides only the features required by the application.\nUnlike monolithic runtime traits, an abstract runtime context in CGP does not require a comprehensive or upfront design of all possible runtime features any application might need. This flexibility allows easy switching between concrete runtime implementations, depending on the specific runtime features the application utilizes.\nOverlapping Implementations\nA common frustration among Rust programmers is the restriction on overlapping trait implementations. A typical workaround is to use newtype wrappers, but this can become cumbersome when dealing with multiple composite types that need to be extended.\nRust requires a crate to own either the type or the trait for a trait implementation, which often places a significant burden on the author of a new type to implement all the common traits their users might need. This can lead to bloated type definitions, with excessive trait implementations such as Eq, Clone, TryFrom, Hash, and Serialize. Despite careful design, libraries may still face requests from users to implement less common traits, which can only be implemented by the crate that owns the type.\nWith the introduction of provider traits, CGP removes these restrictions on overlapping implementations. Both the owner and non-owners of a type can define custom implementations for that type. When multiple provider implementations are available, users can choose one and wire it up easily using CGP constructs.\nCGP also favors the use of abstract types over newtype wrappers. For instance, a type like f64 can be directly used for both Context::Distance and Context::Weight, with the associated types still treated as distinct within the abstract code. CGP also enables specialized provider implementations, even if the crate does not own the primitive type (e.g., f64) or the provider trait.\nDynamic Dispatch\nA common approach for newcomers to support polymorphism in Rust is to use dynamic dispatch with dyn Trait objects. However, this severely limits the functionality to a restricted subset of dyn-compatible (object-safe) features in Rust. Often, this limitation spreads throughout the entire codebase, requiring non-trivial workarounds for non-dyn-compatible constructs, such as Clone.\nEven when dynamic dispatch is not used, many Rust programmers rely on ad-hoc polymorphism, defining enums to represent all potential variants of types in the application. This results in numerous match expressions scattered across the codebase, making it difficult to decouple logic for each branch. Additionally, adding new variants to the enum becomes challenging, as every branch must be updated, even when the new variant is only used in a small portion of the code.\nCGP provides several solutions to address the dynamic dispatch problem by delegating the \"assembly\" of the variant collection to the concrete context. The core application logic can be written generically over the context and the associated type representing the abstract enum. CGP also facilitates powerful datatype-generic patterns that allow providers for each variant to be implemented separately and combined to work with enums that contain any combination of variants.\nMonolithic Traits\nEven without CGP, Rust's trait system provides powerful mechanisms for building abstractions that would be difficult to achieve in other mainstream languages. One common best practice is to write abstract code that is generic over a context type, but this often involves an implicit trait bound tied directly to the generic context.\nUnlike CGP, traits in this pattern are typically designed as monolithic, encompassing all the dependencies that the core application might need. Without CGP, an abstract caller must also include all trait bounds required by the generic functions it invokes. As a result, any additional generic trait bounds tend to propagate throughout the codebase, leading developers to combine all these trait bounds into one monolithic trait for convenience.\nMonolithic traits can quickly become bottlenecks that prevent large projects from scaling. It's not uncommon for such traits to become bloated with dozens or even hundreds of methods and types. This overgrowth makes it increasingly difficult to introduce new implementations or modify existing ones. Additionally, with Rust's current practices, breaking down or decoupling these monolithic traits into smaller, more manageable traits can be challenging.\nCGP offers significant improvements over this traditional pattern, making it possible to write abstract Rust code without the risk of creating unwieldy, monolithic traits. CGP enables the decomposition of large traits into many small, focused traits, each ideally consisting of just a single method or type. This is made possible by the dependency injection pattern used in CGP, which allows implementations to introduce only the minimal trait bounds they need directly within the implementation, rather than bundling everything into a single, monolithic structure.\n","id":"https://www.contextgeneric.dev/overview/","title":"Overview"},"https://www.contextgeneric.dev/resources/":{"body":"Resources\nThis page lists some resources related to CGP. More resources will be added as the project continues to develop.\nCrates\n\ncgp - The main Rust crate that provides the core constructs for programming using CGP.\ncgp-error-anyhow - A CGP crate for handling modular errors using anyhow.\n\nTutorials\n\nHello World Tutorial - A hello-world-style introduction to CGP.\n\nBooks\n\nContext-Generic Programming Patterns - The main book for learning CGP and understand various design patterns for CGP.\n\nProjects\n\nCGP Examples - A repository hosting various examples of using CGP.\nHypershell - A type-level DSL for shell-scripting in Rust.\nHermes SDK - The first project that uses CGP for real world applications.\n\n","id":"https://www.contextgeneric.dev/resources/","title":"Resources"},"https://www.contextgeneric.dev/tutorials/":{"body":"Tutorials\n","id":"https://www.contextgeneric.dev/tutorials/","title":"Tutorials"},"https://www.contextgeneric.dev/tutorials/hello/":{"body":"We will demonstrate various concepts of CGP with a simple hello world example.\nGreeter Component\nTo begin, we import the cgp crate and define a greeter component as follows:\n\nThe cgp crate provides common constructs through its prelude module, which should be imported in most cases. The first CGP construct we use here is the #[cgp_component] macro. This macro generates additional CGP constructs for the greeter component.\nThe target of this macro, CanGreet, is a consumer trait used similarly to regular Rust traits. However, unlike traditional traits, we won't implement anything directly on this trait.\nIn its simplified form, the argument to the macro, Greeter, designates a provider trait for the component. The Greeter provider is used to define the actual implementations for the greeter component. It has a similar structure to CanGreet, but with the implicit Self type replaced by a generic Context type.\nThe macro also generates an empty GreeterComponent struct, which is used as the name of the greeter component which can be used for the component wiring later on.\nName Getter\nNow, we will define an getter trait to retrieve the name value from a context:\n\nThe HasName trait contains the getter method name, which returns a &amp;str string value.\nThe #[cgp_auto_getter] attribute macro applied to HasName automatically generates a blanket implementation. This enables any context containing a field named name of type String to automatically implement the HasName trait.\nHello Greeter\nThe traits CanGreet and HasName can be defined separately across different modules or crates. However, we can import them into a single location and then implement a Greeter provider that uses HasName in its implementation:\n\nWe use #[cgp_impl] to define a new provider, called GreetHello, which implements the Greeter provider trait. The implementation is written to be generic over any Context type that implements HasName.\nNormally, it would not be possible to write a blanket implementation like this in vanilla Rust, due to it violating the overlapping and orphan rules of Rust traits. However, the use of #[cgp_impl] and the Greeter provider trait allows us to bypass this restriction.\nBehind the scene, the macro generates an empty struct named GreetHello, which is used as an identifier of the provider that implements the Greeter trait.\nNotice that the constraint HasName is specified only in the impl block, not in the trait bounds for CanGreet or Greeter. This design allows us to use dependency injection for both values and types through Rust’s trait system.\nPerson Context\nNext, we define a concrete context, Person, and wire it up to use GreetHello for implementing CanGreet:\n\nThe Person context is defined as a struct containing a name field of type String.\nWe use the #[derive(HasField)] macro to automatically derive HasField implementations for every field in Person. This works together with the blanket implementation generated by #[cgp_auto_getter] for HasName, allowing HasName to be automatically implemented for Person without requiring any additional code.\nDelegate Components\nNext, we want to define some wirings to link up the GreetHello that we defined earlier, so that we can use it on the Person context. This is done by using the delegate_components! macro as follows:\n\nWe use the delegate_components! macro to perform the wiring of Person context with the chosen providers for each CGP component that we want to use with Person. For each entry in delegate_components!, we use the component name type as the key, and the chosen provider as the value.\nThe mapping GreeterComponent: GreetHello indicates that we want to use GreetHello as the implementation of the CanGreet consumer trait.\nCalling Greet\nNow that the wiring is set up, we can construct a Person instance and call greet on it:\n\nThis is made possible by a series of blanket implementations generated by CGP. Here's how the magic works:\n\nWe can call greet because CanGreet is implemented for Person.\nPerson contains the delegate_components! mapping that uses GreetHello as the provider for GreeterComponent.\nGreetHello implements Greeter for Person.\nPerson implements HasName via the HasField implementation.\n\nThere’s quite a bit of indirection happening behind the scenes!\nConclusion\nBy the end of this tutorial, you should have a high-level understanding of how programming in CGP works. There's much more to explore regarding how CGP handles the wiring behind the scenes, as well as the many features and capabilities CGP offers. To dive deeper, check out our book Context-Generic Programming Patterns.\nFull Example Code\nBelow, we show the full hello world example code, so that you can walk through them again without the text.\n\n","id":"https://www.contextgeneric.dev/tutorials/hello/","title":"Hello World Tutorial"}},"docInfo":{"https://www.contextgeneric.dev/":{"body":386,"title":3},"https://www.contextgeneric.dev/blog/":{"body":1,"title":1},"https://www.contextgeneric.dev/blog/cgp-serde-release/":{"body":3574,"title":9},"https://www.contextgeneric.dev/blog/early-preview-announcement/":{"body":1373,"title":6},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-1/":{"body":3492,"title":13},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-2/":{"body":3973,"title":12},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-3/":{"body":3892,"title":11},"https://www.contextgeneric.dev/blog/extensible-datatypes-part-4/":{"body":5928,"title":11},"https://www.contextgeneric.dev/blog/hypershell-release/":{"body":9039,"title":7},"https://www.contextgeneric.dev/blog/v0-3-0-release/":{"body":832,"title":6},"https://www.contextgeneric.dev/blog/v0-4-0-release/":{"body":1596,"title":9},"https://www.contextgeneric.dev/blog/v0-4-1-release/":{"body":393,"title":3},"https://www.contextgeneric.dev/blog/v0-5-0-release/":{"body":2361,"title":15},"https://www.contextgeneric.dev/blog/v0-6-0-release/":{"body":914,"title":9},"https://www.contextgeneric.dev/contribute/":{"body":336,"title":1},"https://www.contextgeneric.dev/overview/":{"body":858,"title":1},"https://www.contextgeneric.dev/resources/":{"body":81,"title":1},"https://www.contextgeneric.dev/tutorials/":{"body":1,"title":1},"https://www.contextgeneric.dev/tutorials/hello/":{"body":440,"title":3}},"length":19},"lang":"English"}